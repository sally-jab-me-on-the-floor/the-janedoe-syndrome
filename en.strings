"invalid_diagnostic" = "INTERNAL ERROR: this diagnostic should not be produced";
"not_implemented" = "INTERNAL ERROR: feature not implemented: %0";
"error_opening_output" = "error opening '%0' for output: %1";
"error_closing_output" = "error closing '%0' for output: %1";
"cannot_find_group_info_file" = "cannot find group info file at path: '%0'";
"cannot_parse_group_info_file" = "cannot parse group info file at path: '%0'";
"error_no_group_info" = "no group info found for file: '%0'";
"brace_stmt_suggest_do" = "did you mean to use a 'do' statement?";
"error_in_future_swift_version" = "%0; this is an error in the Swift %1 language mode";
"error_at_desk" = "%0; this is an error at desk";
"while_parsing_as_left_angle_bracket" = "while parsing this '<' as a type parameter bracket";
"remark_max_determinism_overriding" = "SWIFTC_MAXIMUM_DETERMINISM overriding %0";
"super_not_in_class_method" = "'super' cannot be used outside of class members";
"class_func_not_in_class" = "class methods are only allowed within classes; use 'static' to declare a %select{static|requirement fulfilled by either a static or class}0 method";
"class_var_not_in_class" = "class properties are only allowed within classes; use 'static' to declare a %select{static|requirement fulfilled by either a static or class}0 property";
"class_subscript_not_in_class" = "class subscripts are only allowed within classes; use 'static' to declare a %select{static|requirement fulfilled by either a static or class}0 subscript";
"require_static_for_const" = "'static' is required for _const variable declaration";
"require_let_for_const" = "let is required for a _const variable declaration";
"require_const_initializer_for_const" = "_const let should be initialized with a compile-time literal";
"func_decl_without_brace" = "expected '{' in body of function declaration";
"func_decl_no_body_expected" = "unexpected body of function declaration";
"convert_let_to_var" = "change 'let' to 'var' to make it mutable";
"note_typo_candidate" = "did you mean '%0'?";
"profile_read_error" = "failed to load profile data '%0': '%1'";
"attr_only_on_parameters" = "'%0' may only be used on parameters";
"function_type_no_parens" = "single argument function types require parentheses";
"error_underlying_module_not_found" = "underlying Objective-C module %0 not found";
"generic_signature_not_minimal" = "generic requirement '%0' is redundant in %1";
"generic_signature_not_valid" = "generic signature %0 is invalid";
"generic_signature_not_equal" = "generic signature %0 is not equal to new signature %1";
"concurrency_default_actor_not_found" = "broken standard library: cannot find default actor type '%0'";
"sdk_node_unrecognized_key" = "unrecognized key '%0' in SDK node";
"sdk_node_unrecognized_node_kind" = "unrecognized SDK node kind '%0'";
"sdk_node_unrecognized_type_attr_kind" = "unrecognized type attribute '%0' in SDK node";
"sdk_node_unrecognized_decl_attr_kind" = "unrecognized declaration attribute '%0' in SDK node";
"sdk_node_unrecognized_decl_kind" = "unrecognized declaration kind '%0' in SDK node";
"sdk_node_unrecognized_accessor_kind" = "unrecognized accessor kind '%0' in SDK node";
"source_location_creates_file_id_conflicts" = "'#sourceLocation' directive produces '#fileID' string of '%0', which conflicts with '#fileID' strings produced by other paths in the module";
"fixit_correct_source_location_file" = "change file in '#sourceLocation' to '%0'";
"error_two_files_same_name" = "filename \"%0\" used twice: '%1' and '%2'";
"note_explain_two_files_same_name" = "filenames are used to distinguish private declarations with the same name";
"circular_reference" = "circular reference";
"circular_reference_through" = "through reference here";
"circular_class_inheritance" = "%0 inherits from itself";
"circular_enum_inheritance" = "%0 has a raw type that depends on itself";
"circular_protocol_def" = "protocol %0 refines itself";
"kind_declname_declared_here" = "%0 %1 declared here";
"warn_property_wrapper_module_scope" = "ignoring associated type %0 in favor of module-scoped property wrapper %0; please qualify the reference with %1";
"circular_type_resolution_note" = "while resolving type %0";
"cannot_load_swiftoverlay_file" = "cannot load cross-import overlay for '%0' and '%1': %2 (declared by '%3')";
"cannot_list_swiftcrossimport_dir" = "cannot list cross-import overlays for '%0': %1 (declared in '%2')";
"cross_imported_by_both_modules" = "modules %0 and %1 both declare module %2 as a cross-import overlay, which may cause paradoxical behavior when looking up names in them; please report this bug to the maintainers of these modules";
"scanner_find_cycle" = "module dependency cycle: '%0'";
"scanner_find_cycle_swift_overlay_path" = "Swift Overlay dependency of '%0' on '%1' via Clang module dependency: '%2'";
"scanner_arguments_invalid" = "dependencies scanner cannot be configured with arguments: '%0'";
"error_scanner_extra" = "failed inside dependency scanner: '%0'";
"warn_scanner_deserialize_failed" = "Failed to load module scanning dependency cache from: '%0', re-building scanner cache from scratch.";
"remark_reuse_cache" = "Re-using serialized module scanning dependency cache from: '%0'.";
"remark_save_cache" = "Serializing module scanning dependency cache to: '%0'.";
"unknown_attribute" = "unknown attribute '%0'";
"in_macro_expansion" = "in expansion of macro %0%select{| on %kind1}1 here";
"macro_experimental" = "%0 macros are an experimental feature that is not enabled %select{|(%1)}1";
"ambiguous_macro_reference" = "ambiguous reference to macro %0";
"bridged_note" = "%0";
"bridged_warning" = "%0";
"bridged_error" = "%0";
"bridged_fatal_error" = "%0";
"bridged_remark" = "%0";
"ide_has_async_alternative" = "%0 has an async alternative that should be preferred in an async context";
"ide_redundant_import" = "module %0 is already imported";
"ide_redundant_import_indirect" = "module %0 is already imported via another module import";
"ide_availability_softdeprecated" = "%0 will be deprecated in %select{a future version|%select{a future version of %2|%2 %4}3}1%select{|: %5}5";
"ide_availability_softdeprecated_rename" = "%0 will be deprecated in %select{a future version|%select{a future version of %2|%2 %4}3}1: renamed to '%5'";
"ide_recursive_accessor_reference" = "attempting to %select{access|modify}1 %0 within its own %select{getter|setter}1";
"opening_brace" = "to match this opening '{'";
"opening_bracket" = "to match this opening '['";
"opening_paren" = "to match this opening '('";
"opening_angle" = "to match this opening '<'";
"extra_rbrace" = "extraneous '}' at top level";
"structure_overflow" = "structure nesting level exceeded maximum of %0";
"expected_close_to_if_directive" = "expected #else or #endif at end of conditional compilation block";
"expected_close_after_else_directive" = "further conditions after #else are unreachable";
"unexpected_conditional_compilation_block_terminator" = "unexpected conditional compilation block terminator";
"incomplete_conditional_compilation_directive" = "incomplete condition in conditional compilation directive";
"extra_tokens_conditional_compilation_directive" = "extra tokens following conditional compilation directive";
"unexpected_rbrace_in_conditional_compilation_block" = "unexpected '}' in conditional compilation block";
"unexpected_if_following_else_compilation_directive" = "unexpected 'if' keyword following '#else' conditional compilation directive; did you mean '#elseif'?";
"pound_diagnostic_expected_string" = "expected string literal in %select{#warning|#error}0 directive";
"pound_diagnostic_expected" = "expected '%0' in %select{#warning|#error}1 directive";
"pound_diagnostic_expected_parens" = "%select{#warning|#error}0 directive requires parentheses";
"pound_diagnostic_interpolation" = "string interpolation is not allowed in %select{#warning|#error}0 directives";
"extra_tokens_pound_diagnostic_directive" = "extra tokens following %select{#warning|#error}0 directive";
"sourceLocation_expected" = "expected '%0' in #sourceLocation directive";
"unexpected_line_directive" = "parameterless closing #sourceLocation() directive without prior opening #sourceLocation(file:,line:) directive";
"expected_line_directive_number" = "expected starting line number for #sourceLocation directive";
"expected_line_directive_name" = "expected filename string literal for #sourceLocation directive";
"extra_tokens_line_directive" = "extra tokens at the end of #sourceLocation directive";
"line_directive_line_zero" = "the line number needs to be greater than zero";
"escaped_parameter_name" = "keyword '%0' does not need to be escaped in argument list";
"forbidden_interpolated_string" = "%0 cannot be an interpolated string literal";
"forbidden_extended_escaping_string" = "%0 cannot be an extended escaping string literal";
"lex_nul_character" = "nul character embedded in middle of file";
"lex_utf16_bom_marker" = "input files must be encoded as UTF-8 instead of UTF-16";
"lex_hashbang_not_allowed" = "hashbang line is allowed only in the main file";
"lex_unprintable_ascii_character" = "unprintable ASCII character found in source file";
"lex_invalid_utf8" = "invalid UTF-8 found in source file";
"lex_single_quote_string" = "single-quoted string literal found, use '\"'";
"lex_invalid_curly_quote" = "unicode curly quote found, replace with '\"'";
"lex_confusable_character" = "unicode character '%0' (%1) looks similar to '%2' (%3); did you mean to use '%2' (%3)?";
"lex_nonbreaking_space" = "non-breaking space (U+00A0) used instead of regular space";
"lex_unterminated_block_comment" = "unterminated '/*' comment";
"lex_comment_start" = "comment started here";
"lex_unterminated_string" = "unterminated string literal";
"lex_invalid_escape" = "invalid escape sequence in literal";
"lex_invalid_u_escape" = "\u{...} escape sequence expects between 1 and 8 hex digits";
"lex_invalid_u_escape_rbrace" = "expected '}' in \u{...} escape sequence";
"lex_invalid_escape_delimiter" = "too many '#' characters in delimited escape";
"lex_invalid_closing_delimiter" = "too many '#' characters in closing delimiter";
"lex_regex_literal_invalid_starting_char" = "regex literal may not start with %0; add backslash to escape";
"lex_regex_literal_invalid_ending_char" = "regex literal may not end with %0; use extended literal instead";
"lex_regex_literal_unterminated" = "unterminated regex literal";
"lex_invalid_unicode_scalar" = "invalid unicode scalar";
"lex_unicode_escape_braces" = "expected hexadecimal code in braces after unicode escape";
"non_ascii_character_found" = "non-ASCII character found when compiling with -string-literals-must-be-ascii-only";
"lex_illegal_multiline_string_start" = "multi-line string literal content must begin on a new line";
"lex_illegal_multiline_string_end" = "multi-line string literal closing delimiter must begin on a new line";
"lex_multiline_string_indent_inconsistent" = "%select{unexpected space in|unexpected tab in|insufficient}2 indentation of %select{line|next %1 lines}0 in multi-line string literal";
"lex_multiline_string_indent_should_match_here" = "should match %select{space|tab}0 here";
"lex_multiline_string_indent_change_line" = "change indentation of %select{this line|these lines}0 to match closing delimiter";
"lex_escaped_newline_at_lastline" = "escaped newline at the last line is not allowed";
"lex_invalid_character" = "invalid character in source file";
"lex_invalid_identifier_start_character" = "an identifier cannot begin with this character";
"lex_expected_digit_in_fp_exponent" = "expected a digit in floating point exponent";
"lex_invalid_digit_in_fp_exponent" = "'%0' is not a valid %select{digit|first character}1 in floating point exponent";
"lex_invalid_digit_in_int_literal" = "'%0' is not a valid %select{binary digit (0 or 1)|octal digit (0-7)|digit|hexadecimal digit (0-9, A-F)}1 in integer literal";
"lex_expected_binary_exponent_in_hex_float_literal" = "hexadecimal floating point literal must end with an exponent";
"lex_unexpected_block_comment_end" = "unexpected end of block comment";
"lex_unary_equal" = "'=' must have consistent whitespace on both sides";
"extra_whitespace_period" = "extraneous whitespace after '.' is not permitted";
"lex_editor_placeholder" = "editor placeholder in source file";
"lex_editor_placeholder_in_playground" = "editor placeholder in source file";
"lex_conflict_marker_in_file" = "source control conflict marker in source file";
"note_in_decl_of" = "in declaration of %0";
"note_in_extension_of" = "in extension of %0";
"line_directive_style_deprecated" = "#line directive was renamed to #sourceLocation";
"declaration_same_line_without_semi" = "consecutive declarations on a line must be separated by ';'";
"expected_decl" = "expected declaration";
"expected_identifier_in_decl" = "expected identifier in %0 declaration";
"expected_keyword_in_decl" = "expected '%0' keyword in %1 declaration";
"number_cant_start_decl_name" = "%0 name can only start with a letter or underscore, not a number";
"expected_identifier_after_case_comma" = "expected identifier after comma in enum 'case' declaration";
"let_cannot_be_computed_property" = "'let' declarations cannot be computed properties";
"let_cannot_be_observing_property" = "'let' declarations cannot be observing properties";
"let_cannot_be_addressed_property" = "'let' declarations cannot have addressors";
"disallowed_var_multiple_getset" = "'var' declarations with multiple variables cannot have explicit getters/setters";
"disallowed_init" = "initial value is not allowed here";
"disallowed_enum_element" = "enum 'case' is not allowed outside of an enum";
"decl_inner_scope" = "declaration is only valid at file scope";
"decl_not_static" = "declaration cannot be marked %0";
"cskeyword_not_attribute" = "'%0' is a declaration modifier, not an attribute";
"decl_already_static" = "%0 cannot appear after another 'static' or 'class' keyword";
"enum_case_dot_prefix" = "extraneous '.' in enum 'case' declaration";
"err_platform_name_deprecated" = "'%0' platform name is deprecated, please migrate to '%1'";
"warn_platform_name_deprecated" = "'%0' platform name is deprecated, please migrate to '%1'";
"static_var_decl_global_scope" = "%select{%error|static properties|class properties}0 may only be declared on a type";
"unexpected_curly_braces_in_decl" = "unexpected '{' in declaration";
"missing_accessor_return_decl" = "missing return in %select{accessor|subscript}0 expected to return %1";
"expected_getset_in_protocol" = "expected get or set in a protocol property";
"unexpected_getset_implementation_in_protocol" = "protocol property %0 cannot have a default implementation specified here; use extension instead";
"computed_property_missing_type" = "computed property must have an explicit type";
"getset_nontrivial_pattern" = "getter/setter can only be defined for a single variable";
"expected_rbrace_in_getset" = "expected '}' at end of variable get/set clause";
"duplicate_accessor" = "%select{variable|subscript}0 already has %1";
"conflicting_accessor" = "%select{variable|subscript}0 cannot provide both %1 and %2";
"previous_accessor" = "%select{|previous definition of }1%0 %select{defined |}1here";
"expected_accessor_parameter_name" = "expected %select{setter|willSet|didSet}0 parameter name";
"expected_rparen_set_name" = "expected ')' after setter parameter name";
"expected_rparen_willSet_name" = "expected ')' after willSet parameter name";
"expected_rparen_didSet_name" = "expected ')' after didSet parameter name";
"expected_lbrace_accessor" = "expected '{' to start %0 definition";
"expected_accessor_kw" = "expected 'get', 'set', 'willSet', or 'didSet' keyword to start an accessor definition";
"invalid_accessor_specifier" = "'%0' accessor cannot have specifier '%1'";
"invalid_accessor_with_effectful_get" = "'%0' accessor is not allowed on property with 'get' accessor that is 'async' or 'throws'";
"missing_getter" = "%select{variable|subscript}0 with %1 must also have a getter";
"missing_reading_accessor" = "%select{variable|subscript}0 with %1 must also have a getter, addressor, or 'read' accessor";
"observing_accessor_conflicts_with_accessor" = "%select{'willSet'|'didSet'}0 cannot be provided together with %1";
"observing_accessor_in_subscript" = "%select{'willSet'|'didSet'}0 is not allowed in subscripts";
"getset_cannot_be_implied" = "variable with implied type cannot have implied getter/setter";
"init_accessor_expected_name" = "expected property name in init accessor effect";
"decl_expected_module_name" = "expected module name in import declaration";
"expected_module_alias" = "cannot refer to module as %0 because it has been aliased; use %1 instead";
"unexpected_operator_in_import_path" = "cannot include postfix operator in import declaration";
"expected_lbrace_extension" = "expected '{' in extension";
"expected_rbrace_extension" = "expected '}' at end of extension";
"extension_type_expected" = "expected type name in extension declaration";
"expected_equal_in_typealias" = "expected '=' in type alias declaration";
"expected_type_in_typealias" = "expected type in type alias declaration";
"expected_type_in_associatedtype" = "expected type in associated type declaration";
"associated_type_generic_parameter_list" = "associated types must not have a generic parameter list";
"func_decl_without_paren" = "expected '(' in argument list of function declaration";
"static_func_decl_global_scope" = "%select{%error|static methods|class methods}0 may only be declared on a type";
"func_decl_expected_arrow" = "expected '->' after function parameter tuple";
"operator_static_in_protocol" = "operator '%0' declared in protocol must be 'static'";
"async_func_modifier" = "'async' must be written after the parameter list of a function";
"expected_lbrace_enum" = "expected '{' in enum";
"expected_rbrace_enum" = "expected '}' at end of enum";
"expected_lbrace_struct" = "expected '{' in struct";
"expected_rbrace_struct" = "expected '}' in struct";
"expected_lbrace_class" = "expected '{' in class";
"expected_rbrace_class" = "expected '}' in class";
"expected_colon_class" = "expected ':' to begin inheritance clause";
"expected_lbrace_actor" = "expected '{' in actor";
"expected_rbrace_actor" = "expected '}' in actor";
"expected_lbrace_protocol" = "expected '{' in protocol type";
"expected_rbrace_protocol" = "expected '}' in protocol";
"protocol_setter_name" = "setter in a protocol cannot have a name";
"protocol_method_with_body" = "protocol methods must not have bodies";
"protocol_init_with_body" = "protocol initializers must not have bodies";
"subscript_decl_wrong_scope" = "'subscript' functions may only be declared within a type";
"expected_lparen_subscript" = "expected '(' for subscript parameters";
"subscript_has_name" = "subscripts cannot have a name";
"expected_arrow_subscript" = "expected '->' for subscript element type";
"expected_type_subscript" = "expected subscripting element type";
"expected_lbrace_subscript" = "expected '{' in subscript to specify getter and setter implementation";
"expected_lbrace_subscript_protocol" = "subscript in protocol must have explicit { get } or { get set } specifier";
"subscript_without_get" = "subscript declarations must have a getter";
"initializer_decl_wrong_scope" = "initializers may only be declared within a type";
"expected_lparen_initializer" = "expected '(' for initializer parameters";
"initializer_has_name" = "initializers cannot have a name";
"initializer_result_type" = "initializers cannot have a result type";
"destructor_decl_outside_class_or_noncopyable" = "deinitializers may only be declared within a class, actor, or noncopyable type";
"destructor_decl_on_noncopyable_enum" = "deinitializers are not yet supported on noncopyable enums";
"expected_lbrace_destructor" = "expected '{' for deinitializer";
"destructor_has_name" = "deinitializers cannot have a name";
"opened_destructor_expected_rparen" = "expected ')' to close parameter list";
"destructor_params" = "no parameter clause allowed on deinitializer";
"operator_decl_inner_scope" = "'operator' may only be declared at file scope";
"expected_operator_name_after_operator" = "expected operator name in operator declaration";
"identifier_within_operator_name" = "'%0' is considered an identifier and must not appear within an operator name";
"operator_name_invalid_char" = "'%0' is not allowed in operator names";
"postfix_operator_name_cannot_start_with_unwrap" = "postfix operator names starting with '?' or '!' are disallowed to avoid collisions with built-in unwrapping operators";
"deprecated_operator_body" = "operator should no longer be declared with body";
"deprecated_operator_body_use_group" = "operator should no longer be declared with body; use a precedence group instead";
"operator_decl_no_fixity" = "operator must be declared as 'prefix', 'postfix', or 'infix'";
"operator_decl_expected_precedencegroup" = "expected precedence group name after ':' in operator declaration";
"operator_decl_should_not_contain_other_attributes" = "unexpected attribute %0 in operator declaration";
"operator_decl_remove_designated_types" = "designated types are no longer used by the compiler; please remove the designated type list from this operator declaration";
"precedencegroup_not_infix" = "only infix operators may declare a precedence";
"expected_precedencegroup_name" = "expected identifier after 'precedencegroup'";
"expected_precedencegroup_lbrace" = "expected '{' after name of precedence group";
"expected_precedencegroup_attribute" = "expected operator attribute identifier in precedence group body";
"unknown_precedencegroup_attribute" = "'%0' is not a valid precedence group attribute";
"expected_precedencegroup_attribute_colon" = "expected colon after attribute name in precedence group";
"precedencegroup_attribute_redeclared" = "'%0' attribute for precedence group declared multiple times";
"expected_precedencegroup_associativity" = "expected 'none', 'left', or 'right' after 'associativity'";
"expected_precedencegroup_assignment" = "expected 'true' or 'false' after 'assignment'";
"expected_precedencegroup_relation" = "expected name of related precedence group after '%0'";
"expected_sil_keyword" = "expected SIL keyword";
"inout_not_attribute" = "@inout is no longer an attribute";
"only_allowed_in_sil" = "'%0' only allowed in SIL modules";
"expected_sil_type" = "expected type in SIL code";
"expected_sil_colon_value_ref" = "expected ':' before type in SIL value reference";
"expected_sil_value_name" = "expected SIL value name";
"expected_sil_type_kind" = "expected SIL type to %0";
"expected_sil_constant" = "expected constant in SIL code";
"referenced_value_no_accessor" = "referenced declaration has no %select{getter|setter}0";
"expected_sil_value_ownership_kind" = "expected value ownership kind in SIL code";
"unrecognized_sil_qualifier" = "unrecognized SIL qualifier";
"silfunc_and_silarg_have_incompatible_sil_value_ownership" = "SILFunction and SILArgument have mismatching ValueOwnershipKinds. Function type specifies: '@%0'. SIL argument specifies: '@%1'.";
"sil_arg_both_lexical_and_eagerMove" = "Function argument is annotated both @_eagerMove and @_noEagerMove, but these are incompatible alternatives";
"expected_sil_colon" = "expected ':' before %0";
"expected_sil_tuple_index" = "expected tuple element index";
"invalid_index_subset" = "invalid index subset; expected '[SU]+' where 'S' represents set indices and 'U' represents unset indices";
"sil_invalid_attribute_for_instruction" = "The attribute '%0' is invalid for the instruction '%1'.";
"sil_invalid_attribute_for_expected" = "Invalid attribute '%0' (expected '%1').";
"expected_sil_profiler_counter_idx" = "expected profiler counter index";
"expected_sil_profiler_counter_pgo_func_name" = "expected profiler counter PGO function name";
"expected_sil_profiler_counter_total" = "expected profiler counter total";
"expected_sil_profiler_counter_hash" = "expected profiler counter hash";
"expected_sil_specify_test_body" = "expected a string consisting of the space-separated test arguments";
"sil_value_redefinition" = "redefinition of value '%0'";
"sil_value_use_type_mismatch" = "value '%0' defined with mismatching type %1 (expected %2)";
"sil_value_def_type_mismatch" = "value '%0' used with mismatching type %1 (expected %2)";
"sil_use_of_undefined_value" = "use of undefined value '%0'";
"sil_prior_reference" = "prior reference was here";
"expected_colon_in_sil_location" = "expected ':' in SIL location";
"sil_invalid_line_in_sil_location" = "line number must be a positive integer";
"sil_invalid_column_in_sil_location" = "column number must be a positive integer";
"sil_invalid_scope_slot" = "scope number must be a positive integer ";
"sil_invalid_constant" = "constant operand must be an integer literal ";
"sil_scope_undeclared" = "scope number %0 needs to be declared before first use";
"sil_scope_redefined" = "scope number %0 is already defined";
"expected_sil_instr_start_of_line" = "SIL instructions must be at the start of a line";
"expected_equal_in_sil_instr" = "expected '=' in SIL instruction";
"wrong_result_count_in_sil_instr" = "wrong number of results for SIL instruction, expected %0";
"expected_sil_instr_opcode" = "expected SIL instruction opcode";
"expected_tok_in_sil_instr" = "expected '%0' in SIL instruction";
"sil_property_generic_signature_mismatch" = "sil_property generic signature must match original declaration";
"sil_string_no_encoding" = "string_literal instruction requires an encoding";
"sil_string_invalid_encoding" = "unknown string literal encoding '%0'";
"expected_tuple_type_in_tuple" = "tuple instruction requires a tuple type";
"sil_tuple_inst_wrong_value_count" = "tuple instruction requires %0 values";
"sil_tuple_inst_wrong_field" = "tuple instruction requires a field number";
"sil_struct_inst_wrong_field" = "struct instruction requires a field name";
"sil_ref_inst_wrong_field" = "ref_element_addr instruction requires a field name";
"sil_invalid_instr_operands" = "invalid instruction operands";
"sil_operand_not_address" = "%0 of '%1' must have address type";
"sil_operand_not_object" = "%0 of '%1' must have object type";
"sil_operand_has_incorrect_moveonlywrapped" = "%0 of '%1' %select{must|must not}2 be of moveonlywrapped type";
"sil_operand_not_ref_storage_address" = "%0 operand of '%1' must have address of %2 type";
"sil_integer_literal_not_integer_type" = "integer_literal instruction requires a 'Builtin.Int<n>' type";
"sil_integer_literal_not_well_formed" = "integer_literal value not well-formed for type %0";
"sil_float_literal_not_float_type" = "float_literal instruction requires a 'Builtin.FP<n>' type";
"sil_substitutions_on_non_polymorphic_type" = "apply of non-polymorphic function cannot have substitutions";
"sil_witness_method_not_protocol" = "witness_method is not a protocol method";
"sil_witness_method_type_does_not_conform" = "witness_method type does not conform to protocol";
"sil_member_decl_not_found" = "member not found";
"sil_named_member_decl_not_found" = "member %0 not found in type %1";
"sil_member_lookup_bad_type" = "cannot lookup member %0 in non-nominal, non-module type %1";
"sil_member_decl_type_mismatch" = "member defined with mismatching type %0 (expected %1)";
"sil_substitution_mismatch" = "substitution replacement type %0 does not conform to protocol %1";
"sil_not_class" = "substitution replacement type %0 is not a class type";
"sil_missing_substitutions" = "missing substitutions";
"sil_too_many_substitutions" = "too many substitutions";
"sil_objc_with_tail_elements" = "alloc_ref [objc] cannot have tail allocated elements";
"sil_expected_access_kind" = "%0 instruction must have explicit access kind";
"sil_expected_access_enforcement" = "%0 instruction must have explicit access enforcement";
"sil_dbg_unknown_key" = "unknown key '%0' in debug variable declaration";
"sil_dbg_unknown_expr_part" = "unrecognized debug info expression %0";
"sil_dbg_expr_expect_operand_kind" = "operator %0 expects a %1 kind operand here";
"sil_keypath_expected_component_kind" = "expected keypath component kind";
"sil_keypath_unknown_component_kind" = "unknown keypath component kind %0";
"sil_keypath_computed_property_missing_part" = "keypath %select{gettable|settable}0_property component needs an %select{id and getter|id, getter, and setter}0";
"sil_keypath_no_root" = "keypath must have a root component declared";
"sil_keypath_index_not_hashable" = "key path index type %0 does not conform to Hashable";
"sil_keypath_index_operand_type_conflict" = "conflicting types for key path operand %0: %1 vs. %2";
"sil_keypath_no_use_of_operand_in_pattern" = "operand %0 is not referenced by any component in the pattern";
"sil_movevalue_invalid_optional_attribute" = "Optional attribute '[%0]' can not be applied to move_value";
"sil_markmustcheck_invalid_attribute" = "Attribute '[%0]' can not be applied to mark_value_as_moveonly";
"sil_markmustcheck_requires_attribute" = "mark_unresolved_non_copyable_value requires an attribute like 'noImplicitCopy'";
"sil_moveonlytocopyable_invalid_attribute" = "Attribute '[%0]' can not be applied to moveonlywrapper_to_copyable";
"sil_moveonlytocopyable_requires_attribute" = "moveonlywrapper_to_copyable requires either a [guaranteed] or [owned] attribute";
"expected_generic_signature" = "expected a generic signature";
"sil_expected_uuid" = "expected a UUID string literal";
"sil_previous_instruction" = "previous instruction";
"expected_sil_block_name" = "expected basic block name or '}'";
"expected_sil_block_colon" = "expected ':' after basic block name";
"sil_undefined_basicblock_use" = "use of undefined basic block %0";
"sil_basicblock_redefinition" = "redefinition of basic block %0";
"sil_basicblock_arg_rparen" = "expected ')' in basic block argument list";
"expected_sil_function_name" = "expected SIL function name";
"expected_sil_rbrace" = "expected '}' at the end of a sil body";
"expected_sil_function_type" = "sil function expected to have SIL function type";
"sil_dynamically_replaced_func_not_found" = "dynamically replaced function not found %0";
"sil_adhoc_requirement_witness_func_not_found" = "ad-hoc requirement witness function not found %0";
"sil_specialize_target_func_not_found" = "_specialize target function not found %0";
"sil_availability_expected_version" = "expected version number in 'available' attribute";
"expected_sil_stage_name" = "expected 'raw' or 'canonical' after 'sil_stage'";
"multiple_sil_stage_decls" = "sil_stage declared multiple times";
"expected_sil_vtable_colon" = "expected ':' in a vtable entry";
"sil_vtable_func_not_found" = "sil function not found %0";
"sil_vtable_class_not_found" = "sil class not found %0";
"sil_vtable_bad_entry_kind" = "expected 'inherited' or 'override'";
"sil_vtable_expect_rsquare" = "expected ']' after vtable entry kind";
"expected_sil_moveonlydeinit_colon" = "expected ':' in a MoveOnlyDeinit entry";
"sil_moveonlydeinit_func_not_found" = "sil function not found %0";
"sil_moveonlydeinit_nominal_not_found" = "sil nominal decl not found %0";
"sil_global_variable_not_found" = "sil global not found %0";
"expected_sil_witness_colon" = "expected ':' in a witness table";
"expected_sil_witness_lparen" = "expected '(' in a witness table";
"expected_sil_witness_rparen" = "expected ')' in a witness table";
"sil_witness_func_not_found" = "sil function not found %0";
"sil_witness_protocol_not_found" = "sil protocol not found %0";
"sil_witness_assoc_not_found" = "sil associated type decl not found %0";
"sil_witness_assoc_conf_not_found" = "sil associated type path for conformance not found %0";
"sil_witness_protocol_conformance_not_found" = "sil protocol conformance not found";
"sil_diff_witness_expected_token" = "expected '%0' in differentiability witness";
"sil_diff_witness_unknown_kind" = "unknown differentiability kind '%0'; expected 'forward', 'reverse', 'normal', or 'linear'";
"sil_diff_witness_serialized_declaration" = "differentiability witness declaration should not be serialized";
"sil_diff_witness_undefined" = "reference to undefined differentiability witness";
"sil_diff_witness_invalid_generic_signature" = "expected witness generic signature '%0' does not have same generic parameters as original function generic signature '%1'";
"sil_coverage_invalid_hash" = "expected coverage hash";
"sil_coverage_expected_lbrace" = "expected '{' in coverage map";
"sil_coverage_expected_loc" = "expected line:column pair";
"sil_coverage_expected_arrow" = "expected '->' after start location";
"sil_coverage_expected_colon" = "expected ':' after source range";
"sil_coverage_invalid_counter" = "expected counter expression, id, or 'zero'";
"sil_coverage_expected_rparen" = "expected ')' to end counter expression";
"sil_coverage_expected_quote" = "expected quotes surrounding PGO function name";
"sil_coverage_invalid_operator" = "expected '+' or '-'";
"expected_type" = "expected type";
"expected_init_value" = "expected initial value after '='";
"expected_identifier_in_dotted_type" = "expected identifier in dotted type";
"expected_identifier_for_type" = "expected identifier for type name";
"expected_rangle_generic_arg_list" = "expected '>' to complete generic argument list";
"expected_type_function_result" = "expected type for function result";
"generic_non_function" = "only syntactic function types can be generic";
"rethrowing_function_type" = "only function declarations may be marked 'rethrows'; did you mean 'throws'?";
"reasync_function_type" = "only function declarations may be marked 'reasync'; did you mean 'async'?";
"async_or_throws_in_wrong_position" = "'%0' may only occur before '->'";
"throw_in_function_type" = "expected throwing specifier; did you mean 'throws'?";
"expected_type_before_arrow" = "expected type before '->'";
"expected_type_after_arrow" = "expected type after '->'";
"function_type_argument_label" = "function types cannot have argument labels; use '_' before %0";
"expected_dynamic_func_attr" = "expected a dynamically_replaceable function";
"async_after_throws" = "%select{'async'|'reasync'}0 must precede %select{'throws'|'rethrows'}1";
"await_in_function_type" = "expected async specifier; did you mean 'async'?";
"duplicate_effects_specifier" = "'%0' has already been specified";
"expected_expr_enum_case_raw_value" = "expected expression after '=' in 'case'";
"nonliteral_enum_case_raw_value" = "raw value for enum case must be a literal";
"new_array_syntax" = "array types are now written with the brackets around the element type";
"expected_rbracket_array_type" = "expected ']' in array type";
"expected_element_type" = "expected element type";
"expected_dictionary_value_type" = "expected dictionary value type";
"expected_rbracket_dictionary_type" = "expected ']' in dictionary type";
"extra_rbracket" = "unexpected ']' in type; did you mean to write an array type?";
"extra_colon" = "unexpected ':' in type; did you mean to write a dictionary type?";
"subscript_array_element" = "unexpected subscript in array literal; did you mean to write two separate elements instead?";
"subscript_array_element_fix_it_add_comma" = "add a separator between the elements";
"subscript_array_element_fix_it_remove_space" = "remove the space between the elements to silence this warning";
"expected_rparen_tuple_type_list" = "expected ')' at end of tuple list";
"tuple_type_init" = "default argument not permitted in a tuple type";
"protocol_method_argument_init" = "default argument not permitted in a protocol method";
"protocol_init_argument_init" = "default argument not permitted in a protocol initializer";
"protocol_subscript_argument_init" = "default argument not permitted in a protocol subscript";
"tuple_type_multiple_labels" = "tuple element cannot have two labels";
"expected_rangle_protocol" = "expected '>' to complete protocol-constrained type";
"deprecated_protocol_composition" = "'protocol<...>' composition syntax has been removed; join the type constraints using '&'";
"deprecated_protocol_composition_single" = "'protocol<...>' composition syntax has been removed and is not needed here";
"deprecated_any_composition" = "'protocol<>' syntax has been removed; use 'Any' instead";
"expected_rbrace_pack_type_list" = "expected '}' at end of pack type list";
"sil_box_expected_var_or_let" = "expected 'var' or 'let' to introduce SIL box field type";
"sil_box_expected_r_brace" = "expected '}' to complete SIL box field type list";
"sil_box_expected_r_angle" = "expected '>' to complete SIL box generic argument list";
"sil_box_expected" = "%0 expects its operand to be of SIL box field type";
"sil_function_subst_expected_l_angle" = "expected '<' to begin SIL function type substitution list after 'for'";
"sil_function_subst_expected_r_angle" = "expected '>' to end SIL function type substitution list after 'for <...'";
"sil_function_subst_expected_generics" = "expected '<' to begin substituted parameter list after '@substituted'";
"sil_function_subst_expected_function" = "expected function type after '@substituted'";
"sil_function_subst_expected_subs" = "expected 'for' to begin substitutions after '@substituted' function type";
"sil_function_subs_without_generics" = "unexpected 'for' to begin substitutions after non-generic function type";
"opaque_mid_composition" = "'%0' should appear at the beginning of a composition";
"layout_size_should_be_positive" = "expected non-negative size to be specified in layout constraint";
"layout_alignment_should_be_positive" = "expected non-negative alignment to be specified in layout constraint";
"expected_rparen_layout_constraint" = "expected ')' to complete layout constraint";
"layout_constraints_only_inside_specialize_attr" = "layout constraints are only allowed inside '_specialize' attributes";
"expected_pattern" = "expected pattern";
"keyword_cant_be_identifier" = "keyword '%0' cannot be used as an identifier here";
"repeated_identifier" = "found an unexpected second identifier in %0 declaration; is there an accidental break?";
"join_identifiers" = "join the identifiers together";
"join_identifiers_camel_case" = "join the identifiers together with camel-case";
"backticks_to_escape" = "if this name is unavoidable, use backticks to escape it";
"expected_rparen_tuple_pattern_list" = "expected ')' at end of tuple pattern";
"untyped_pattern_ellipsis" = "'...' cannot be applied to a subpattern which is not explicitly typed";
"no_default_arg_closure" = "default arguments are not allowed in closures";
"no_default_arg_curried" = "default arguments are not allowed in curried parameter lists";
"var_pattern_in_var" = "'%select{let||var}0' cannot appear nested inside another 'var' or 'let' pattern";
"var_pattern_in_var_inout" = "'%select{let|inout|var}0' cannot appear nested inside another 'var', 'let', or 'inout' pattern";
"extra_var_in_multiple_pattern_list" = "%0 must be bound in every pattern";
"let_pattern_in_immutable_context" = "'let' pattern cannot appear nested in an already immutable context";
"borrowing_syntax_change" = "'borrowing' in pattern matches is deprecated; use 'let'";
"borrowing_subpattern_unsupported" = "'borrowing' pattern modifier must be directly applied to pattern variable name";
"specifier_must_have_type" = "%0 arguments must have a type specified";
"expected_rparen_parameter" = "expected ')' in parameter";
"expected_parameter_type" = "expected parameter type following ':'";
"expected_parameter_name" = "expected parameter name followed by ':'";
"expected_parameter_colon" = "expected ':' following argument label and parameter name";
"expected_assignment_instead_of_comparison_operator" = "expected '=' instead of '==' to assign default value for parameter";
"parameter_specifier_as_attr_disallowed" = "'%0' before a parameter name is not allowed, place it before the parameter type instead";
"parameter_specifier_repeated" = "parameter may have at most one of the 'inout', 'borrowing', or 'consuming' specifiers";
"parameter_let_var_as_attr" = "'%0' in this position is interpreted as an argument label";
"parameter_extraneous_double_up" = "extraneous duplicate parameter name; %0 already has an argument label";
"parameter_operator_keyword_argument" = "%select{operator|closure|enum case}0 cannot have keyword arguments";
"parameter_unnamed" = "unnamed parameters must be written with the empty name '_'";
"parameter_curry_syntax_removed" = "cannot have more than one parameter list";
"initializer_as_typed_pattern" = "unexpected initializer in pattern; did you mean to use '='?";
"enum_element_empty_arglist" = "enum element with associated values must have at least one associated value";
"enum_element_empty_arglist_swift4" = "enum element with associated values must have at least one associated value; this will be an error in the future version of Swift";
"enum_element_empty_arglist_delete" = "did you mean to remove the empty associated value list?";
"enum_element_empty_arglist_add_void" = "did you mean to explicitly add a 'Void' associated value?";
"expected_stmt" = "expected statement";
"illegal_top_level_stmt" = "statements are not allowed at the top level";
"illegal_top_level_expr" = "expressions are not allowed at the top level";
"illegal_semi_stmt" = "';' statements are not allowed";
"statement_begins_with_closure" = "top-level statement cannot begin with a closure expression";
"statement_same_line_without_semi" = "consecutive statements on a line must be separated by ';'";
"statement_same_line_without_newline" = "consecutive statements on a line must be separated by a newline";
"invalid_label_on_stmt" = "labels are only valid on loops, if, and switch statements";
"labeled_block_needs_do" = "labeled block needs 'do'";
"expected_expr_assignment" = "expected expression in assignment";
"expected_rbrace_in_brace_stmt" = "expected '}' at end of brace statement";
"typealias_inside_protocol_without_type" = "type alias is missing an assigned type; use 'associatedtype' to define an associated type requirement";
"associatedtype_outside_protocol" = "associated types can only be defined in a protocol; define a type or introduce a 'typealias' to satisfy an associated type requirement";
"expected_expr_return" = "expected expression in 'return' statement";
"unindented_code_after_return" = "expression following 'return' is treated as an argument of the 'return'";
"indent_expression_to_silence" = "indent the expression to silence this warning";
"expected_expr_throw" = "expected expression in 'throw' statement";
"expected_expr_discard" = "expected expression in 'discard' statement";
"expected_await_not_async" = "found 'async' in expression; did you mean 'await'?";
"expected_expr_yield" = "expected expression in 'yield' statement";
"unexpected_label_yield" = "unexpected label in 'yield' statement";
"expected_lbrace_after_defer" = "expected '{' after 'defer'";
"expected_comma_stmtcondition" = "expected ',' joining parts of a multi-clause condition";
"expected_expr_conditional" = "expected expression in conditional";
"expected_binding_keyword" = "expected '%0' in conditional";
"expected_expr_conditional_var" = "expected expression after '=' in conditional binding";
"conditional_var_initializer_required" = "variable binding in a condition requires an initializer";
"wrong_condition_case_location" = "pattern matching binding is spelled with 'case %0', not '%0 case'";
"conditional_var_valid_identifiers_only" = "unwrap condition requires a valid identifier";
"expected_condition_if" = "expected expression, var, or let in 'if' condition";
"missing_condition_after_if" = "missing condition in 'if' statement";
"expected_lbrace_after_if" = "expected '{' after 'if' condition";
"expected_lbrace_or_if_after_else" = "expected '{' or 'if' after 'else'";
"expected_lbrace_or_if_after_else_fixit" = "expected '{' or 'if' after 'else'; did you mean to write 'if'?";
"unexpected_else_after_if" = "unexpected 'else' immediately following 'if' condition";
"suggest_removing_else" = "remove 'else' to execute the braced block of statements when the condition is true";
"expected_condition_guard" = "expected expression, var, let or case in 'guard' condition";
"missing_condition_after_guard" = "missing condition in 'guard' statement";
"expected_else_after_guard" = "expected 'else' after 'guard' condition";
"expected_lbrace_after_guard" = "expected '{' after 'guard' else";
"expected_condition_while" = "expected expression, var, or let in 'while' condition";
"missing_condition_after_while" = "missing condition in 'while' statement";
"expected_lbrace_after_while" = "expected '{' after 'while' condition";
"expected_lbrace_after_repeat" = "expected '{' after 'repeat'";
"expected_while_after_repeat_body" = "expected 'while' after body of 'repeat' statement";
"expected_expr_repeat_while" = "expected expression in 'repeat-while' condition";
"do_while_now_repeat_while" = "'do-while' statement is not allowed";
"do_while_expected_repeat_while" = "did you mean 'repeat-while' statement?";
"do_while_expected_separate_stmt" = "did you mean separate 'do' and 'while' statements?";
"expected_lbrace_after_do" = "expected '{' after 'do'";
"expected_lbrace_after_catch" = "expected '{' after 'catch' pattern";
"expected_catch_where_expr" = "expected expression for 'where' guard of 'catch'";
"docatch_not_trycatch" = "the 'do' keyword is used to specify a 'catch' region";
"do_throws_without_catch" = "a 'do' statement with a 'throws' clause must have at least one 'catch'";
"c_style_for_stmt_removed" = "C-style for statement has been removed in Swift 3";
"expected_foreach_in" = "expected 'in' after for-each pattern";
"expected_foreach_container" = "expected Sequence expression for for-each loop";
"expected_foreach_lbrace" = "expected '{' to start the body of for-each loop";
"expected_foreach_where_expr" = "expected expression in 'where' guard of 'for/in'";
"expected_switch_expr" = "expected expression in 'switch' statement";
"expected_lbrace_after_switch" = "expected '{' after 'switch' subject expression";
"expected_rbrace_switch" = "expected '}' at end of 'switch' statement";
"case_outside_of_switch" = "'%0' label can only appear inside a 'switch' statement";
"stmt_in_switch_not_covered_by_case" = "all statements inside a switch must be covered by a 'case' or 'default'";
"case_after_default" = "additional 'case' blocks cannot appear after the 'default' block of a 'switch'";
"expected_case_where_expr" = "expected expression for 'where' guard of 'case'";
"expected_case_colon" = "expected ':' after '%0'";
"default_with_where" = "'default' cannot be used with a 'where' guard expression";
"case_stmt_without_body" = "%select{'case'|'default'}0 label in a 'switch' must have at least one executable statement";
"try_on_stmt" = "'try' cannot be used with '%0'";
"try_must_come_after_stmt" = "'try' must be placed on the %select{returned|thrown|yielded|produced}0 expression";
"try_on_var_let" = "'try' must be placed on the initial value expression";
"expected_expr" = "expected expression";
"expected_separator" = "expected '%0' separator";
"unexpected_separator" = "unexpected '%0' separator";
"expected_expr_after_operator" = "expected expression after operator";
"expected_expr_after_unary_operator" = "expected expression after unary operator";
"expected_prefix_operator" = "unary operator cannot be separated from its operand";
"expected_operator_ref" = "expected operator name in operator reference";
"invalid_postfix_operator" = "operator with postfix spacing cannot start a subexpression";
"expected_member_name" = "expected member name following '.'";
"dollar_numeric_too_large" = "numeric value following '$' is too large";
"numeric_literal_numeric_member" = "expected named member of numeric literal";
"standalone_dollar_identifier" = "'$' is not an identifier; use backticks to escape it";
"dollar_identifier_decl" = "cannot declare entity named %0; the '$' prefix is reserved for implicitly-synthesized declarations";
"anon_closure_arg_not_in_closure" = "anonymous closure argument not contained in a closure";
"anon_closure_arg_in_closure_with_args" = "anonymous closure arguments cannot be used inside a closure that has explicit arguments";
"anon_closure_arg_in_closure_with_args_typo" = "anonymous closure arguments cannot be used inside a closure that has explicit arguments; did you mean '%0'?";
"anon_closure_tuple_param_destructuring" = "closure tuple parameter does not support destructuring";
"expected_closure_parameter_name" = "expected the name of a closure parameter";
"nonisolated_closure_parameter_parentheses" = "the parameter list of a 'nonisolated' closure requires parentheses";
"expected_capture_specifier" = "expected 'weak', 'unowned', or no specifier in capture list";
"expected_capture_specifier_name" = "expected name of in closure capture list";
"expected_init_capture_specifier" = "expected initializer for closure capture specifier";
"expected_capture_list_end_rsquare" = "expected ']' at end of capture list";
"cannot_capture_fields" = "fields may only be captured by assigning to a specific name";
"expected_closure_result_type" = "expected closure result type after '->'";
"expected_closure_in" = "expected 'in' after the closure signature";
"unexpected_tokens_before_closure_in" = "unexpected tokens prior to 'in'";
"expected_closure_rbrace" = "expected '}' at end of closure";
"trailing_closure_after_newlines" = "braces here form a trailing closure separated from its callee by multiple newlines";
"trailing_closure_callee_here" = "callee is here";
"string_literal_no_atsign" = "string literals in Swift are not preceded by an '@' sign";
"invalid_float_literal_missing_leading_zero" = "'.%0' is not a valid floating point literal; it must be written '0.%0'";
"special_condition_outside_if_stmt_guard" = "%0 may only be used as condition of an 'if', 'guard' or 'while' statement";
"empty_arg_label_underscore" = "an empty argument label is spelled with '_'";
"expected_identifier_after_dot_expr" = "expected identifier after '.' expression";
"expected_identifier_after_super_dot_expr" = "expected identifier or 'init' after super '.' expression";
"expected_dot_or_subscript_after_super" = "expected '.' or '[' after 'super'";
"super_in_closure_with_capture" = "using 'super' in a closure where 'self' is explicitly captured is not yet supported";
"super_in_closure_with_capture_here" = "'self' explicitly captured here";
"await_before_try" = "'try' must precede 'await'";
"expected_expr_in_expr_list" = "expected expression in list of expressions";
"expected_expr_in_collection_literal" = "expected expression in container literal";
"expected_key_in_dictionary_literal" = "expected key expression in dictionary literal";
"expected_value_in_dictionary_literal" = "expected value in dictionary literal";
"expected_colon_in_dictionary_literal" = "expected ':' in dictionary literal";
"expected_rparen_expr_list" = "expected ')' in expression list";
"expected_rsquare_expr_list" = "expected ']' in expression list";
"expected_label_before_colon" = "expected argument label before colon";
"expected_rsquare_array_expr" = "expected ']' in container literal expression";
"expected_arg_list_in_object_literal" = "expected argument list in object literal";
"unknown_pound_expr" = "use of unknown directive '#%0'";
"expected_expr_after_ternary_question" = "expected expression after '?' in ternary expression";
"expected_colon_after_ternary_question" = "expected ':' after '? ...' in ternary expression";
"expected_expr_after_ternary_colon" = "expected expression after '? ... :' in ternary expression";
"expected_expr_after_try" = "expected expression after 'try'";
"expected_expr_after_await" = "expected expression after 'await'";
"expected_expr_after_move" = "expected expression after 'consume'";
"expected_expr_after_copy" = "expected expression after 'copy'";
"expected_expr_after_borrow" = "expected expression after '_borrow'";
"expected_expr_after_each" = "expected expression after 'each'";
"expected_expr_after_repeat" = "expected expression after 'repeat'";
"expected_expr_after_then" = "expected expression after 'then'";
"unindented_code_after_then" = "expression following 'then' is treated as an argument of the 'then'";
"move_consume_final_spelling" = "'_move' has been renamed to 'consume', and the '_move' spelling will be removed shortly";
"expected_type_after_is" = "expected type after 'is'";
"expected_type_after_as" = "expected type after 'as'";
"string_interpolation_extra" = "extra tokens after interpolated string expression";
"string_interpolation_unclosed" = "cannot find ')' to match opening '(' in string interpolation";
"string_interpolation_list_changing" = "interpolating multiple values will not form a tuple in Swift 5";
"string_interpolation_list_insert_parens" = "insert parentheses to keep current behavior";
"string_interpolation_label_changing" = "labeled interpolations will not be ignored in Swift 5";
"string_interpolation_remove_label" = "remove %0 label to keep current behavior";
"expr_keypath_expected_lparen" = "expected '(' following '#keyPath'";
"expr_keypath_expected_property_or_type" = "expected property or type name within '#keyPath(...)'";
"expr_keypath_expected_rparen" = "expected ')' to complete '#keyPath' expression";
"expr_keypath_expected_expr" = "expected expression path in Swift key path";
"expr_selector_expected_lparen" = "expected '(' following '#selector'";
"expr_selector_expected_method_expr" = "expected expression naming a method within '#selector(...)'";
"expr_selector_expected_property_expr" = "expected expression naming a property within '#selector(...)'";
"expr_selector_expected_rparen" = "expected ')' to complete '#selector' expression";
"pound_assert_disabled" = "#assert is an experimental feature that is currently disabled";
"pound_assert_expected_lparen" = "expected '(' in #assert directive";
"pound_assert_expected_rparen" = "expected ')' in #assert directive";
"pound_assert_expected_expression" = "expected a condition expression";
"pound_assert_expected_string_literal" = "expected a string literal";
"expr_postfix_ifconfig_unexpectedtoken" = "unexpected tokens in '#if' expression body";
"replace_equal_with_colon_for_value" = "'=' has been replaced with ':' in attribute arguments";
"expected_attribute_name" = "expected an attribute name";
"unexpected_lparen_in_attribute" = "unexpected '(' in attribute '%0'";
"duplicate_attribute" = "duplicate %select{attribute|modifier}0";
"previous_attribute" = "%select{attribute|modifier}0 already specified here";
"multiple_access_level_modifiers" = "multiple incompatible access-level modifiers specified";
"previous_access_level_modifier" = "previous modifier specified here";
"mutually_exclusive_attrs" = "'%0' contradicts previous %select{attribute|modifier}2 '%1'";
"invalid_infix_on_func" = "'infix' modifier is not required or allowed on func declarations";
"error_in_effects_attribute" = "error in effects attribute: %0";
"warning_in_effects_attribute" = "effects attribute ignored: %0";
"expected_in_attribute_list" = "expected ']' or ',' in attribute list";
"expected_depends_on" = "expected 'depends_on'";
"type_attribute_applied_to_decl" = "attribute can only be applied to types, not declarations";
"decl_attribute_applied_to_type" = "attribute can only be applied to declarations, not types";
"attr_extra_whitespace_after_at" = "extraneous whitespace between '@' and attribute name";
"attr_extra_whitespace_before_lparen" = "extraneous whitespace between attribute name and '('";
"attr_expected_lparen" = "expected '(' in '%0' %select{attribute|modifier}1";
"attr_expected_rparen" = "expected ')' in '%0' %select{attribute|modifier}1";
"attr_expected_semi" = "expected ';' in '%0' %select{attribute|modifier}1";
"attr_expected_comma" = "expected ',' in '%0' %select{attribute|modifier}1";
"attr_expected_string_literal" = "expected string literal in '%0' attribute";
"attr_expected_integer_literal" = "expected integer literal in '%0' attribute";
"attr_expected_option_such_as" = "expected '%0' option such as '%1'";
"attr_expected_option_identifier" = "expected '%0' option to be an identifier";
"attr_unknown_option" = "unknown option '%0' for attribute '%1'";
"attr_missing_label" = "missing label '%0:' in '@%1' attribute";
"attr_expected_label" = "expected label '%0:' in '@%1' attribute";
"attr_expected_colon_after_label" = "expected ':' after label '%0'";
"alignment_must_be_positive_integer" = "alignment value must be a positive integer literal";
"attr_access_expected_set" = "expected 'set' as subject of '%0' modifier";
"attr_access_expected_spi_name" = "expected an SPI identifier as subject of the '@_spi' attribute";
"attr_renamed" = "'@%0' has been renamed to '@%1'";
"attr_renamed_warning" = "'@%0' has been renamed to '@%1'";
"attr_renamed_to_modifier_warning" = "'@%0' has been renamed to '%1'";
"attr_name_close_match" = "no attribute named '@%0'; did you mean '@%1'?";
"attr_unsupported_on_target" = "attribute '%0' is unsupported on target '%1'";
"attr_availability_platform" = "expected platform name or '*' for '%0' attribute";
"attr_availability_multiple_kinds" = "'%0' attribute cannot be both '%1' and '%2'";
"attr_availability_invalid_duplicate" = "'%0' argument has already been specified";
"attr_availability_unknown_platform" = "unknown platform '%0' for attribute '%1'";
"attr_availability_suggest_platform" = "unknown platform '%0' for attribute '%1'; did you mean '%2'?";
"attr_availability_expected_platform" = "expected platform in '%0' attribute";
"attr_availability_invalid_renamed" = "'renamed' argument of '%0' attribute must be an operator, identifier, or full function name, optionally prefixed by a type name";
"attr_availability_expected_option" = "expected '%0' option such as 'unavailable', 'introduced', 'deprecated', 'obsoleted', 'message', or 'renamed'";
"attr_availability_expected_equal" = "expected ':' after '%1' in '%0' attribute";
"attr_availability_expected_version" = "expected version number in '%0' attribute";
"attr_availability_platform_agnostic_expected_option" = "expected 'introduced', 'deprecated', or 'obsoleted' in '%0' attribute for platform '%1'";
"attr_availability_platform_agnostic_expected_deprecated_version" = "expected version number with 'deprecated' in '%0' attribute for platform '%1'";
"attr_availability_platform_agnostic_infeasible_option" = "'%0' cannot be used in '%1' attribute for platform '%2'";
"attr_availability_nonspecific_platform_unexpected_version" = "unexpected version number in '%0' attribute for non-specific platform '*'";
"attr_availability_wildcard_ignored" = "* as platform name has no effect in '%0' attribute";
"attr_availability_need_platform_version" = "expected at least one platform version in '%0' attribute";
"attr_availability_platform_version_major_minor_only" = "'%0' only uses major and minor version number";
"attr_availability_wildcard_in_macro" = "future platforms identified by '*' cannot be used in an availability macro definition";
"attr_availability_missing_macro_name" = "expected an identifier to begin an availability macro definition";
"attr_availability_expected_colon_macro" = "expected ':' after '%0' in availability macro definition";
"attr_availability_unknown_version" = "reference to undefined version '%0' for availability macro '%1'";
"attr_availability_duplicate" = "duplicate definition of availability macro '%0' for version '%1'";
"originally_defined_in_missing_rparen" = "expected ')' in @_originallyDefinedIn argument list";
"originally_defined_in_need_original_module_name" = "expected 'module: \"original\"' in the first argument to @_originallyDefinedIn";
"originally_defined_in_need_nonempty_module_name" = "original module name cannot be empty in @_originallyDefinedIn";
"attr_back_deploy_expected_before_label" = "expected 'before:' in '@backDeployed' attribute";
"attr_back_deploy_expected_colon_after_before" = "expected ':' after 'before' in '@backDeployed' attribute";
"attr_back_deploy_missing_rparen" = "expected ')' in '@backDeployed' argument list";
"convention_attribute_expected_lparen" = "expected '(' after 'convention' attribute";
"convention_attribute_expected_name" = "expected convention name identifier in 'convention' attribute";
"convention_attribute_expected_rparen" = "expected ')' after convention name for 'convention' attribute";
"convention_attribute_ctype_expected_label" = "expected 'cType' label in 'convention' attribute";
"convention_attribute_ctype_expected_colon" = "expected ':' after 'cType' for 'convention' attribute";
"convention_attribute_ctype_expected_string" = "expected string literal containing clang type for 'cType' in 'convention' attribute";
"convention_attribute_witness_method_expected_colon" = "expected ':' after 'witness_method' for 'convention' attribute";
"convention_attribute_witness_method_expected_protocol" = "expected protocol name in 'witness_method' 'convention' attribute";
"attr_objc_missing_colon" = "missing ':' after selector piece in @objc attribute";
"attr_objc_expected_rparen" = "expected ')' after name for @objc";
"attr_objc_empty_name" = "expected name within parentheses of @objc attribute";
"attr_dynamic_replacement_expected_rparen" = "expected ')' after function name for @_dynamicReplacement";
"attr_dynamic_replacement_expected_function" = "expected a function name in @_dynamicReplacement(for:)";
"attr_dynamic_replacement_expected_for" = "expected 'for' in '_dynamicReplacement' attribute";
"attr_dynamic_replacement_expected_colon" = "expected ':' after @_dynamicReplacement(for";
"attr_type_eraser_expected_type_name" = "expected a type name in @_typeEraser()";
"attr_type_eraser_expected_rparen" = "expected ')' after type name for @_typeEraser";
"expected_thrown_error_type" = "expected thrown error type after 'throws('";
"expected_rparen_after_thrown_error_type" = "expected ')' after thrown error type";
"rethrows_with_thrown_error" = "'rethrows' cannot be combined with a specific thrown error type";
"attr_isolated_expected_lparen" = "expected '(' after '@isolated'; did you mean the 'isolated' modifier?";
"attr_isolated_expected_rparen" = "expected ')' after isolation kind";
"attr_isolated_expected_kind" = "expected 'any' as the isolation kind";
"attr_private_import_expected_rparen" = "expected ')' after function name for @_private";
"attr_private_import_expected_sourcefile" = "expected 'sourceFile' in '_private' attribute";
"attr_private_import_expected_sourcefile_name" = "expected a source file name in @_private(sourceFile:)";
"attr_private_import_expected_colon" = "expected ':' after @_private(sourceFile";
"opened_attribute_expected_lparen" = "expected '(' after 'opened' attribute";
"opened_attribute_id_value" = "known id for 'opened' attribute must be a UUID string";
"opened_attribute_expected_rparen" = "expected ')' after id value for 'opened' attribute";
"pack_element_attribute_expected_lparen" = "expected '(' after 'pack_element' attribute";
"pack_element_attribute_expected_rparen" = "expected ')' after id value for 'pack_element' attribute";
"multiple_open_pack_element" = "multiple 'open_pack_element' instructions with same UUID";
"opened_shape_class_not_pack_param" = "shape class type must be a pack type parameter";
"attr_unowned_invalid_specifier" = "expected 'safe' or 'unsafe'";
"attr_unowned_expected_rparen" = "expected ')' after specifier for 'unowned'";
"attr_warn_unused_result_removed" = "'warn_unused_result' attribute behavior is now the default";
"attr_warn_unused_result_expected_rparen" = "expected ')' after 'warn_unused_result' attribute";
"attr_specialize_missing_colon" = "missing ':' after %0 in '_specialize' attribute";
"attr_specialize_missing_comma" = "missing ',' in '_specialize' attribute";
"attr_specialize_unknown_parameter_name" = "unknown parameter %0 in '_specialize attribute'";
"attr_specialize_expected_bool_value" = "expected a boolean true or false value in '_specialize' attribute";
"attr_specialize_missing_parameter_label_or_where_clause" = "expected a parameter label or a where clause in '_specialize' attribute";
"attr_specialize_parameter_already_defined" = "parameter '%0' was already defined in '_specialize' attribute";
"attr_specialize_expected_partial_or_full" = "expected 'partial' or 'full' as values of the 'kind' parameter in '_specialize' attribute";
"attr_specialize_expected_function" = "expected a function name as the value of the 'target' parameter in '_specialize' attribute";
"attr_specialize_expected_spi_name" = "expected an SPI identifier as the value of the 'spi' parameter in '_specialize' attribute";
"attr_implements_expected_member_name" = "expected a member name as second parameter in '_implements' attribute";
"attr_differentiable_expected_reverse" = "'@differentiable' has been renamed to '@differentiable(reverse)' and will be removed in the next release";
"attr_differentiable_kind_not_supported" = "unsupported differentiability kind '%0'; only 'reverse' is supported";
"attr_differentiable_unknown_kind" = "unknown differentiability kind '%0'; only 'reverse' is supported";
"attr_differentiable_expected_parameter_list" = "expected a list of parameters to differentiate with respect to";
"attr_differentiable_use_wrt_not_withrespectto" = "use 'wrt:' to specify parameters to differentiate with respect to";
"attr_differentiable_expected_label" = "expected 'wrt:' or 'where' in '@differentiable' attribute";
"expected_colon_after_label" = "expected a colon ':' after '%0'";
"diff_params_clause_expected_parameter" = "expected a parameter, which can be a function parameter name, parameter index, or 'self'";
"diff_params_clause_expected_parameter_unnamed" = "expected a parameter, which can be a function parameter index or 'self'";
"autodiff_attr_expected_original_decl_name" = "expected an original function name";
"sil_autodiff_expected_lsquare" = "expected '[' to start the %0";
"sil_autodiff_expected_rsquare" = "expected ']' to complete the %0";
"sil_autodiff_expected_index_list" = "expected a space-separated list of indices, e.g. '0 1'";
"sil_autodiff_expected_index_list_label" = "expected label '%0' in index list";
"sil_autodiff_expected_parameter_index" = "expected the index of a parameter to differentiate with respect to";
"sil_autodiff_expected_result_index" = "expected the index of a result to differentiate from";
"sil_inst_autodiff_operand_list_expected_lbrace" = "expected '{' to start a derivative function list";
"sil_inst_autodiff_operand_list_expected_comma" = "expected ',' between operands in a derivative function list";
"sil_inst_autodiff_operand_list_expected_rbrace" = "expected '}' to start a derivative function list";
"sil_inst_autodiff_expected_differentiable_extractee_kind" = "expected an extractee kind attribute, which can be one of '[original]', '[jvp]', and '[vjp]'";
"sil_inst_autodiff_expected_linear_extractee_kind" = "expected an extractee kind attribute, which can be one of '[original]' and '[transpose]'";
"sil_inst_autodiff_expected_function_type_operand" = "expected an operand of a function type";
"sil_inst_autodiff_expected_differentiability_witness_kind" = "expected a differentiability witness kind, which can be one of '[jvp]', '[vjp]', or '[transpose]'";
"sil_inst_autodiff_invalid_witness_generic_signature" = "expected witness_generic signature '%0' does not have same generic parameters as original function generic signature '%1'";
"warn_attr_unsafe_removed" = "'%0' attribute has been removed in favor of @preconcurrency";
"documentation_attr_expected_argument" = "@_documentation attribute expected 'visibility' or 'metadata' argument";
"documentation_attr_unknown_argument" = "unknown argument '%0', expected 'visibility' or 'metadata'";
"documentation_attr_expected_access_level" = "@_documentation attribute's 'visibility' argument expected an access level";
"documentation_attr_unknown_access_level" = "unknown visibility '%0', expected an access level keyword";
"documentation_attr_duplicate_visibility" = "cannot give more than one visibility to the same item";
"documentation_attr_metadata_expected_text" = "@_documentation attribute's 'metadata' argument expected an identifier or quoted string";
"documentation_attr_duplicate_metadata" = "cannot give more than one metadata argument to the same item";
"attr_rawlayout_expected_label" = "expected %0 argument to @_rawLayout attribute";
"attr_rawlayout_expected_integer_size" = "expected integer literal size in @_rawLayout attribute";
"attr_rawlayout_expected_integer_alignment" = "expected integer literal alignment in @_rawLayout attribute";
"attr_rawlayout_expected_integer_count" = "expected integer literal count in @_rawLayout attribute";
"attr_rawlayout_expected_params" = "expected %1 argument after %0 argument in @_rawLayout attribute";
"attr_extern_expected_label" = "expected %0 argument to @_extern attribute";
"attr_expected_feature_name" = "expected feature name in @%0 attribute";
"expected_rangle_generics_param" = "expected '>' to complete generic parameter list";
"expected_generics_parameter_name" = "expected an identifier to name generic parameter";
"unexpected_class_constraint" = "'class' constraint can only appear on protocol declarations";
"suggest_anyobject" = "did you mean to write an 'AnyObject' constraint?";
"expected_generics_type_restriction" = "expected a class type or protocol-constrained type restricting %0";
"requires_single_equal" = "use '==' for same-type requirements rather than '='";
"requires_comma" = "expected ',' to separate the requirements of this 'where' clause";
"expected_requirement_delim" = "expected ':' or '==' to indicate a conformance or same-type requirement";
"redundant_class_requirement" = "redundant 'class' requirement";
"late_class_requirement" = "'class' must come first in the requirement list";
"where_inside_brackets" = "'where' clause next to generic parameters is obsolete, must be written following the declaration's type";
"expected_rangle_primary_associated_type_list" = "expected '>' to complete primary associated type list";
"expected_primary_associated_type_name" = "expected an identifier to name primary associated type";
"unsupported_conditional_compilation_binary_expression" = "expected '&&' or '||' expression";
"unsupported_conditional_compilation_unary_expression" = "expected unary '!' expression";
"unsupported_platform_condition_expression" = "unexpected platform condition (expected 'os', 'arch', or 'swift')";
"platform_condition_expected_argument" = "expected argument to platform condition";
"platform_condition_expected_one_argument" = "expected only one unlabeled argument to platform condition";
"unsupported_platform_runtime_condition_argument" = "unexpected argument for the '_runtime' condition; expected '_Native' or '_ObjC'";
"unsupported_platform_condition_argument" = "unexpected platform condition argument: expected %0";
"unsupported_conditional_compilation_expression_type" = "invalid conditional compilation expression";
"unsupported_conditional_compilation_integer" = "'%0' is not a valid conditional compilation expression, use '%1'";
"version_component_not_number" = "version component contains non-numeric characters";
"compiler_version_too_many_components" = "compiler version must not have more than five components";
"unused_compiler_version_component" = "the second version component is not used for comparison in legacy compiler versions%select{|; are you trying to encode a new Swift compiler version for compatibility with legacy compilers?}0";
"empty_version_component" = "found empty version component";
"compiler_version_component_out_of_range" = "compiler version component out of range: must be in [0, %0]";
"empty_version_string" = "version requirement is empty";
"unknown_platform_condition_argument" = "unknown %0 for build configuration '%1'";
"renamed_platform_condition_argument" = "'%0' has been renamed to '%1'";
"likely_simulator_platform_condition" = "platform condition appears to be testing for simulator environment; use 'targetEnvironment(simulator)' instead";
"canimport_two_parameters" = "canImport can take only two parameters";
"canimport_label" = "2nd parameter of canImport should be labeled as _version or _underlyingVersion";
"canimport_invalid_version" = "cannot parse module version '%0'";
"canimport_empty_version" = "%0 argument cannot be empty";
"canimport_version_too_many_components" = "trailing components of version '%0' are ignored";
"avail_query_expected_condition" = "expected availability condition";
"avail_query_expected_platform_name" = "expected platform name";
"avail_query_expected_version_number" = "expected version number";
"avail_query_expected_rparen" = "expected ')' in availability query";
"avail_query_unrecognized_platform_name" = "unrecognized platform name %0";
"avail_query_suggest_platform_name" = "unrecognized platform name %0; did you mean '%1'?";
"avail_query_disallowed_operator" = "'%0' cannot be used in an availability condition";
"avail_query_argument_and_shorthand_mix_not_allowed" = "'%0' can't be combined with shorthand specification '%1'";
"avail_query_meant_introduced" = "did you mean to specify an introduction version?";
"avail_query_version_comparison_not_needed" = "version comparison not needed";
"availability_query_wildcard_required" = "must handle potential future platforms with '*'";
"unavailability_query_wildcard_not_required" = "platform wildcard '*' is always implicit in #unavailable";
"availability_must_occur_alone" = "'%0' version-availability must be specified alone";
"pound_available_swift_not_allowed" = "Swift language version checks not allowed in %0(...)";
"pound_available_package_description_not_allowed" = "PackageDescription version checks not allowed in %0(...)";
"availability_query_repeated_platform" = "version for '%0' already specified";
"availability_cannot_be_mixed" = "#available and #unavailable cannot be in the same statement";
"false_available_is_called_unavailable" = "#available cannot be used as an expression, did you mean to use '#unavailable'?";
"has_symbol_expected_lparen" = "expected '(' in #_hasSymbol directive";
"has_symbol_expected_expr" = "expected expression in #_hasSymbol";
"has_symbol_expected_rparen" = "expected ')' in #_hasSymbol condition";
"attr_requires_concurrency" = "'%0' %select{attribute|modifier}1 is only valid when experimental concurrency is enabled";
"associatedtype_cannot_be_variadic" = "associated types cannot be variadic";
"type_parameter_pack_ellipsis" = "ellipsis operator cannot be used with a type parameter pack";
"unknown_syntax_entity" = "unknown %0 syntax exists in the source";
"expected_argument_label_followed_by_closure_literal" = "expected an argument label followed by a closure literal";
"expected_closure_literal" = "expected a closure literal";
"expected_multiple_closures_block_rbrace" = "expected '}' at the end of a trailing closures block";
"expected_lparen_macro" = "expected '(' for macro parameters or ':' for a value-like macro";
"expected_type_macro_result" = "expected macro result type";
"macro_decl_expected_macro_definition" = "expected macro definition following '=''";
"macro_expansion_expr_expected_macro_identifier" = "expected a macro identifier for a pound literal expression";
"macro_expansion_decl_expected_macro_identifier" = "expected a macro identifier for a pound literal declaration";
"extra_whitespace_macro_expansion_identifier" = "extraneous whitespace between '#' and macro name is not permitted";
"macro_role_attr_expected_kind" = "expected %select{a freestanding|an attached}0 macro role such as %select{'expression'|'accessor'}0";
"macro_role_attr_expected_attached_kind" = "expected an attached macro role such as 'peer'";
"macro_role_attr_expected_freestanding_kind" = "expected a freestanding macro role such as 'expression'";
"macro_role_syntax_mismatch" = "%select{a freestanding|an attached}0 macro cannot have the %1 role";
"macro_attribute_unknown_label" = "@%select{freestanding|attached}0 has no argument with label %1";
"macro_attribute_duplicate_label" = "@%select{freestanding|attached}0 already has an argument with label %1";
"macro_attribute_missing_label" = "@%select{freestanding|attached}0 argument is missing label '%1'";
"macro_attribute_unknown_name_kind" = "unknown introduced name kind %0";
"macro_attribute_unknown_argument_form" = "introduced name argument should be a name";
"macro_attribute_introduced_name_requires_argument" = "introduced name kind %0 requires a single argument '(name)'";
"macro_attribute_introduced_name_requires_no_argument" = "introduced name kind %0 must not have an argument";
"macro_expression_attribute_removed" = "@expression has been removed in favor of @freestanding(expression)";
"unexpected_attribute_expansion" = "unexpected token '%0' in expanded attribute list";
"unexpected_member_expansion" = "unexpected token '%0' in expanded member list";
"parser_round_trip_error" = "source file did not round-trip through the new Swift parser";
"parser_new_parser_errors" = "new Swift parser generated errors for code that C++ parser accepted";
"sil_markuncheckedreferencebinding_requires_attribute" = "mark_unchecked_reference_binding requires an attribute like [inout]";
"sil_markuncheckedreferencebinding_invalid_attribute" = "Attribute '[%0]' can not be applied to mark_unchecked_reference_binding";
"init_accessor_is_not_on_property" = "init accessors could only be associated with properties";
"missing_storage_restrictions_attr_label" = "missing label in @storageRestrictions attribute";
"invalid_storage_restrictions_attr_label" = "unexpected label %0 in @storageRestrictions attribute";
"duplicate_storage_restrictions_attr_label" = "duplicate label %0 in @storageRestrictions attribute";
"storage_restrictions_attr_expected_name" = "expected property name in @storageRestrictions list";
"requires_experimental_feature" = "'%0' %select{attribute|parameter specifier}1 is only valid when experimental feature %2 is enabled";
"expected_lparen_after_lifetime_dependence" = "expected '(' after lifetime dependence specifier";
"expected_identifier_or_index_or_self_after_lifetime_dependence" = "expected identifier, index or self in lifetime dependence specifier";
"expected_rparen_after_lifetime_dependence" = "expected ')' after parameter list in lifetime dependence specifier";
"expected_param_index_lifetime_dependence" = "expected unsigned parameter index in lifetime dependence specifier";
"lifetime_dependence_invalid_init_return" = "expected Self return type for initializers with lifetime dependence specifiers";
"sending_before_parameter_specifier" = "'sending' must be placed after specifier '%0'";
"sending_repeated" = "parameter may have at most one 'sending' specifier";
"sending_cannot_be_used_with_borrowing" = "'%0' cannot be used together with 'borrowing'";
"decl_declared_here" = "%0 declared here";
"decl_declared_here_base" = "%base0 declared here";
"name_declared_here" = "%0 declared here";
"kind_declared_here" = "%0 declared here";
"implicit_member_declared_here" = "%kindbase0 is implicitly declared";
"extended_type_declared_here" = "extended type declared here";
"opaque_return_type_declared_here" = "opaque return type declared here";
"default_value_declared_here" = "default value declared here";
"ambiguous_member_overload_set" = "ambiguous reference to member %0";
"no_overloads_match_exactly_in_call" = "no exact matches in %select{reference|call}0 to %kindonly1 %select{%base1|}2";
"candidate_partial_match" = "candidate has partially matching parameter list %0";
"could_not_find_value_subscript" = "value of type %0 has no subscripts";
"could_not_find_tuple_member" = "value of tuple type %0 has no member %1";
"could_not_find_value_member" = "value of type %0 has no member %1";
"could_not_find_value_member_corrected" = "value of type %0 has no member %1; did you mean %2?";
"could_not_find_value_dynamic_member_corrected" = "value of type %0 has no dynamic member %2 using key path from root type %1; did you mean %3?";
"could_not_find_value_dynamic_member" = "value of type %0 has no dynamic member %2 using key path from root type %1";
"cannot_infer_contextual_keypath_type_specify_root" = "cannot infer key path type from context; consider explicitly specifying a root type";
"cannot_infer_keypath_root_anykeypath_context" = "'AnyKeyPath' does not provide enough context for root type to be inferred; consider explicitly specifying a root type";
"could_not_find_type_member" = "type %0 has no member %1";
"could_not_find_type_member_corrected" = "type %0 has no member %1; did you mean %2?";
"could_not_find_subscript_member_did_you_mean" = "value of type %0 has no property or method named 'subscript'; did you mean to use the subscript operator?";
"could_not_find_subscript_member_tuple" = "cannot access element using subscript for tuple type %0; use '.' notation instead";
"could_not_find_subscript_member_tuple_did_you_mean_use_dot" = "cannot access element using subscript for tuple type %0; did you mean to use '.%1'?";
"could_not_find_enum_case" = "enum type %0 has no case %1; did you mean %2?";
"could_not_find_imported_enum_case" = "type %0 has no case %1, but it does have a case named %2; if %1 worked before, a recent change to the underlying C enum may have affected how prefixes are stripped from its case names";
"did_you_mean_raw_type" = "did you mean to specify a raw type on the enum declaration?";
"did_you_mean_generic_param_as_conformance" = "did you mean to declare %0 as a protocol conformance for %1?";
"any_as_anyobject_fixit" = "cast 'Any' to 'AnyObject' or use 'as!' to force downcast to a more specific type to access members";
"expected_argument_in_contextual_member" = "member %0 expects argument of type %1";
"expected_parens_in_contextual_member" = "member %0 is a function; did you mean to call it?";
"expected_parens_in_contextual_member_type" = "member %0 is a function that produces expected type %1; did you mean to call it?";
"expected_result_in_contextual_member" = "member %0 in %2 produces result of type %1, but context expects %2";
"unexpected_arguments_in_enum_case" = "enum case %base0 has no associated values";
"could_not_use_type_member_on_instance" = "static member %1 cannot be used on instance of type %0";
"could_not_use_enum_element_on_instance" = "enum case %0 cannot be used as an instance member";
"could_not_use_type_member_on_protocol_metatype" = "static member %1 cannot be used on protocol metatype %0";
"could_not_use_instance_member_on_type" = "instance member %1%select{| of type %2}3 cannot be used on%select{| instance of nested}3 type %0";
"could_not_use_member_on_existential" = "member %1 cannot be used on value of type %0; consider using a generic constraint instead";
"candidate_inaccessible" = "%base0 is inaccessible due to '%select{private|fileprivate|internal|package|@_spi|@_spi}1' protection level";
"init_candidate_inaccessible" = "%0 initializer is inaccessible due to '%select{private|fileprivate|internal|package|@_spi|@_spi}1' protection level";
"candidate_from_missing_import" = "%0 %1 is not available due to missing import of defining module %2";
"candidate_add_import" = "add import of module %0";
"cannot_pass_rvalue_mutating_subelement" = "cannot use mutating member on immutable value: %0";
"cannot_pass_rvalue_mutating" = "cannot use mutating member on immutable value of type %0";
"cannot_pass_rvalue_mutating_getter_subelement" = "cannot use mutating getter on immutable value: %0";
"cannot_pass_rvalue_mutating_getter" = "cannot use mutating getter on immutable value of type %0";
"expression_too_complex" = "the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions";
"value_type_comparison_with_nil_illegal_did_you_mean" = "value of type %0 cannot be compared by reference; did you mean to compare by value?";
"value_type_comparison_with_nil_illegal" = "type %0 is not optional, value can never be nil";
"cannot_match_expr_pattern_with_value" = "expression pattern of type %0 cannot match values of type %1";
"cannot_match_expr_tuple_pattern_with_nontuple_value" = "tuple pattern cannot match values of non-tuple type %0";
"cannot_match_unresolved_expr_pattern_with_value" = "pattern cannot match values of type %0";
"cannot_match_value_with_pattern" = "pattern of type %1 cannot match %0";
"cannot_reference_compare_types" = "cannot check reference equality of functions; operands here have types %1 and %2";
"cannot_apply_binop_to_args" = "binary operator '%0' cannot be applied to operands of type %1 and %2";
"cannot_apply_binop_to_same_args" = "binary operator '%0' cannot be applied to two %1 operands";
"cannot_apply_unop_to_arg" = "unary operator '%0' cannot be applied to an operand of type %1";
"cannot_apply_lvalue_unop_to_subelement" = "cannot pass immutable value to mutating operator: %0";
"cannot_apply_lvalue_unop_to_rvalue" = "cannot pass immutable value of type %0 to mutating operator";
"cannot_apply_lvalue_binop_to_subelement" = "left side of mutating operator isn't mutable: %0";
"cannot_apply_lvalue_binop_to_rvalue" = "left side of mutating operator has immutable type %0";
"cannot_subscript_base" = "cannot subscript a value of type %0";
"cannot_subscript_ambiguous_base" = "cannot subscript a value of incorrect or ambiguous type";
"cannot_subscript_nil_literal" = "cannot subscript a nil literal value";
"conditional_cast_from_nil" = "nil literal cannot be the source of a conditional cast";
"cannot_pass_rvalue_inout_subelement" = "cannot pass immutable value as inout argument: %0";
"cannot_pass_rvalue_inout_converted" = "inout argument could be set to a value with a type other than %0; use a value declared as type %1 instead";
"inout_change_var_type_if_possible" = "change variable type to %1 if it doesn't need to be declared as %0";
"cannot_pass_rvalue_inout" = "cannot pass immutable value of type %0 as inout argument";
"cannot_provide_default_value_inout" = "cannot provide default value to inout parameter %0";
"cannot_call_non_function_value" = "cannot call value of non-function type %0";
"no_candidates_match_result_type" = "no '%0' candidates produce the expected contextual result type %1";
"no_overloads_have_result_type_conformance" = "no '%0' overloads produce result type that conforms to %1";
"no_candidates_match_argument_type" = "no '%0' candidates produce the expected type %1 for parameter #%2";
"cannot_infer_closure_parameter_type" = "cannot infer type of closure parameter %0 without a type annotation";
"cannot_infer_closure_type" = "unable to infer closure type without a type annotation";
"cannot_infer_empty_closure_result_type" = "cannot infer return type of empty closure";
"cannot_infer_closure_result_type" = "cannot infer return type for closure with multiple statements; add explicit type to disambiguate";
"use_of_anon_closure_param" = "anonymous closure parameter %0 is used here";
"incorrect_explicit_closure_result_vs_contextual_type" = "declared closure result %0 is incompatible with contextual type %1";
"incorrect_explicit_closure_result_vs_return_type" = "declared closure result %0 is incompatible with return type %1";
"unsupported_closure_attr" = "%select{attribute |}0 '%1' is not supported on a closure";
"suggest_expected_match" = "%select{expected an argument list|produces result}0 of type '%1'";
"suggest_partial_overloads" = "overloads for '%1' exist with these %select{partially matching parameter lists|result types}0: %2";
"no_binary_op_overload_for_enum_with_payload" = "binary operator '%0' cannot be synthesized for enums with associated values";
"cannot_convert_initializer_value" = "cannot convert value of type %0 to specified type %1";
"cannot_convert_initializer_value_protocol" = "value of type %0 does not conform to specified type %1";
"cannot_convert_initializer_value_anyobject" = "value of type %0 expected to be instance of class or class-constrained type";
"cannot_convert_initializer_value_nil" = "'nil' cannot initialize specified type %0";
"cannot_convert_to_return_type" = "cannot convert return expression of type %0 to return type %1";
"cannot_convert_to_return_type_protocol" = "return expression of type %0 does not conform to %1";
"cannot_convert_return_type_to_anyobject" = "return expression of type %0 expected to be an instance of a class or class-constrained type";
"cannot_convert_to_return_type_nil" = "'nil' is incompatible with return type %0";
"cannot_convert_thrown_type" = "thrown expression type %0 %select{cannot be converted to error type %1|does not conform to 'Error'}2";
"cannot_throw_error_code" = "thrown error code type %0 does not conform to 'Error'; construct an %1 instance";
"bad_yield_count" = "expected %0 yield value(s)";
"cannot_throw_nil" = "cannot infer concrete Error for thrown 'nil' value";
"cannot_convert_raw_initializer_value" = "cannot convert value of type %0 to raw type %1";
"cannot_convert_raw_initializer_value_nil" = "cannot convert 'nil' to raw type %0";
"cannot_convert_default_arg_value" = "default argument value of type %0 cannot be converted to type %1";
"cannot_convert_default_arg_value_protocol" = "default argument value of type %0 does not conform to %1";
"cannot_convert_default_arg_value_nil" = "nil default argument value cannot be converted to type %0";
"cannot_convert_argument_value" = "cannot convert value of type %0 to expected argument type %1";
"cannot_convert_unresolved_key_path_argument_value" = "cannot convert value of key path type to expected argument type %0";
"cannot_convert_argument_value_for_swift_func" = "cannot convert value of type %0 to expected argument type %1 because %kind2 was not imported from C header";
"candidate_has_invalid_argument_at_position" = "candidate expects %select{|in-out }2value of type %0 for parameter #%1 (got %3)";
"candidate_has_invalid_closure_at_position" = "closure passed to parameter of type %0 that does not accept a closure";
"cannot_convert_array_to_variadic" = "cannot pass array of type %0 as variadic arguments of type %1";
"candidate_would_match_array_to_variadic" = "candidate would match if array elements were passed as variadic arguments of type %0";
"suggest_pass_elements_directly" = "remove brackets to pass array elements directly";
"cannot_convert_argument_value_generic" = "cannot convert value of type %0 (%1) to expected argument type %2 (%3)";
"conflicting_arguments_for_generic_parameter" = "conflicting arguments to generic parameter %0 (%1)";
"generic_parameter_inferred_from_closure" = "generic parameter %0 inferred as %1 from closure return expression";
"generic_parameter_inferred_from_result_context" = "generic parameter %0 inferred as %1 from context";
"cannot_convert_global_actor" = "cannot convert function actor-isolated to %0 to function actor-isolated to %1";
"cannot_convert_global_actor_coercion" = "cannot convert value actor-isolated to %0 to function actor-isolated to %1 in coercion";
"cannot_convert_argument_value_global_actor" = "cannot convert value actor-isolated to %0 to expected argument type actor-isolated to %1";
"cannot_convert_global_actor_contextual" = "cannot convert value actor-isolated to %0 to specified type actor-isolated to %1";
"cannot_convert_closure_result_global_actor" = "cannot convert value actor-isolated to %0 to expected closure result type actor-isolated to %1";
"cannot_convert_global_actor_mismatch_element" = "cannot convert value actor-isolated to %0 to expected element type actor-isolated to %1";
"cannot_convert_global_actor_mismatch_dict_value" = "cannot convert value actor-isolated to %0 to expected dictionary value type actor-isolated to %1";
"cannot_convert_global_actor_mismatch_tuple_element" = "cannot convert type actor-isolated to %0 to type actor-isolated to %1 at tuple element '#%2'";
"ternary_expr_cases_global_actor_mismatch" = "result values in '? :' expression are functions isolated to different actors (%0 vs. %1)";
"cannot_pass_type_to_non_ephemeral" = "cannot pass %0 to parameter; argument %1 must be a pointer that outlives the call%select{| to %2}2";
"cannot_use_inout_non_ephemeral" = "cannot use inout expression here; argument %0 must be a pointer that outlives the call%select{| to %1}1";
"cannot_construct_dangling_pointer" = "initialization of %0 results in a dangling %select{|buffer }1pointer";
"ephemeral_pointer_argument_conversion_note" = "implicit argument conversion from %0 to %1 produces a pointer valid only for the duration of the call%select{| to %2}2";
"ephemeral_use_with_unsafe_pointer" = "use 'withUnsafe%select{Bytes|MutableBytes|Pointer|MutablePointer}0' in order to explicitly convert argument to %select{buffer |buffer ||}0pointer valid for a defined scope";
"ephemeral_use_string_with_c_string" = "use the 'withCString' method on String in order to explicitly convert argument to pointer valid for a defined scope";
"ephemeral_use_array_with_unsafe_buffer" = "use the 'withUnsafe%select{Bytes|MutableBytes|BufferPointer|MutableBufferPointer}0' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope";
"candidate_performs_illegal_ephemeral_conv" = "candidate expects pointer that outlives the call for parameter #%0";
"cannot_convert_argument_value_protocol" = "argument type %0 does not conform to expected type %1";
"cannot_convert_argument_value_anyobject" = "argument type %0 expected to be an instance of a class or class-constrained type";
"cannot_convert_argument_value_nil" = "'nil' is not compatible with expected argument type %0";
"note_incompatible_argument_value_nil_at_pos" = "'nil' is not compatible with expected argument type %0 at position #%1";
"cannot_convert_condition_value" = "cannot convert value of type %0 to expected condition type %1";
"cannot_convert_condition_value_nil" = "'nil' is not compatible with expected condition type %0";
"cannot_yield_rvalue_by_reference_same_type" = "cannot yield immutable value of type %0 as an inout yield";
"cannot_yield_rvalue_by_reference" = "cannot yield immutable value of type %0 as an inout yield of type %1";
"cannot_yield_wrong_type_by_reference" = "cannot yield reference to storage of type %0 as an inout yield of type %1";
"cannot_convert_yield_value" = "cannot convert value of type %0 to expected yield type %1";
"cannot_convert_yield_value_protocol" = "yielded type %0 does not conform to expected type %1";
"cannot_convert_yield_value_nil" = "nil is not compatible with expected yield type %0";
"cannot_convert_discard_value" = "cannot convert value of type %0 to expected discard type %1";
"cannot_convert_closure_result" = "cannot convert value of type %0 to closure result type %1";
"cannot_convert_closure_result_protocol" = "result value of type %0 does not conform to closure result type %1";
"cannot_convert_closure_result_nil" = "'nil' is not compatible with closure result type %0";
"cannot_convert_parent_type" = "cannot convert parent type %0 to expected type %1";
"cannot_convert_chain_result_type" = "member chain produces result of type %0 but contextual base was inferred as %1";
"generic_argument_mismatch" = "arguments to generic parameter %0 (%1 and %2) are expected to be equal";
"destructor_not_accessible" = "deinitializers cannot be accessed";
"cannot_convert_array_element" = "cannot convert value of type %0 to expected element type %1";
"cannot_convert_array_element_protocol" = "value of type %0 does not conform to expected element type %1";
"cannot_convert_array_element_nil" = "'nil' is not compatible with expected element type %0";
"cannot_convert_dict_key" = "cannot convert value of type %0 to expected dictionary key type %1";
"cannot_convert_dict_key_protocol" = "value of type %0 does not conform to expected dictionary key type %1";
"cannot_convert_dict_key_nil" = "'nil' is not compatible with expected dictionary key type %0";
"cannot_convert_dict_value" = "cannot convert value of type %0 to expected dictionary value type %1";
"cannot_convert_dict_value_protocol" = "value of type %0 does not conform to expected dictionary value type %1";
"cannot_convert_dict_value_nil" = "'nil' is not compatible with expected dictionary value type %0";
"cannot_convert_coerce" = "cannot convert value of type %0 to type %1 in coercion";
"cannot_convert_coerce_protocol" = "value of type %0 does not conform to %1 in coercion";
"cannot_convert_coerce_nil" = "'nil' is not compatible with type %0 in coercion";
"cannot_convert_assign" = "cannot assign value of type %0 to type %1";
"assign_protocol_conformance_fix_it" = "add missing conformance to %0 to %1 %2";
"cannot_convert_assign_protocol" = "value of type %0 does not conform to %1 in assignment";
"cannot_convert_assign_anyobject" = "value of type %0 expected to be an instance of a class or class-constrained type in assignment";
"cannot_convert_assign_nil" = "'nil' cannot be assigned to type %0";
"cannot_convert_subscript_assign" = "cannot assign value of type %0 to subscript of type %1";
"cannot_convert_subscript_assign_protocol" = "value of type %0 does not conform to %1 in subscript assignment";
"cannot_convert_subscript_assign_nil" = "'nil' cannot be assigned to subscript of type %0";
"cannot_convert_candidate_result_to_contextual_type" = "%0 produces %1, not the expected contextual result type %2";
"overload_result_type_does_not_conform" = "result type %1 of %0 does not conform to %2";
"cannot_convert_sequence_element_value" = "cannot convert sequence element type %0 to expected type %1";
"cannot_convert_sequence_element_protocol" = "sequence element type %0 does not conform to expected protocol %1";
"throws_functiontype_mismatch" = "invalid conversion from throwing function of type %0 to non-throwing function type %1";
"thrown_error_type_mismatch" = "invalid conversion of thrown error type %0 to %1";
"async_functiontype_mismatch" = "invalid conversion from 'async' function of type %0 to synchronous function type %1";
"cannot_pass_async_func_to_sync_parameter" = "cannot pass function of type %0 to parameter expecting synchronous function type";
"async_inferred_from_operation" = "'async' inferred from asynchronous operation used here";
"expr_keypath_no_objc_runtime" = "'#keyPath' can only be used with the Objective-C runtime";
"expression_unused_keypath_result" = "result of key path is unused";
"expr_keypath_non_objc_property" = "argument of '#keyPath' refers to non-'@objc' property %0";
"expr_keypath_type_of_property" = "cannot refer to type member %0 within instance of type %1";
"expr_keypath_generic_type" = "key path cannot refer to generic type %0";
"expr_keypath_not_property" = "%select{key path|dynamic key path member lookup}1 cannot refer to %kind0";
"expr_keypath_mutating_getter" = "%select{key path|dynamic key path member lookup}1 cannot refer to %0, which has a mutating getter";
"expr_keypath_static_member" = "%select{key path|dynamic key path member lookup}1 cannot refer to static member %0";
"expr_keypath_enum_case" = "%select{key path|dynamic key path member lookup}1 cannot refer to enum case %0";
"expr_keypath_empty" = "empty key path does not refer to a property";
"expr_unsupported_objc_key_path_component" = "an Objective-C key path cannot contain %select{BAD|subscript|BAD|BAD|optional-forcing|optional-chaining|BAD} components";
"expr_unsupported_objc_key_path_compound_name" = "an Objective-C key path cannot reference a declaration with a compound name";
"expr_keypath_no_keypath_type" = "broken standard library: no 'KeyPath' type found";
"expr_swift_keypath_invalid_component" = "invalid component of Swift key path";
"expr_swift_keypath_not_starting_with_type" = "a Swift key path must begin with a type";
"expr_swift_keypath_not_starting_with_dot" = "a Swift key path with contextual root must begin with a leading dot";
"expr_keypath_value_covert_to_contextual_type" = "key path value type %0 cannot be converted to contextual type %1";
"expr_keypath_type_covert_to_contextual_type" = "cannot convert key path type %0 to contextual type %1";
"expr_swift_keypath_empty" = "key path must have at least one component";
"expr_string_interpolation_outside_string" = "string interpolation can only appear inside a string literal";
"expr_keypath_subscript_index_not_hashable" = "subscript index of type %0 in a key path must be Hashable";
"expr_smart_keypath_application_type_mismatch" = "key path of type %0 cannot be applied to a base of type %1";
"expr_keypath_root_type_mismatch" = "cannot convert key path root type %0 to contextual type %1";
"expr_keypath_type_mismatch" = "cannot convert key path of type %0 to contextual type %1";
"expr_keypath_application_root_type_mismatch" = "key path with root type %0 cannot be applied to a base of type %1";
"expr_swift_keypath_anyobject_root" = "the root type of a Swift key path cannot be 'AnyObject'";
"expr_keypath_multiparam_func_conversion" = "cannot convert key path into a multi-argument function type %0";
"cannot_convert_type_to_keypath_subscript_index" = "cannot use value of type %0 as a key path subscript index; argument must be a key path";
"expr_deprecated_writable_keypath" = "forming a writable keypath to property %0 that is read-only in this context is deprecated and will be removed in a future release";
"expr_selector_no_objc_runtime" = "'#selector' can only be used with the Objective-C runtime";
"expr_selector_module_missing" = "import the 'ObjectiveC' module to use '#selector'";
"expr_selector_no_declaration" = "argument of '#selector' does not refer to an '@objc' method, property, or initializer";
"expr_selector_not_method" = "argument of '#selector' cannot refer to %select{local|global}0 function %1";
"expr_selector_expected_property" = "cannot reference %kind1 as a property; remove '%select{getter|setter}0:'";
"expr_selector_not_property" = "argument of '#selector' cannot refer to %select{variable|parameter}0 %1";
"expr_selector_expected_method" = "use 'getter:'%select{| or 'setter:'}0 to refer to the Objective-C getter%select{| or setter}0 of property %1%select{|, respectively}0";
"expr_selector_add_modifier" = "add '%select{getter|setter}0:' to reference the Objective-C %select{getter|setter}0 for %1";
"expr_selector_property_not_settable" = "argument of '#selector(setter:)' refers to non-settable %kind0";
"expr_selector_property_setter_inaccessible" = "setter of %kind0 is inaccessible";
"expr_selector_cannot_be_used" = "cannot use %base0 as a selector because protocol %1 is not exposed to Objective-C";
"expr_selector_not_objc" = "argument of '#selector' refers to %kind0 that is not exposed to Objective-C";
"make_decl_objc" = "add '@objc' to expose this %0 to Objective-C";
"selector_literal_invalid" = "string literal is not a valid Objective-C selector";
"selector_literal_undeclared" = "no method declared with Objective-C selector %0";
"selector_literal_deprecated" = "use of string literal for Objective-C selectors is deprecated; use '#selector' or explicitly construct a 'Selector'";
"selector_literal_deprecated_suggest" = "use of string literal for Objective-C selectors is deprecated; use '#selector' instead";
"selector_construction_suggest" = "use '#selector' instead of explicitly constructing a 'Selector'";
"selector_construction_suppress_warning" = "wrap the selector name in parentheses to suppress this warning";
"cannot_return_value_from_void_func" = "unexpected non-void return value in void function";
"add_return_type_note" = "did you mean to add a return type?";
"expect_compile_time_const" = "expect a compile-time constant literal";
"sema_no_import" = "no such module '%0'";
"did_you_mean_cxxstdlib" = "did you mean 'CxxStdlib'?'";
"sema_no_import_target" = "could not find module '%0' for target '%1'; found: %2, at: %3";
"sema_no_import_repl" = "no such module '%0'";
"sema_no_import_no_sdk" = "did you forget to set an SDK using -sdk or SDKROOT?";
"sema_no_import_no_sdk_xcrun" = "use \"xcrun swiftc\" to select the default macOS SDK installed with Xcode";
"sema_import_current_module" = "this file is part of module %0; ignoring import";
"sema_import_current_module_with_file" = "file '%0' is part of module %1; ignoring import";
"sema_opening_import" = "opening import file for module %0: %1";
"serialization_skipped_invalid_decl" = "serialization skipped invalid %kind0";
"serialization_skipped_invalid_type" = "serialization skipped for invalid type %0";
"serialization_skipped_invalid_type_unknown_name" = "serialization skipped for invalid type";
"serialization_failed" = "serialization of module %0 failed due to the errors above";
"can_import_invalid_swiftmodule" = "canImport() evaluated to false due to invalid swiftmodule: %0";
"serialization_load_failed" = "failed to load module '%0'";
"module_interface_build_failed" = "failed to %select{build module '%1' for importation|verify module interface of '%1'}0 due to the errors above; the textual interface may be broken by project issues%select{, differences between compilers (the producer '%3' and this compiler '%4')|}2 or a compiler bug";
"module_interface_build_failed_mismatching_compiler" = "failed to build module '%0'; this SDK is not supported by the compiler (the SDK is built with '%1', while this compiler is '%2'). Please select a toolchain which matches the SDK.";
"serialization_malformed_module" = "malformed compiled module: %0";
"serialization_module_too_new" = "compiled module was created by a newer version of the compiler: %0";
"serialization_module_language_version_mismatch" = "module compiled with Swift %0 cannot be imported by the Swift %1 compiler: %2";
"serialization_module_too_old" = "compiled module was created by an older version of the compiler; rebuild %0 and try again: %1";
"serialization_module_incompatible_revision" = "compiled module was created by a different version of the compiler '%0'; rebuild %1 and try again: %2";
"serialization_module_incompatible_channel" = "compiled module was created for a different distribution channel '%0' than the local compiler '%1', please ensure %2 is found from the expected path: %3";
"serialization_missing_single_dependency" = "missing required module '%0'";
"serialization_missing_dependencies" = "missing required modules: %0";
"serialization_circular_dependency" = "circular dependency between modules '%0' and %1";
"serialization_missing_underlying_module" = "cannot load underlying module for %0";
"serialization_name_mismatch" = "cannot load module '%0' as '%1'";
"serialization_name_mismatch_repl" = "cannot load module '%0' as '%1'";
"serialization_target_incompatible" = "module %0 was created for incompatible target %1: %2";
"serialization_sdk_mismatch" = "cannot load module %0 built with SDK '%1' when using SDK '%2': %3";
"serialization_target_incompatible_repl" = "module %0 was created for incompatible target %1: %2";
"serialization_target_too_new" = "compiling for %0 %1, but module %2 has a minimum deployment target of %0 %3: %4";
"serialization_target_too_new_repl" = "compiling for %0 %1, but module %2 has a minimum deployment target of %0 %3: %4";
"serialization_fatal" = "fatal error encountered while reading from module '%0'; please submit a bug report (https://swift.org/contributing/#reporting-bugs)";
"serialization_invalid_decl" = "deserialized invalid declaration %0 (%1) in module '%2'";
"serialization_allowing_invalid_decl" = "allowing deserialization of invalid declaration %0 (%1) in module '%2'";
"serialization_error_type" = "deserialized error type '%0' in module '%1'";
"serialization_allowing_error_type" = "allowing deserialization of error type '%0' in module '%1'";
"serialization_malformed_sourceinfo" = "'%0' is either malformed or generated by a different Swift version. Note that it uses an unstable format and may leak internal project details, it should not be distributed alongside modules";
"need_hermetic_seal_to_import_module" = "module %0 was built with -experimental-hermetic-seal-at-link, but current compilation does not have -experimental-hermetic-seal-at-link";
"cannot_import_embedded_module" = "module %0 cannot be imported because it was built with embedded Swift";
"cannot_import_non_embedded_module" = "module %0 cannot be imported in embedded Swift mode";
"need_cxx_interop_to_import_module" = "module %0 was built with C++ interoperability enabled, but current compilation does not enable C++ interoperability";
"enable_cxx_interop_docs" = "visit https://www.swift.org/documentation/cxx-interop/project-build-setup to learn how to enable C++ interoperability";
"modularization_issue_decl_moved" = "reference to %select{top-level declaration|type}0 %1 broken by a context change; %1 was expected to be in %2, but now a candidate is found only in %3";
"modularization_issue_decl_type_changed" = "reference to %select{top-level declaration|type}0 %1 broken by a context change; the declaration kind of %1 %select{from %2|}5 changed since building '%3'%select{|, it was in %2 and now a candidate is found only in %4}5";
"modularization_issue_decl_not_found" = "reference to %select{top-level declaration|type}0 %1 broken by a context change; %1 is not found, it was expected to be in %2";
"modularization_issue_note_expected" = "the %select{declaration|type}0 was expected to be found in module %1 at '%2'";
"modularization_issue_note_expected_underlying" = "or expected to be found in the underlying module '%0' defined at '%1'";
"modularization_issue_note_found" = "the %select{declaration|type}0 was actually found in module %1 at '%2'";
"modularization_issue_stale_module" = "the module %0 has enabled library-evolution; the following file may need to be deleted if the SDK was modified: '%1'";
"modularization_issue_type_mismatch" = "a candidate was filtered out because of a type mismatch; expected: %0, found: %1";
"modularization_issue_swift_version" = "the module %0 was built with a Swift language version set to %1 while the current invocation uses %2; APINotes may change how clang declarations are imported";
"modularization_issue_audit_headers" = "declarations in the %select{underlying|}0 clang module %1 may be hidden by clang preprocessor macros";
"modularization_issue_layering_expected_local" = "the distributed module %0 refers to the local module %1; this may be caused by header maps or search paths";
"modularization_issue_layering_found_local" = "the reference may break layering; the candidate was found in the local module %1 for a reference from the distributed module %0";
"modularization_issue_related_modules" = "the %select{declaration|type}0 %1 moved between related modules; clang preprocessor macros may affect headers shared between these modules";
"interface_block_listed_broken" = "textual interface for %0 is blocklisted as broken; interface verification errors are downgraded to warnings";
"modularization_issue_side_effect_extension_error" = "could not deserialize extension";
"modularization_issue_side_effect_type_error" = "could not deserialize type for %0";
"modularization_issue_worked_around" = "attempting forced recovery enabled by -experimental-force-workaround-broken-modules";
"reserved_member_name" = "type member must not be named %0, since it would conflict with the 'foo.%1' expression";
"invalid_redecl_by_optionality_note" = "%select{implicitly unwrapped |}0optional parameter is of same type as %select{implicitly unwrapped |}1optional parameter";
"invalid_redecl" = "invalid redeclaration of %0";
"invalid_redecl_init" = "invalid redeclaration of synthesized %select{|memberwise }1%0";
"invalid_redecl_implicit" = "invalid redeclaration of synthesized %select{%0|implementation for protocol requirement}1 %2";
"invalid_redecl_swift5_warning" = "redeclaration of %0 is deprecated and will be an error in Swift 5";
"invalid_redecl_prev" = "%0 previously declared here";
"invalid_redecl_prev_name" = "%0 previously declared here";
"invalid_redecl_implicit_wrapper" = "%0 synthesized for property wrapper %select{projected value|backing storage}1";
"protocol_extension_in_where_clause" = "%0 was defined in extension of protocol %1 and cannot be referenced from a %select{'where' clause|generic parameter inheritance clause|associated type inheritance clause}2";
"protocol_extension_in_where_clause_note" = "consider moving %0 into the definition of protocol %1";
"ambiguous_type_base" = "%0 is ambiguous for type lookup in this context";
"invalid_member_type" = "%0 is not a member type of %1 %2";
"invalid_member_type_suggest" = "%0 does not have a member type named %1; did you mean %2?";
"invalid_member_reference" = "%kind0 is not a member type of %1";
"ambiguous_member_type" = "ambiguous type name %0 in %1";
"no_module_type" = "no type named %0 in module %1";
"ambiguous_module_type" = "ambiguous type name %0 in module %1";
"use_nonmatching_operator" = "%0 is not a %select{binary|prefix unary|postfix unary}1 operator";
"unsupported_recursion_in_associated_type_reference" = "unsupported recursion for reference to %kind0 of type %1";
"broken_associated_type_witness" = "reference to invalid %kind0 of type %1";
"unspaced_binary_operator_fixit" = "missing whitespace between %0 and %1 operators";
"unspaced_binary_operator" = "ambiguous missing whitespace between unary and binary operators";
"unspaced_binary_operators_candidate" = "could be %select{binary|postfix}2 %0 and %select{prefix|binary}2 %1";
"unspaced_unary_operator" = "unary operators must not be juxtaposed; parenthesize inner expression";
"nonexistent_power_operator" = "no operator '**' is defined; did you mean 'pow(_:_:)'?";
"cannot_find_in_scope" = "cannot %select{find|find operator}1 %0 in scope";
"cannot_find_in_scope_corrected" = "cannot %select{find|find operator}1 %0 in scope; did you mean '%2'?";
"cannot_find_self_in_scope" = "cannot find 'self' in scope; did you mean to use it in a type or extension context?";
"confusable_character" = "%select{identifier|operator}0 '%1' contains possibly confused characters; did you mean to use '%2'?";
"single_confusable_character" = "%select{identifier|operator}0 '%1' (%2) looks similar to '%3' (%4); did you mean '%3' (%4)?";
"cannot_find_type_in_scope" = "cannot find type %0 in scope";
"cannot_find_type_in_cast_expression" = "type-casting operator expects a type on its right-hand side (got: %kind0)";
"cannot_find_type_in_scope_did_you_mean" = "cannot find type %0 in scope; did you mean to use '%1'?";
"note_typo_candidate_implicit_member" = "did you mean the implicitly-synthesized %kindbase0?";
"note_remapped_type" = "did you mean to use '%0'?";
"note_module_as_type" = "cannot use module %0 as a type";
"use_unknown_object_literal_protocol" = "cannot deduce protocol for %0 literal";
"object_literal_default_type_missing" = "could not infer type of %0 literal";
"object_literal_resolve_import" = "import %0 to use '%1' as the default %2 literal type";
"use_local_before_declaration" = "use of local variable %0 before its declaration";
"decl_does_not_exist_in_module" = "%select{%error|type|struct|class|enum|protocol|variable|function}0 %1 does not exist in module %2";
"imported_decl_is_wrong_kind" = "%0 was imported as '%1', but is %select{%error|a type|a struct|a class|an enum|a protocol|a variable|a function}2";
"imported_decl_is_wrong_kind_typealias" = "%0 %1 cannot be imported as '%2'";
"ambiguous_decl_in_module" = "ambiguous name %0 in module %1";
"module_not_testable" = "module %0 was not compiled for testing";
"module_not_compiled_for_private_import" = "module %0 was not compiled for private import";
"in_package_module_not_compiled_from_source_or_package_interface" = "module %0 is in package '%1' but was built from a non-package interface; modules of the same package can only be loaded if built from source or package interface: %2";
"in_package_module_not_compiled_locally" = "module %0 is in package %1 but was loaded from SDK; modules of the same package should be built locally from source only: %2";
"import_restriction_conflict" = "module %0 cannot be both %select{implementation-only|SPI only|exported}1 and %select{implementation-only|SPI only|exported}2 ";
"module_not_compiled_with_library_evolution" = "module %0 was not compiled with library evolution support; using it means binary compatibility for %1 can't be guaranteed";
"implementation_only_requires_library_evolution" = "using '@_implementationOnly' without enabling library evolution for %0 may lead to instability during execution";
"implementation_only_deprecated" = "'@_implementationOnly' is deprecated, use 'internal import' instead";
"module_allowable_client_violation" = "module %0 doesn't allow importation from module %1";
"cross_import_added" = "import of %0 and %1 triggered a cross-import of %2";
"module_loaded" = "loaded module %0%select{| (overlay for a clang dependency)}1; source: '%2', loaded: '%3'";
"module_api_import" = "%select{|implicitly used }4%kind0 is imported via %1%select{, which reexports definition from %2|}3";
"module_api_import_conformance" = "conformance of %0 to %kind1 used here is imported via %2%select{ which reexports the definition from %3|}4";
"module_api_import_aliases" = "typealias underlying type %kind0 is imported via %1%select{, which reexports definition from %2|}3";
"skip_module_invalid" = "skip invalid swiftmodule: %0";
"skip_module_testable" = "skip swiftmodule built with '-enable-testing': %0";
"macro_loaded" = "loaded macro implementation module %0 from %select{shared library '%2'|executable '%2'|compiler plugin server '%2' with shared library '%3'}1";
"transitive_dependency_behavior" = "%1 has %select{a required|an optional|an ignored}2 transitive dependency on '%0'";
"explicit_interface_build_skipped" = "Skipped rebuilding module at %0 - up-to-date";
"cannot_find_project_version" = "cannot find user version number for %0 module '%1'; version number ignored";
"ambiguous_operator_decls" = "ambiguous operator declarations found for operator";
"found_this_operator_decl" = "found this matching operator declaration";
"operator_redeclared" = "operator redeclared";
"previous_operator_decl" = "previous operator declaration here";
"declared_operator_without_operator_decl" = "operator implementation without matching operator declaration";
"declared_unary_op_without_attribute" = "unary operator implementation must have a 'prefix' or 'postfix' modifier";
"unary_op_missing_prepos_attribute" = "%select{prefix|postfix}0 unary operator missing '%select{prefix|postfix}0' modifier";
"unary_operator_declaration_here" = "%select{prefix|postfix}0 operator found here";
"invalid_arg_count_for_operator" = "operators must have one or two arguments";
"operator_in_local_scope" = "operator functions can only be declared at global or in type scope";
"nonstatic_operator_in_nominal" = "operator %0 declared in type %1 must be 'static'";
"nonstatic_operator_in_extension" = "operator %0 declared in extension%select{| of %2}1 must be 'static'";
"nonfinal_operator_in_class" = "operator %0 declared in non-final class %1 must be 'final'";
"operator_in_unrelated_type" = "member operator %2%select{| of protocol %0}1 must have at least one argument of type %select{%0|'Self'}1";
"ambiguous_precedence_groups" = "multiple precedence groups found";
"found_this_precedence_group" = "found this matching precedence group";
"unknown_precedence_group" = "unknown precedence group %0";
"precedence_group_cycle" = "cycle in '%select{lowerThan|higherThan}0' relation";
"higher_than_precedence_group_cycle" = "cycle in higherThan relation: %0";
"precedence_group_lower_within_module" = "precedence group cannot be given lower precedence than group in same module; make the other precedence group higher than this one instead";
"precedence_group_redeclared" = "precedence group redeclared";
"previous_precedence_group_decl" = "previous precedence group declaration here";
"circular_reference_through_precedence_group" = "through reference to precedence group %0 here";
"tuple_types_not_convertible_nelts" = "%0 is not convertible to %1, tuples have a different number of elements";
"tuple_types_not_convertible" = "tuple type %0 is not convertible to tuple type %1";
"invalid_force_unwrap" = "cannot force unwrap value of non-optional type %0";
"invalid_optional_chain" = "cannot use optional chaining on non-optional value of type %0";
"ternary_expr_cases_mismatch" = "result values in '? :' expression have mismatching types %0 and %1";
"single_value_stmt_branches_mismatch" = "branches have mismatching types %0 and %1";
"single_value_stmt_out_of_place" = "'%0' may only be used as expression in return, throw, or as the source of an assignment";
"single_value_stmt_must_be_unlabeled" = "'%0' cannot have a jump label when used as expression";
"if_expr_must_be_syntactically_exhaustive" = "'if' must have an unconditional 'else' to be used as expression";
"do_catch_expr_must_be_syntactically_exhaustive" = "'do catch' must have an unconditional 'catch' to be used as expression";
"single_value_stmt_branch_empty" = "expected expression in branch of '%0' expression";
"single_value_stmt_branch_must_end_in_result" = "non-expression branch of '%0' expression may only end with a 'throw'";
"cannot_jump_in_single_value_stmt" = "cannot '%0' in '%1' when used as expression";
"effect_marker_on_single_value_stmt" = "'%0' has no effect on '%1' expression";
"out_of_place_then_stmt" = "'then' may only appear as the last statement in an 'if', 'switch', or 'do' expression";
"did_not_call_function_value" = "function value was used as a property; add () to call it";
"did_not_call_function" = "function %0 was used as a property; add () to call it";
"did_not_call_method" = "method %0 was used as a property; add () to call it";
"init_not_instance_member_use_assignment" = "'init' is a member of the type; use assignment to initialize the value instead";
"init_not_instance_member" = "'init' is a member of the type; use 'type(of: ...)' to initialize a new object of the same dynamic type";
"super_initializer_not_in_initializer" = "'super.init' cannot be called outside of an initializer";
"isa_is_always_true" = "'%0' test is always true";
"isa_is_foreign_check" = "'is' test is always true because %0 is a Core Foundation type";
"checked_cast_not_supported" = "runtime conversion from %0 to %1 is not supported; %select{'is' test|cast}2 always fails";
"checked_cast_not_supported_coerce_instead" = "consider using 'as' coercion instead";
"conditional_downcast_coercion" = "conditional cast from %0 to %1 always succeeds";
"literal_conditional_downcast_to_coercion" = "cast from literal of inferred type %0 to unrelated type %1 always fails; consider using 'as' coercion";
"forced_downcast_noop" = "forced cast of %0 to same type has no effect";
"forced_downcast_coercion" = "forced cast from %0 to %1 always succeeds; did you mean to use 'as'?";
"downcast_same_type" = "forced cast from %0 to %1 %select{only unwraps optionals|only unwraps and bridges}3; did you mean to use '%2'%select{| with 'as'}3?";
"conditional_downcast_same_type" = "conditional downcast from %0 to %1 %select{does nothing|is equivalent to an implicit conversion to an optional %1|is a bridging conversion; did you mean to use 'as'?}2";
"is_expr_same_type" = "checking a value with optional type %0 against type %1 succeeds whenever the value is non-nil; did you mean to use '!= nil'?";
"downcast_to_unrelated" = "cast from %0 to unrelated type %1 always fails";
"downcast_to_unrelated_fixit" = "did you mean to call %0 with '()'?";
"optional_chain_noop" = "optional chain has no effect, expression already produces %0";
"optional_chain_isnt_chaining" = "'?' must be followed by a call, member lookup, or subscript";
"pattern_in_expr" = "%0 cannot appear in an expression";
"note_call_to_operator" = "in call to operator %0";
"note_call_to_func" = "in call to function %0";
"note_call_to_subscript" = "in call to %0";
"note_call_to_initializer" = "in call to initializer";
"missing_nullary_call" = "function produces expected type %0; did you mean to call it with '()'?";
"optional_not_unwrapped" = "value of optional type %0 must be unwrapped to a value of type %1";
"unwrap_with_default_value" = "coalesce using '??' to provide a default when the optional value contains 'nil'";
"unwrap_with_force_value" = "force-unwrap using '!' to abort execution if the optional value contains 'nil'";
"unwrap_iuo_initializer" = "value inferred to be type %0 when initialized with an implicitly unwrapped value";
"unwrap_with_guard" = "short-circuit using 'guard' to exit this function early if the optional value contains 'nil'";
"perform_optional_chain_on_function_type" = "use optional chaining to call this value of function type when optional is non-'nil'";
"optional_base_not_unwrapped" = "value of optional type %0 must be unwrapped to refer to member %1 of wrapped base type %2";
"invalid_optional_inferred_keypath_root" = "key path root inferred as optional type %0 must be unwrapped to refer to member %1 of unwrapped type %2";
"optional_base_chain" = "chain the optional using '?' to access member %0 only for non-'nil' base values";
"optional_base_remove_optional_for_keypath_root" = "use unwrapped type %0 as key path root";
"optional_keypath_application_base" = "use '?' to access key path subscript only for non-'nil' base values";
"optional_key_path_root_base_chain" = "chain the optional using '?.' to access unwrapped type member %0";
"optional_key_path_root_base_unwrap" = "unwrap the optional using '!.' to access unwrapped type member %0";
"optional_self_not_unwrapped" = "explicit use of 'self' is required when 'self' is optional, to make control flow explicit";
"optional_self_chain" = "reference 'self?.' explicitly";
"missing_unwrap_optional_try" = "value of optional type %0 not unwrapped; did you mean to use 'try!' or chain with '?'?";
"cannot_coerce_to_type" = "%0 is not convertible to %1";
"missing_forced_downcast" = "did you mean to use 'as!' to force downcast?";
"missing_optional_downcast" = "did you mean to use 'as?' to conditionally downcast?";
"coercion_may_fail_warning" = "coercion from %0 to %1 may fail; use 'as?' or 'as!' instead";
"tuple_label_mismatch_warning" = "tuple conversion from %0 to %1 mismatches labels";
"missing_explicit_conversion" = "%0 is not implicitly convertible to %1; did you mean to use 'as' to explicitly convert?";
"missing_address_of" = "passing value of type %0 to an inout parameter requires explicit '&'";
"missing_address_of_yield" = "yielding mutable value of type %0 requires explicit '&'";
"extraneous_address_of" = "'&' may only be used to pass an argument to inout parameter";
"extra_address_of" = "'&' used with non-inout argument of type %0";
"extra_address_of_unsafepointer" = "'&' is not allowed passing array value as %0 argument";
"cannot_pass_inout_arg_to_subscript" = "cannot pass an inout argument to a subscript; use 'withUnsafeMutablePointer' to explicitly convert argument to a pointer";
"incorrect_property_wrapper_reference" = "cannot convert value %0 of type %1 to expected type %2, use %select{wrapper|wrapped value}3 instead";
"incorrect_property_wrapper_reference_member" = "referencing %kind0 requires %select{wrapper|wrapped value of type}1 %2";
"missing_init_on_metatype_initialization" = "initializing from a metatype value must reference 'init' explicitly";
"extra_argument_labels" = "extraneous argument label%select{|s}0 '%1' in %select{call|subscript|macro expansion}2";
"missing_argument_labels" = "missing argument label%select{|s}0 '%1' in %select{call|subscript|macro expansion}2";
"wrong_argument_labels" = "incorrect argument label%select{|s}0 in %select{call|subscript|macro expansion}3 (have '%1', expected '%2')";
"argument_out_of_order_named_named" = "argument %0 must precede argument %1";
"argument_out_of_order_named_unnamed" = "argument %0 must precede unnamed argument #%1";
"argument_out_of_order_unnamed_named" = "unnamed argument #%0 must precede argument %1";
"argument_out_of_order_unnamed_unnamed" = "unnamed argument #%0 must precede unnamed argument #%1";
"argument_out_of_order_binary_op" = "operator argument #%0 must precede operator argument #%1";
"candidate_expected_different_labels" = "incorrect labels for candidate (have: '%0', expected: '%1')";
"member_shadows_function" = "use of %0 refers to %1 rather than %kind2";
"member_shadows_global_function" = "use of %0 refers to %1 rather than %kind2 in module %3";
"instance_member_use_on_type" = "instance member %1 cannot be used on type %0; did you mean to use a value of this type instead?";
"instance_member_in_initializer" = "cannot use instance member %0 within property initializer; property initializers run before 'self' is available";
"instance_member_in_default_parameter" = "cannot use instance member %0 as a default parameter";
"missing_argument_named" = "missing argument for parameter %0 in %select{call|subscript|macro expansion}1";
"missing_argument_positional" = "missing argument for parameter #%0 in %select{call|subscript|macro expansion}1";
"missing_arguments_in_call" = "missing arguments for parameters %0 in %select{call|subscript|macro expansion}1";
"extra_argument_named" = "extra argument %0 in %select{call|subscript|macro expansion}1";
"extra_argument_positional" = "extra argument in %select{call|subscript|macro expansion}0";
"extra_arguments_in_call" = "extra %select{arguments|trailing closures}0 at positions %1 in call";
"extra_argument_to_nullary_call" = "argument passed to %select{call|subscript|macro expansion}0 that takes no arguments";
"extra_trailing_closure_in_call" = "extra trailing closure passed in %select{call|subscript|macro expansion}0";
"closure_bad_param" = "%select{|trailing }1closure passed to parameter of type %0 that does not accept a closure";
"unlabeled_trailing_closure_deprecated" = "backward matching of the unlabeled trailing closure is deprecated; label the argument with %0 to suppress this warning";
"candidate_with_extraneous_args_closure" = "candidate %0 requires %1 argument%s1, but %2 %select{were|was}3 used in closure body";
"candidate_with_extraneous_args" = "candidate %0 has %1 parameter%s1, but context %2 has %3";
"no_accessible_initializers" = "%0 cannot be constructed because it has no accessible initializers";
"non_nominal_no_initializers" = "non-nominal type %0 does not support explicit initialization";
"unbound_generic_parameter" = "generic parameter %0 could not be inferred";
"unbound_generic_parameter_cast" = "generic parameter %0 could not be inferred in cast to %1";
"archetype_declared_in_type" = "%0 declared as parameter to type %1";
"unbound_generic_parameter_explicit_fix" = "explicitly specify the generic arguments to fix this issue";
"invalid_dynamic_callable_type" = "@dynamicCallable attribute requires %0 to have either a valid 'dynamicallyCall(withArguments:)' method or 'dynamicallyCall(withKeywordArguments:)' method";
"missing_dynamic_callable_kwargs_method" = "@dynamicCallable type %0 cannot be applied with keyword arguments; missing 'dynamicCall(withKeywordArguments:)' method";
"invalid_dynamic_member_lookup_type" = "@dynamicMemberLookup attribute requires %0 to have a 'subscript(dynamicMember:)' method that accepts either 'ExpressibleByStringLiteral' or a key path";
"invalid_dynamic_member_subscript" = "add an explicit argument label to this subscript to satisfy the @dynamicMemberLookup requirement";
"string_index_not_integer" = "String must not be indexed with %0, it has variable size elements";
"string_index_not_integer_note" = "consider using an existing high level algorithm, str.startIndex.advanced(by: n), or a projection like str.utf8";
"invalid_c_function_pointer_conversion_expr" = "a C function pointer can only be formed from a reference to a 'func' or a literal closure";
"c_function_pointer_from_method" = "a C function pointer cannot be formed from a method";
"c_function_pointer_from_generic_function" = "a C function pointer cannot be formed from a reference to a generic function";
"invalid_autoclosure_forwarding" = "add () to forward @autoclosure parameter";
"invalid_differentiable_function_conversion_expr" = "a '@differentiable' function can only be formed from a reference to a 'func' or 'init' or a literal closure";
"invalid_differentiable_function_conversion_parameter" = "did you mean to take a '%0' closure?";
"invalid_autoclosure_pointer_conversion" = "cannot perform pointer conversion of value of type %0 to autoclosure result type %1";
"missing_initializer_def" = "initializer requires a body";
"pound_warning" = "%0";
"pound_error" = "%0";
"operator_not_func" = "operators must be declared with 'func'";
"redefining_builtin_operator" = "cannot declare a custom %0 '%1' operator";
"attribute_requires_operator_identifier" = "'%0' requires a function with an operator identifier";
"attribute_requires_single_argument" = "'%0' requires a function with one argument";
"nominal_type_not_attribute" = "%kind0 cannot be used as an attribute";
"mutating_invalid_global_scope" = "%0 is only valid on methods";
"mutating_invalid_classes" = "%0 is not valid on %1s in %select{classes|class-bound protocols}2";
"functions_mutating_and_not" = "method must not be declared both %0 and %1";
"static_functions_not_mutating" = "static functions must not be declared mutating";
"modify_mutatingness_differs_from_setter" = "'modify' accessor cannot be %0 when the setter is %1";
"transparent_in_protocols_not_supported" = "'@_transparent' attribute is not supported on declarations within protocols";
"transparent_in_classes_not_supported" = "'@_transparent' attribute is not supported on declarations within classes";
"iboutlet_nonobjc_class" = "@IBOutlet property cannot %select{have|be an array of}0 non-'@objc' class type %1";
"iboutlet_nonobjc_protocol" = "@IBOutlet property cannot %select{have|be an array of}0 non-'@objc' protocol type %1";
"iboutlet_nonobject_type" = "@IBOutlet property cannot %select{have|be an array of}0 non-object type %1";
"iboutlet_only_mutable" = "@IBOutlet attribute requires property to be mutable";
"iboutlet_non_optional" = "@IBOutlet property has non-optional type %0";
"note_make_optional" = "add '?' to form the optional type %0";
"note_make_implicitly_unwrapped_optional" = "add '!' to form an implicitly unwrapped optional";
"invalid_ibdesignable_extension" = "@IBDesignable can only be applied to classes and extensions of classes";
"attr_must_be_used_on_class_instance" = "only class instance properties can be declared @%0";
"invalid_ibaction_decl" = "only instance methods can be declared @%0";
"invalid_ibaction_result" = "methods declared @%0 must %select{|not }1return a value";
"invalid_ibaction_argument_count" = "@%0 methods must have %1 to %2 arguments";
"invalid_ibaction_argument_count_exact" = "@%0 methods must have %2 argument%s2";
"invalid_ibaction_argument_count_max" = "@%0 methods must have at most %2 argument%s2";
"ibsegueaction_objc_method_family" = "@%0 method cannot have selector %1 because it has special memory management behavior";
"fixit_rename_in_swift" = "change Swift name to %0";
"fixit_rename_in_objc" = "change Objective-C selector to %0";
"remove_async_add_task" = "remove 'async' and wrap in 'Task' to use concurrency in %0";
"no_objc_tagged_pointer_not_class_protocol" = "@unsafe_no_objc_tagged_pointer can only be applied to class protocols";
"swift_native_objc_runtime_base_not_on_root_class" = "@_swift_native_objc_runtime_base_not_on_root_class can only be applied to root classes";
"objc_implementation_early_spelling_deprecated" = "'@_objcImplementation' is deprecated; use '@implementation' instead";
"attr_objc_implementation_must_be_unconditional" = "only unconditional extensions can implement an Objective-C '@interface'";
"attr_objc_implementation_must_extend_class" = "cannot mark extension of %kind0 with '@_objcImplementation'; it is not an imported Objective-C class";
"attr_objc_implementation_must_be_imported" = "'@_objcImplementation' cannot be used to extend %kind0 because it was defined by a Swift 'class' declaration, not an imported Objective-C '@interface' declaration";
"attr_objc_implementation_must_have_super" = "'@_objcImplementation' cannot be used to implement root %kind0; declare its superclass in the header";
"objc_implementation_cannot_have_generics" = "'@_objcImplementation' cannot be used to implement %kind0";
"attr_objc_implementation_category_not_found" = "could not find category %0 on Objective-C class %1; make sure your umbrella or bridging header imports the header that declares it";
"attr_objc_implementation_func_not_found" = "could not find imported function '%0' matching %kind1; make sure your umbrella or bridging header imports the header that declares it";
"attr_objc_implementation_fixit_remove_category_name" = "remove arguments to implement the main '@interface' for this class";
"attr_objc_implementation_no_category_for_func" = "%kind0 does not belong to an Objective-C category; remove the category name from this attribute";
"attr_objc_implementation_no_conformance" = "'@_objcImplementation' extension cannot add conformance to %0; add this conformance %select{with an ordinary extension|in the Objective-C header}1";
"member_of_objc_implementation_not_objc_or_final" = "%kind0 does not match any %kindonly0 declared in the headers for %1; did you use the %kindonly0's Swift name?";
"fixit_add_private_for_objc_implementation" = "add 'private' or 'fileprivate' to define an Objective-C-compatible %0 not declared in the header";
"fixit_add_final_for_objc_implementation" = "add 'final' to define a Swift %0 that cannot be overridden";
"fixit_add_nonobjc_for_objc_implementation" = "add '@nonobjc' to define a Swift-only %0";
"objc_implementation_wrong_category" = "%kind0 should be implemented in extension for %select{main class interface|category %1}1, not %select{main class interface|category %2}2";
"objc_implementation_wrong_decl_kind" = "%kind0 does not match the %1 declared by the header";
"objc_implementation_must_be_settable" = "%kind0 should be settable to match the settable %1 declared by the header";
"objc_implementation_type_mismatch" = "%kind0 of type %1 does not match type %2 declared by the header";
"objc_implementation_required_attr_mismatch" = "%kind0 %select{should not|should}2 be 'required' to match %1 declared by the header";
"objc_implementation_candidate_has_error_convention" = "%kind0 does not match the declaration in the header because it throws an error";
"objc_implementation_candidate_lacks_error_convention" = "%kind0 does not match the declaration in the header because it does not throw an error";
"objc_implementation_mismatched_error_convention_kind" = "%kind0 does not match the declaration in the header because it indicates an error by %select{returning zero|returning non-zero|returning zero or a result|returning nil|setting the error parameter|%error}1, rather than by %select{returning zero|returning non-zero|returning zero or a result|returning nil|setting the error parameter|%error}2";
"objc_implementation_mismatched_error_convention_index" = "%kind0 does not match the declaration in the header because it uses parameter #%1 for the error, not parameter #%2; a selector part called 'error:' can control which parameter to use";
"objc_implementation_mismatched_error_convention_void_param" = "%kind0 does not match the declaration in the header because it %select{removes the error parameter|makes the error parameter 'Void'}1 rather than %select{making it 'Void'|removing it}1";
"objc_implementation_mismatched_error_convention_ownership" = "%kind0 does not match the declaration in the header because it %select{does not own|owns}1 the error parameter";
"objc_implementation_mismatched_error_convention_other" = "%kind0 does not match the declaration in the header because it uses a different Objective-C error convention; please file a bug report with a sample project, as the compiler should be able to describe the mismatch";
"objc_implementation_wrong_objc_name" = "selector %0 for %kind1 not found in header; did you mean %2?";
"objc_implementation_wrong_swift_name" = "selector %0 used in header by %kindonly1 with a different name; did you mean %1?";
"objc_implementation_missing_impl" = "extension for %select{main class interface|category %0}0 should provide implementation for %kind1";
"objc_implementation_class_or_instance_mismatch" = "%kind0 does not match %1 declared in header";
"objc_implementation_multiple_matching_candidates" = "found multiple implementations that could match %kind0 with selector %1";
"objc_implementation_candidate_impl_here" = "%kind0 is a potential match%select{|; insert '@objc(%2)' to use it}1";
"objc_implementation_requirement_here" = "%kind0 declared in header here";
"objc_implementation_init_must_be_convenience" = "%kind0 is not valid in an '@_objcImplementation' extension because Objective-C subclasses must be able to override %select{designated|required}1 initializers";
"objc_implementation_init_turn_designated_to_convenience" = "add 'convenience' keyword to make this a convenience initializer";
"objc_implementation_init_turn_required_to_convenience" = "replace 'required' keyword with 'convenience' to make this a convenience initializer";
"objc_implementation_member_requires_vtable" = "%kind0 is not valid in an '@_objcImplementation' extension because it is an overridable Swift-only %kindonly0";
"objc_implementation_multiple_matching_requirements" = "%kind0 could match several different members declared in the header";
"objc_implementation_one_matched_requirement" = "%kind0 (with selector %1) is a potential match%select{|; insert '@objc(%3)' to use it}2";
"wrap_objc_implementation_will_become_error" = "%0; this will become an error after adopting '@implementation'";
"cdecl_not_at_top_level" = "@_cdecl can only be applied to global functions";
"cdecl_empty_name" = "@_cdecl symbol name cannot be empty";
"cdecl_throws" = "raising errors from @_cdecl functions is not supported";
"section_linkage_markers_disabled" = "attribute requires '-enable-experimental-feature SymbolLinkageMarkers'";
"used_not_at_top_level" = "@_used can only be applied to global functions and variables";
"section_not_at_top_level" = "@_section can only be applied to global functions and variables";
"section_empty_name" = "@_section section name cannot be empty";
"attr_extern_experimental" = "@_extern requires '-enable-experimental-feature Extern'";
"extern_not_at_top_level_func" = "@_extern attribute can only be applied to global functions";
"extern_empty_c_name" = "expected non-empty C name in @_extern attribute";
"extern_only_non_other_attr" = "@_extern attribute cannot be applied to an '@%0' declaration";
"extern_c_maybe_invalid_name" = "C name '%0' may be invalid; explicitly specify the name in @_extern(c) to suppress this warning";
"attr_static_exclusive_only_disabled" = "attribute requires '-enable-experimental feature StaticExclusiveOnly'";
"attr_static_exclusive_only_noncopyable" = "@_staticExclusiveOnly can only be applied to noncopyable types";
"attr_static_exclusive_only_let_only" = "variable of type %0 must be declared with a 'let'";
"attr_static_exclusive_only_type_nonmutating" = "%0 is a non-mutable type";
"attr_static_exclusive_only_let_only_param" = "parameter of type %0 must be declared as either 'borrowing' or 'consuming'";
"attr_static_exclusive_only_mutating" = "type %0 cannot have mutating function %1";
"attr_static_exclusive_no_setters" = "variable of type %0 must not have a setter";
"attr_extractConstantsFromMembers_experimental" = "@extractConstantsFromMembers requires '-enable-experimental-feature ExtractConstantsFromMembers'";
"c_func_variadic" = "cannot declare variadic argument %0 in %kind1";
"c_func_unsupported_specifier" = "cannot declare '%0' argument %1 in %kind2";
"c_func_unsupported_type" = "%0 cannot be represented in C";
"c_func_async" = "async functions cannot be represented in C";
"c_func_throws" = "raising errors from C functions is not supported";
"expose_wasm_not_at_top_level_func" = "@_expose attribute with 'wasm' can only be applied to global functions";
"expose_only_non_other_attr" = "@_expose attribute cannot be applied to an '%0' declaration";
"expose_inside_unexposed_decl" = "@_expose attribute cannot be applied inside of unexposed declaration %0";
"expose_invalid_name_pattern_init" = "invalid declaration name '%0' specified in an @_expose attribute; exposed initializer name must start with 'init'";
"expose_unsupported_objc_decl_to_cxx" = "@objc %kind0 can not yet be exposed to C++";
"expose_unsupported_async_decl_to_cxx" = "async %kind0 can not be exposed to C++";
"expose_unsupported_actor_isolated_to_cxx" = "actor-isolated %kind0 can not be exposed to C++";
"expose_unsupported_client_emission_to_cxx" = "%kind0 can not be exposed to C++ as it requires code to be emitted into client";
"expose_generic_decl_to_cxx" = "generic %kind0 can not yet be exposed to C++";
"expose_generic_requirement_to_cxx" = "generic requirements for %kind0 can not yet be represented in C++";
"expose_throwing_to_cxx" = "%kind0 can not yet be represented in C++ as it may throw an error";
"expose_indirect_enum_cxx" = "indirect enum %0 can not yet be represented in C++";
"expose_enum_case_type_to_cxx" = "enum %0 can not be represented in C++ as one of its cases has an associated value with type that can't be represented in C++";
"expose_enum_case_tuple_to_cxx" = "enum %0 can not yet be represented in C++ as one of its cases has multiple associated values";
"expose_protocol_to_cxx_unsupported" = "protocol %0 can not yet be represented in C++";
"expose_move_only_to_cxx" = "noncopyable %kind0 can not yet be represented in C++";
"expose_nested_type_to_cxx" = "nested %kind0 can not yet be represented in C++";
"expose_macro_to_cxx" = "Swift macro can not yet be represented in C++";
"unexposed_other_decl_in_cxx" = "%kind0 is not yet exposed to C++";
"unsupported_other_decl_in_cxx" = "Swift %kind0 cannot be represented in C++";
"attr_methods_only" = "only methods can be declared %0";
"attr_decl_async" = "@%0 %1 cannot be asynchronous";
"attr_only_at_non_local_scope" = "attribute '%0' can only be used in a non-local scope";
"attr_only_at_non_generic_scope" = "attribute '%0' cannot be used in a generic context";
"attr_only_on_static_properties" = "properties with attribute '_section' must be static";
"weak_unowned_in_embedded_swift" = "attribute %0 cannot be used in embedded Swift";
"access_control_in_protocol" = "%0 modifier cannot be used in protocols";
"access_control_in_protocol_detail" = "protocol requirements implicitly have the same access as the protocol itself";
"access_control_setter" = "'%select{private|fileprivate|internal|package|public|open}0(set)' modifier can only be applied to variables and subscripts";
"access_control_setter_read_only" = "'%select{private|fileprivate|internal|package|public|%error}0(set)' modifier cannot be applied to %select{constants|read-only variables|read-only properties|read-only subscripts}1";
"access_control_setter_more" = "%select{private|fileprivate|internal|package|public|%error}0 %select{variable|property|subscript}1 cannot have %select{%error|a fileprivate|an internal|a package|a public|an open}2 setter";
"access_control_setter_redundant" = "'%select{private|fileprivate|internal|package|public|open}0(set)' modifier is redundant for %select{a private|a fileprivate|an internal|a package|a public|an open}2 %1";
"access_control_ext_member_more" = "'%select{%error|fileprivate|internal|package|public|open}0' modifier conflicts with extension's default access of '%select{private|fileprivate|internal|package|public|%error}1'";
"access_control_ext_member_redundant" = "'%select{%error|fileprivate|internal|package|public|%error}0' modifier is redundant for %1 declared in %select{a private (equivalent to fileprivate)|a fileprivate|an internal|a package|a public|%error}2 extension";
"access_control_ext_requirement_member_more" = "cannot declare %select{%error|a fileprivate|an internal|a package|a public|an open}0 %1 in an extension with %select{private|fileprivate|internal|package|public|%error}2 requirements";
"access_control_extension_more" = "extension of %select{private|fileprivate|internal|package|%error|%error}0 %1 cannot be declared %select{%error|fileprivate|internal|package|public|%error}2";
"access_control_extension_open" = "extensions cannot be declared 'open'; declare individual members as 'open' instead";
"access_control_open_bad_decl" = "only classes and overridable class members can be declared 'open'; use 'public'";
"access_control_non_objc_open_member" = "non-'@objc' %0 in extensions cannot be overridden; use 'public' instead";
"access_control_requires_package_name" = "the package access level %select{|used on %1 }0requires a package name; set it with the compiler flag -package-name";
"invalid_decl_attribute" = "'%0' attribute cannot be applied to this declaration";
"attr_invalid_on_decl_kind" = "'%0' attribute cannot be applied to %1 declarations";
"invalid_decl_modifier" = "%0 modifier cannot be applied to this declaration";
"attribute_does_not_apply_to_type" = "attribute does not apply to type";
"optional_attribute_non_protocol" = "'optional' can only be applied to protocol members";
"optional_attribute_non_objc_protocol" = "'optional' can only be applied to members of an @objc protocol";
"optional_attribute_missing_explicit_objc" = "'optional' requirements are an Objective-C compatibility feature; add '@objc'";
"objcmembers_attribute_nonclass" = "'@objcMembers' attribute can only be applied to a class";
"optional_attribute_initializer" = "'optional' cannot be applied to an initializer";
"unavailable_method_non_objc_protocol" = "protocol members can only be marked unavailable in an @objc protocol";
"spi_available_malformed" = "SPI available only supports introducing version on specific platform";
"missing_in_class_init_1" = "stored property %0 requires an initial value%select{| or should be @NSManaged}1";
"missing_in_class_init_2" = "stored properties %0 and %1 require initial values%select{| or should be @NSManaged}2";
"missing_in_class_init_3plus" = "stored properties %0, %1, %select{and %2|%2, and others}3 require initial values%select{| or should be @NSManaged}4";
"requires_stored_property_inits_here" = "%select{superclass|class}1 %0 requires all stored properties to have initial values%select{| or use @NSManaged}2";
"class_without_init" = "%select{class|actor}0 %1 has no initializers";
"note_no_in_class_init_1" = "stored property %0 without initial value prevents synthesized initializers";
"note_no_in_class_init_2" = "stored properties %0 and %1 without initial values prevent synthesized initializers";
"note_no_in_class_init_3plus" = "stored properties %0, %1, %select{and %2|%2, and others}3 without initial values prevent synthesized initializers";
"missing_unimplemented_init_runtime" = "standard library error: missing _unimplementedInitializer";
"missing_undefined_runtime" = "standard library error: missing _undefined";
"inherited_default_value_not_in_designated_constructor" = "default value inheritance via 'super' is only valid on the parameters of designated initializers";
"inherited_default_value_used_in_non_overriding_constructor" = "default value inheritance via 'super' can only be used when overriding a designated initializer";
"corresponding_param_not_defaulted" = "default value inheritance via 'super' requires that the corresponding parameter of the overridden designated initializer has a default value";
"inherited_default_param_here" = "corresponding parameter declared here";
"option_set_zero_constant" = "static property %0 produces an empty option set";
"option_set_empty_set_init" = "use [] to silence this warning";
"originally_definedin_topleve_decl" = "'%0' is only applicable to top-level decl";
"originally_definedin_must_not_before_available_version" = "symbols are moved to the current module before they were available in the OSs";
"spi_preferred_over_spi_available" = "symbols that are @_spi_available on all platforms should use @_spi instead";
"alignment_not_power_of_two" = "alignment value must be a power of two";
"dependency_scan_module_not_found" = "Unable to find module dependency: '%0'";
"unresolved_import_location" = "also imported here";
"dependency_as_imported_by_main_module" = "a dependency of main module '%0'";
"dependency_as_imported_by" = "a dependency of %select{Swift|Clang}2 module '%0': '%1'";
"clang_dependency_scan_error" = "Clang dependency scanner failure: %0";
"indirect_case_without_payload" = "enum case %0 without associated value cannot be 'indirect'";
"indirect_case_in_indirect_enum" = "enum case in 'indirect' enum cannot also be 'indirect'";
"enum_frozen_nonpublic" = "%0 has no effect on non-public enums";
"getset_init" = "variable with getter/setter cannot have an initial value";
"effectful_not_representable_objc" = "%0 with 'throws' or 'async' is not representable in Objective-C";
"unimplemented_static_var" = "%select{ERROR|static|class}1 stored properties not supported%select{ in this context| in generic types| in classes| in protocol extensions}0%select{|; did you mean 'static'?}2";
"observingprop_requires_initializer" = "non-member observing properties require an initializer";
"global_requires_initializer" = "global '%select{var|let}0' declaration requires an initializer expression%select{ or an explicitly stated getter|}0";
"static_requires_initializer" = "'%select{ERROR|static|class|}0 %select{var|let}1' declaration requires an initializer expression or an explicitly stated getter";
"static_requires_initializer_add_init" = "add an initializer to silence this error";
"pattern_type_access" = "%select{%select{variable|constant}0|property}1 %select{must be declared %select{%select{private|fileprivate|internal|package|%error|%error}3|private or fileprivate}4|cannot be declared %select{in this context|fileprivate|internal|package|public|open}3}2 because its type uses %select{a private|a fileprivate|an internal|a package|%error|%error}5 type";
"pattern_type_access_warn" = "%select{%select{variable|constant}0|property}1 %select{should be declared %select{private|fileprivate|internal|package|%error|%error}5|should not be declared %select{in this context|fileprivate|internal|package|public|open}3}2 because its type uses %select{a private|a fileprivate|an internal|a package|%error|%error}5 type";
"pattern_type_access_inferred" = "%select{%select{variable|constant}0|property}1 %select{must be declared %select{%select{private|fileprivate|internal|package|%error|%error}3|private or fileprivate}4|cannot be declared %select{in this context|fileprivate|internal|package|public|open}3}2 because its type %6 uses %select{a private|a fileprivate|an internal|a package|%error|%error}5 type";
"pattern_type_access_inferred_warn" = "%select{%select{variable|constant}0|property}1 %select{should be declared %select{private|fileprivate|internal|package|%error|%error}5|should not be declared %select{in this context|fileprivate|internal|package|public|open}3}2 because its type %6 uses %select{a private|a fileprivate|an internal|a package|%error|%error}5 type";
"pattern_type_not_usable_from_inline" = "type referenced from a '@usableFromInline' %select{%select{variable|constant}0|property}1 must be '@usableFromInline' or public";
"pattern_type_not_usable_from_inline_warn" = "type referenced from a '@usableFromInline' %select{%select{variable|constant}0|property}1 should be '@usableFromInline' or public";
"pattern_type_not_usable_from_inline_frozen" = "type referenced from a stored property in a '@frozen' struct must be '@usableFromInline' or public";
"pattern_type_not_usable_from_inline_inferred" = "type referenced from a '@usableFromInline' %select{%select{variable|constant}0|property}1 with inferred type %2 must be '@usableFromInline' or public";
"pattern_type_not_usable_from_inline_inferred_warn" = "type referenced from a '@usableFromInline' %select{%select{variable|constant}0|property}1 with inferred type %2 should be '@usableFromInline' or public";
"pattern_type_not_usable_from_inline_inferred_frozen" = "type referenced from a stored property with inferred type %2 in a '@frozen' struct must be '@usableFromInline' or public";
"pattern_binds_no_variables" = "%select{property|global variable}0 declaration does not bind any variables";
"variable_bound_by_no_pattern" = "variable %0 is not bound by any pattern";
"destructuring_let_struct_stored_property_unsupported" = "binding multiple 'let' stored properties from a single initializer expression in a struct is unsupported";
"optional_ambiguous_case_ref" = "assuming you mean '%0.%2'; did you mean '%1.%2' instead?";
"optional_fixit_ambiguous_case_ref" = "explicitly specify 'Optional' to silence this warning";
"optional_fixit_ambiguous_case_ref_switch" = "use 'nil' to silence this warning";
"type_fixit_optional_ambiguous_case_ref" = "use '%0.%1' instead";
"type_fixit_optional_ambiguous_case_ref_switch" = "use '%0' instead";
"nscoding_unstable_mangled_name" = "%select{private|fileprivate|nested|local}0 class %1 has an unstable name when archiving via 'NSCoding'";
"unstable_mangled_name_add_objc_new" = "for new classes, use '@objc' to specify a unique, prefixed Objective-C runtime name";
"unstable_mangled_name_add_objc" = "for compatibility with existing archives, use '@objc' to record the Swift 3 runtime name";
"unsupported_type_nested_in_generic_function" = "type %0 cannot be nested in generic function %1";
"unsupported_type_nested_in_generic_closure" = "type %0 cannot be nested in closure in generic context";
"unsupported_type_nested_in_protocol" = "type %0 cannot be nested in protocol %1";
"unsupported_type_nested_in_protocol_extension" = "type %0 cannot be nested in protocol extension of %1";
"unsupported_nested_protocol_in_generic" = "protocol %0 cannot be nested in a generic context";
"unsupported_nested_protocol_in_protocol" = "protocol %0 cannot be nested in protocol %1";
"where_nongeneric_ctx" = "'where' clause on non-generic member declaration requires a generic context";
"where_nongeneric_toplevel" = "'where' clause cannot be applied to a non-generic top-level declaration";
"unable_to_convert_generic_swift_types" = "could not generate C++ types from the generic Swift types provided; the following Swift type(s) provided to '%0' could not be converted: %1";
"unable_to_substitute_cxx_function_template" = "could not substitute parameters for C++ function template '%0': %1";
"type_alias_underlying_type_access" = "type alias %select{must be declared %select{%select{private|fileprivate|internal|package|%error|%error}1|private or fileprivate}3|cannot be declared %select{in this context|fileprivate|internal|package|public|open}1}0 because its underlying type uses %select{a private|a fileprivate|an internal|a package|%error|%error}2 type";
"type_alias_underlying_type_access_warn" = "type alias %select{should be declared %select{private|fileprivate|internal|package|%error|%error}1|should not be declared %select{in this context|fileprivate|internal|package|public|open}1}0 because its underlying type uses %select{a private|a fileprivate|an internal|a package|%error|%error}2 type";
"type_alias_underlying_type_not_usable_from_inline" = "type referenced from the underlying type of a '@usableFromInline' type alias must be '@usableFromInline' or public";
"type_alias_underlying_type_not_usable_from_inline_warn" = "type referenced from the underlying type of a '@usableFromInline' type alias should be '@usableFromInline' or public";
"subscript_type_access" = "subscript %select{must be declared %select{private|fileprivate|internal|package|%error|%error}1|cannot be declared %select{in this context|fileprivate|internal|package|public|open}1}0 because its %select{index|element type}3 uses %select{a private|a fileprivate|an internal|a package|%error|%error}2 type";
"subscript_type_access_warn" = "subscript %select{should be declared %select{private|fileprivate|internal|package|%error|%error}1|should not be declared %select{in this context|fileprivate|internal|package|public|open}1}0 because its %select{index|element type}3 uses %select{a private|a fileprivate|an internal|a package|%error|%error}2 type";
"subscript_type_usable_from_inline" = "%select{index type|element type}0 of a '@usableFromInline' subscript must be '@usableFromInline' or public";
"subscript_type_usable_from_inline_warn" = "%select{index type|element type}0 of a '@usableFromInline' subscript should be '@usableFromInline' or public";
"function_type_access" = "%select{function|method|initializer}4 %select{must be declared %select{%select{private|fileprivate|internal|package|%error|%error}1|private or fileprivate}2|cannot be declared %select{in this context|fileprivate|internal|package|public|open}1}0 because its %select{parameter|thrown error|result}5 uses %select{a private|a fileprivate|an internal|a package|an '@_spi'|an '@_spi'}3%select{| API wrapper}6 type";
"function_type_spi" = "%select{function|method|initializer}0 cannot be declared '@_spi' because its %select{parameter|result}1 uses %select{a private|a fileprivate|an internal|a package|a public|an open}2 type%select{| that is not '@_spi'}3";
"function_type_access_warn" = "%select{function|method|initializer}4 %select{should be declared %select{private|fileprivate|internal|package|%error|%error}1|should not be declared %select{in this context|fileprivate|internal|package|public|open}1}0 because its %select{parameter|thrown error|result}5 uses %select{a private|a fileprivate|an internal|a package|%error|%error}3 %select{|API wrapper}6 type";
"function_type_usable_from_inline" = "the %select{parameter|result}1%select{| API wrapper}2 of a '@usableFromInline' %select{function|method|initializer}0 must be '@usableFromInline' or public";
"function_type_usable_from_inline_warn" = "the %select{parameter|result}1%select{| API wrapper}2 of a '@usableFromInline' %select{function|method|initializer}0 should be '@usableFromInline' or public";
"spi_attribute_on_non_public" = "%select{private|fileprivate|internal|package|%error|%error}0 %1 cannot be declared '@_spi' because only public and open declarations can be '@_spi'";
"spi_attribute_on_protocol_requirement" = "protocol requirement %0 cannot be declared '@_spi' without a default implementation in a protocol extension";
"spi_attribute_on_frozen_stored_properties" = "stored property %0 cannot be declared '@_spi' in a '@frozen' struct";
"spi_attribute_on_frozen_enum_case" = "%kind0 cannot be declared '@_spi' in a '@frozen' enum";
"spi_attribute_on_import_of_public_module" = "'@_spi' import of %0 will not include any SPI symbols; %0 was built from the public interface at %1";
"spi_only_imports_not_enabled" = "'@_spiOnly' requires setting the frontend flag '-experimental-spi-only-imports'";
"access_level_on_import_unsupported" = "The access level %0 is unsupported on imports: only 'public', 'package', 'internal', 'fileprivate' and 'private' are accepted";
"access_level_conflict_with_exported" = "'%0' is incompatible with %1; it can only be applied to public imports";
"module_imported_here" = "module %0 imported as '%select{private|fileprivate|internal|package|%ERROR|%ERROR}1' here";
"decl_import_via_here" = "%kind0 imported as '%select{private|fileprivate|internal|package|%ERROR|%ERROR}1' from %2 here";
"decl_import_via_local" = "%kind0 is imported by this file as '%select{private|fileprivate|internal|package|%ERROR|%ERROR}1' from %2";
"opaque_type_invalid_constraint" = "a 'some' type must specify only 'Any', 'AnyObject', protocols, and/or a base class";
"opaque_of_optional_rewrite" = "did you mean to write an optional of an 'some' type?";
"inferred_opaque_type" = "property definition has inferred type %0, involving the 'some' return type of another declaration";
"inverse_type_not_invertible" = "type %0 cannot be suppressed";
"non_nominal_extension" = "non-nominal type %0 cannot be extended";
"composition_in_extended_type" = "extending a protocol composition is not supported; extending %0 instead";
"composition_in_extended_type_alternative" = "did you mean to extend the most specific type %0 instead?";
"extension_access_with_conformances" = "%0 modifier cannot be used with extensions that declare protocol conformances";
"experimental_tuple_extension" = "tuple extensions are experimental";
"tuple_extension_wrong_type" = "tuple extension must be written as extension of %0";
"tuple_extension_one_conformance" = "tuple extension must declare conformance to exactly one protocol";
"tuple_extension_extra_requirement" = "tuple extension cannot require that %0 %select{conforms to|subclasses|is the same type as|%error|%error}1 %2";
"tuple_extension_missing_requirement" = "tuple extension must require that %0 conforms to %1";
"tuple_extension_nested_type" = "type %0 cannot be nested in tuple extension";
"extension_metatype" = "cannot extend a metatype %0";
"extension_placeholder" = "cannot extend a type that contains placeholders";
"extension_stored_property" = "extensions must not contain stored properties";
"extension_stored_property_fixit" = "Remove '=' to make %0 a computed property";
"extension_nongeneric_trailing_where" = "trailing 'where' clause for extension of non-generic type %0";
"extension_protocol_inheritance" = "extension of protocol %0 cannot have an inheritance clause";
"objc_generic_extension_using_type_parameter" = "extension of a generic Objective-C class cannot access the class's generic parameters at runtime";
"objc_generic_extension_using_type_parameter_here" = "generic parameter used here";
"objc_generic_extension_using_type_parameter_try_objc" = "add '@objc' to allow uses of 'self' within the function body";
"unsupported_existential_extension" = "extension of existential type %0 is not supported";
"invalid_nominal_extension" = "extension of type %0 must be declared as an extension of %1";
"invalid_extension_rewrite" = "did you mean to extend %0 instead?";
"cannot_extend_nominal" = "cannot extend %kind0";
"retroactive_not_in_extension_inheritance_clause" = "'retroactive' attribute only applies in inheritance clauses in extensions";
"retroactive_attr_does_not_apply" = "'retroactive' attribute does not apply; %0 is declared in this module";
"extension_retroactive_conformance" = "extension declares a conformance of imported type %0 to imported %select{protocols|protocol}1 %2; this will not behave correctly if the owners of %3 introduce this conformance in the future";
"extension_retroactive_conformance_silence" = "add '@retroactive' to silence this warning";
"type_does_not_conform" = "type %0 does not conform to protocol %1";
"non_final_class_cannot_conform_to_self_same_type" = "non-final class %0 cannot safely conform to protocol %1, which requires that %2 %select{is exactly equal to|inherit from}3 %4";
"cannot_use_nil_with_this_type" = "'nil' cannot be used in context expecting type %0";
"type_cannot_conform_to_nsobject" = "cannot declare conformance to 'NSObjectProtocol' in Swift; %0 should inherit 'NSObject' instead";
"use_of_equal_instead_of_equality" = "use of '=' in a boolean context, did you mean '=='?";
"type_cannot_conform" = "type %0 cannot conform to %1";
"only_concrete_types_conform_to_protocols" = "only concrete types such as structs, enums and classes can conform to protocols";
"nonsendable_function_type" = "a function type must be marked '@Sendable' to conform to 'Sendable'";
"nonsendable_tuple_type" = "a tuple type must be composed of 'Sendable' elements to conform to 'Sendable'";
"non_sendable_nominal" = "%kind0 does not conform to the 'Sendable' protocol";
"add_nominal_sendable_conformance" = "consider making %kind0 conform to the 'Sendable' protocol";
"add_generic_parameter_sendable_conformance" = "consider making generic parameter %0 conform to the 'Sendable' protocol";
"add_predates_concurrency_import" = "add '@preconcurrency' to %select{suppress|treat}0 'Sendable'-related %select{warnings|errors}0 from module %1%select{| as warnings}0";
"remove_predates_concurrency_import" = "'@preconcurrency' attribute on module %0 has no effect";
"add_preconcurrency_to_conformance" = "add '@preconcurrency' to the %0 conformance to defer isolation checking to run time";
"remove_public_import" = "public import of %0 was not used in public declarations or inlinable code";
"remove_package_import" = "package import of %0 was not used in package declarations";
"public_decl_needs_sendable" = "public %kind0 does not specify whether it is 'Sendable' or not";
"explicit_unchecked_sendable" = "add '@unchecked Sendable' conformance to %kind0 if this type manually implements concurrency safety";
"explicit_disable_sendable" = "make %kind0 explicitly non-Sendable to suppress this warning";
"required_by_opaque_return" = "required by opaque return type of %kind0";
"required_by_decl" = "required by %kind0 where %1 = %2";
"required_by_decl_ref" = "required by referencing %kind0 on %1 where %2 = %3";
"protocol_does_not_conform_static" = "%0 cannot be used as a type conforming to protocol %1 because %1 has static requirements";
"protocol_derivation_is_broken" = "protocol %0 is broken; cannot derive conformance for type %1";
"type_does_not_inherit" = "%0 requires that %1 inherit from %2";
"type_does_not_inherit_or_conform_requirement" = "requirement specified as %0 : %1%2";
"types_not_equal" = "%0 requires the types %1 and %2 be equivalent";
"types_not_same_shape" = "%0 requires the type packs %1 and %2 have the same shape";
"type_does_not_conform_owner" = "%0 requires that %1 conform to %2";
"type_does_not_conform_in_decl_ref" = "referencing %kind0 on %1 requires that %2 conform to %3";
"contextual_member_ref_on_protocol_requires_self_requirement" = "contextual member reference to %kind0 requires 'Self' constraint in the protocol extension";
"missing_sametype_requirement_on_self" = "missing same-type requirement on 'Self'";
"type_does_not_conform_anyobject_in_decl_ref" = "referencing %kind0 on %1 requires that %2 be a class type";
"type_does_not_conform_decl_owner" = "%kind0 requires that %1 conform to %2";
"type_does_not_conform_anyobject_decl_owner" = "%kind0 requires that %1 be a class type";
"type_does_not_conform_in_opaque_return" = "return type of %kind0 requires that %1 %select{conform to %2|be a class type}3";
"type_is_not_equal_in_opaque_return" = "return type of %kind0 requires the types %1 and %2 be equivalent";
"types_not_inherited_in_opaque_return" = "return type of %kind0 requires that %1 inherit from %2";
"types_not_equal_decl" = "%kind0 requires the types %1 and %2 be equivalent";
"types_not_equal_in_decl_ref" = "referencing %kind0 on %1 requires the types %2 and %3 be equivalent";
"types_not_same_shape_decl" = "%kind0 requires the type packs %1 and %2 have the same shape";
"types_not_same_shape_in_decl_ref" = "referencing %kind0 on %1 requires the type packs %2 and %3 have the same shape";
"types_not_inherited_decl" = "%kind0 requires that %1 inherit from %2";
"types_not_inherited_in_decl_ref" = "referencing %kind0 on %1 requires that %2 inherit from %3";
"where_requirement_failure_one_subst" = "where %0 = %1";
"where_requirement_failure_both_subst" = "where %0 = %1, %2 = %3";
"requirement_implied_by_conditional_conformance" = "requirement from conditional conformance of %0 to %1";
"wrapped_type_satisfies_requirement" = "wrapped type %0 satisfies this requirement; did you mean to unwrap?";
"candidate_types_conformance_requirement" = "candidate requires that %0 conform to %1 (requirement specified as %2 : %3)";
"candidate_types_equal_requirement" = "candidate requires that the types %0 and %1 be equivalent (requirement specified as %2 == %3)";
"candidate_types_same_shape_requirement" = "candidate requires that the type packs %0 and %1 have the same shape (same-shape requirement inferred between %2 and %3)";
"candidate_types_inheritance_requirement" = "candidate requires that %1 inherit from %2 (requirement specified as %2 : %3)";
"same_shape_requirement" = "same-shape requirement inferred between %0 and %1%2";
"types_not_equal_requirement" = "requirement specified as %0 == %1%2";
"type_is_not_a_class" = "%0 requires that %1 be a class type";
"anyobject_requirement" = "requirement specified as %0 : 'AnyObject'%2";
"non_class_cannot_conform_to_class_protocol" = "non-class type %0 cannot conform to class protocol %1";
"cf_class_cannot_conform_to_objc_protocol" = "Core Foundation class %0 cannot conform to @objc protocol %1 because Core Foundation types are not classes in Objective-C";
"objc_runtime_visible_cannot_conform_to_objc_protocol" = "class %0 cannot conform to @objc protocol %1 because the class is only visible via the Objective-C runtime";
"objc_generics_cannot_conditionally_conform" = "type %0 cannot conditionally conform to protocol %1 because the type uses the Objective-C generics model";
"objc_protocol_cannot_have_conditional_conformance" = "type %0 cannot conditionally conform to @objc protocol %1 because Objective-C does not support conditional conformances";
"objc_protocol_in_generic_extension" = "conformance of %select{class from generic context|generic class}0 %1 to @objc protocol %2 cannot be in an extension";
"conditional_conformances_cannot_imply_conformances" = "conditional conformance of type %0 to protocol %1 does not imply conformance to inherited protocol %2";
"note_explicitly_state_conditional_conformance_different" = "did you mean to explicitly state the conformance with different bounds?";
"note_explicitly_state_conditional_conformance_relaxed" = "did you mean to explicitly state the conformance with relaxed bounds?";
"note_explicitly_state_conditional_conformance_same" = "did you mean to explicitly state the conformance with the same bounds?";
"note_explicitly_state_conditional_conformance_noneditor" = "did you mean to explicitly state the conformance like '%0where ...'?";
"protocol_has_missing_requirements" = "type %0 cannot conform to protocol %1 because it has requirements that cannot be satisfied";
"protocol_has_missing_requirements_versioned" = "type %0 cannot conform to protocol %1 (compiled with Swift %2) because it has requirements that could not be loaded in Swift %3";
"requirement_restricts_self" = "%kindonly0 requirement %0 cannot add constraint '%1%select{:|:| ==|:| has same shape as}2 %3' on 'Self'";
"witness_argument_name_mismatch" = "%kind0 has different argument labels from those required by protocol %1 (%2)";
"witness_initializer_not_required" = "initializer requirement %0 can only be satisfied by a 'required' initializer in%select{| the definition of}1 non-final class %2";
"witness_initializer_failability" = "non-failable initializer requirement %0%select{| in Objective-C protocol}1 cannot be satisfied by a failable initializer ('init%select{?|!}1')";
"witness_self_non_subtype" = "protocol %0 requirement %1 cannot be satisfied by a non-final class (%2) because it uses 'Self' in a non-parameter, non-result type position";
"witness_self_same_type" = "%kind0 in non-final class %1 cannot be used to satisfy requirement %kind2 (in protocol %3) due to same-type requirement involving 'Self'";
"witness_self_weaken_same_type" = "consider weakening the same-type requirement %0 == %1 to a superclass requirement";
"witness_requires_dynamic_self" = "%select{%error|method|property|subscript}0 %1 in non-final class %2 must %select{%error|return|specify type|return}0 'Self' to conform to protocol %3";
"witness_requires_class_implementation" = "%select{%error|method|%error|subscript}0 %1 in non-final class %2 cannot be implemented in a protocol extension because it returns 'Self' and has associated type requirements";
"witness_not_accessible_proto" = "%select{initializer %1|method %1|%select{|setter for }2property %1|subscript%select{| setter}2}0 must be declared %select{%error|fileprivate|internal|package|public|%error}3 because it matches a requirement in %select{private|fileprivate|internal|package|public|%error}4 protocol %5";
"witness_not_as_sendable" = "sendability of function types in %kind0 does not match requirement in protocol %1";
"less_sendable_reqt_here" = "expected sendability to match requirement here";
"witness_not_accessible_type" = "%select{initializer %1|method %1|%select{|setter for }2property %1|subscript%select{| setter}2}0 must be as accessible as its enclosing type because it matches a requirement in protocol %5";
"type_witness_not_accessible_proto" = "%kind0 must be declared %select{%error|fileprivate|internal|package|public|%error}1 because it matches a requirement in %select{%error|fileprivate|internal|package|public|%error}1 protocol %2";
"type_witness_not_accessible_type" = "%kind0 must be as accessible as its enclosing type because it matches a requirement in protocol %2";
"witness_not_usable_from_inline" = "%kind0 must be declared '@usableFromInline' because it matches a requirement in protocol %1";
"type_witness_objc_generic_parameter" = "type %0 involving Objective-C type parameter%select{| %1}2 cannot be used for associated type %3 of protocol %4";
"witness_fix_access" = "mark the %0 as '%select{%error|fileprivate|internal|package|public|%error}1' to satisfy the requirement";
"witness_move_to_another_extension" = "move the %0 to another extension where it can be declared '%select{%error|%error|internal|package|public|%error}1' to satisfy the requirement";
"assoc_type_default_conformance_failed" = "default type %0 for associated type %1 does not satisfy constraint %2: %3";
"assoc_type_default_here" = "associated type %0 has default type %1 written here";
"protocol_access" = "%select{protocol must be declared %select{%select{private|fileprivate|internal|package|%error|%error}1|private or fileprivate}4 because %select{it refines|its 'where' clause uses}2|%select{in this context|fileprivate|internal|package|public|%error}1 %select{protocol cannot refine|protocol's 'where' clause cannot use}2}0 %select{a private|a fileprivate|an internal|a package|%error|%error}3 %5";
"protocol_access_warn" = "%select{protocol should be declared %select{private|fileprivate|internal|package|%error|%error}1 because %select{it refines|its 'where' clause uses}2|%select{in this context|fileprivate|internal|package|public|%error}1 %select{protocol should not refine|protocol's 'where' clause should not use}2}0 %select{a private|a fileprivate|an internal|a package|%error|%error}3 %5";
"protocol_usable_from_inline" = "protocol %select{refined|used}0 by '@usableFromInline' protocol must be '@usableFromInline' or public";
"protocol_usable_from_inline_warn" = "protocol %select{refined|used}0 by '@usableFromInline' protocol should be '@usableFromInline' or public";
"protocol_property_must_be_computed_var" = "protocols cannot require properties to be immutable; declare read-only properties by using 'var' with a '{ get }' specifier";
"protocol_property_must_be_computed" = "property in protocol must have explicit { get } or { get set } specifier";
"inherited_protocol_does_not_conform" = "type %0 does not conform to inherited protocol %1";
"no_witnesses" = "protocol requires %select{initializer %1|function %1|property %1|subscript}0 with type %2%select{|; add a stub for conformance}3";
"missing_witnesses_general" = "add stubs for conformance";
"ambiguous_witnesses" = "multiple matching %select{initializers named %1|functions named %1|properties named %1|subscript operators}0 with type %2";
"ambiguous_witnesses_wrong_name" = "multiple matching %select{initializers named %1|functions named %1|properties named %1|subscript operators}0 with type %2";
"no_witnesses_type" = "protocol requires nested type %0; add nested type %0 for conformance";
"no_witnesses_type_tuple" = "protocol requires nested type %0; add type alias %0 with underlying type %1 for conformance";
"default_associated_type_unsatisfied_conformance" = "default type %0 for associated type %1 (from protocol %2) does not conform to %3";
"default_associated_type_unsatisfied_superclass" = "default type %0 for associated type %1 (from protocol %2) does not inherit from %3";
"associated_type_access" = "associated type in %select{a private|a fileprivate|an internal|a package|a public|%error}0 protocol uses %select{a private|a fileprivate|an internal|a package|%error|%error}1 type in its %select{default definition|requirement}2 ";
"associated_type_access_warn" = "associated type in %select{a private|a fileprivate|an internal|a package|a public|%error}0 protocol uses %select{a private|a fileprivate|an internal|a package|%error|%error}1 type in its %select{default definition|requirement}2 ";
"associated_type_not_usable_from_inline" = "type referenced from a %select{default definition|requirement}0 of an associated type in a '@usableFromInline' protocol must be '@usableFromInline' or public";
"associated_type_not_usable_from_inline_warn" = "type referenced from a %select{default definition|requirement}0 of an associated type in a '@usableFromInline' protocol should be '@usableFromInline' or public";
"bad_associated_type_deduction" = "unable to infer associated type %0 for protocol %1";
"associated_type_deduction_unsatisfied_conformance" = "candidate would match and infer %0 = %1 if %1 conformed to %2";
"associated_type_deduction_unsatisfied_superclass" = "candidate would match and infer %0 = %1 if %1 inherited from %2";
"associated_type_witness_conform_impossible" = "candidate can not infer %0 = %1 because %1 is not a nominal type and so can't conform to %2";
"suggest_opaque_type_witness" = "cannot infer %0 = %1 because %1 as a type cannot conform to protocols; did you mean to use an opaque result type?";
"associated_type_witness_inherit_impossible" = "candidate can not infer %0 = %1 because %1 is not a class type and so can't inherit from %2";
"ambiguous_associated_type_deduction" = "ambiguous inference of associated type %0: %1 vs. %2";
"associated_type_deduction_witness" = "matching requirement %0 to this declaration inferred associated type to %1";
"associated_type_deduction_default" = "using associated type default %0";
"ambiguous_witnesses_type" = "multiple matching types named %0";
"protocol_witness_exact_match" = "candidate exactly matches%0";
"protocol_witness_non_sendable" = "candidate matches except for closure sendability%0%select{; this will be an error in Swift 6|}1";
"protocol_witness_renamed" = "rename to %0 to satisfy this requirement%1";
"protocol_witness_kind_conflict" = "candidate is not %select{an initializer|a function|a variable|a subscript}0";
"protocol_witness_type_conflict" = "candidate has non-matching type %0%1";
"protocol_witness_missing_requirement" = "candidate would match if %0 %select{conformed to|subclassed|was the same type as|%error|%error}2 %1";
"protocol_type_witness_missing_requirement" = "candidate would match if the conformance required that %0 %select{conformed to|subclassed|was the same type as|%error|%error}2 %1";
"protocol_witness_optionality_conflict" = "candidate %select{type has|result type has|parameter type has|parameter types have|result and parameter types have}0 incorrect optionality%1";
"err_protocol_witness_optionality" = "%select{type|result|parameter|parameters|result and parameters}0 of %1 %select{has|has|has|have|have|}0 different optionality than required by protocol %2";
"warn_protocol_witness_optionality" = "%select{type|result|parameter|parameters|result and parameters}0 of %1 %select{has|has|has|have|have|}0 different optionality than expected by protocol %2";
"protocol_witness_static_conflict" = "candidate operates on %select{a type|an instance}0, not %select{an instance|a type}0 as required";
"protocol_witness_const_conflict" = "candidate operates as %select{const|non-const}0, not %select{non-const|const}0 as required";
"protocol_witness_prefix_postfix_conflict" = "candidate is %select{|prefix, |postfix, }1not %select{prefix|postfix}0 as required";
"protocol_witness_mutation_modifier_conflict" = "candidate is marked %0 but protocol does not allow it";
"protocol_witness_settable_conflict" = "candidate is not settable, but protocol requires it";
"protocol_witness_rethrows_conflict" = "candidate is not 'rethrows', but protocol requires it";
"protocol_witness_rethrows_by_conformance_conflict" = "candidate is 'rethrows' via a conformance, but the protocol requirement is not from a '@rethrows' protocol";
"protocol_witness_throws_conflict" = "candidate throws, but protocol does not allow it";
"protocol_witness_not_objc" = "candidate is explicitly '@nonobjc'";
"protocol_witness_enum_case_payload" = "candidate is an enum case with associated values, but protocol does not allow it";
"protocol_witness_type" = "possibly intended match";
"protocol_type_witness_unsatisfied_conformance" = "possibly intended match %0 does not conform to %1";
"protocol_type_witness_unsatisfied_superclass" = "possibly intended match %0 does not inherit from %1";
"protocol_type_witness_tuple" = "possibly intended match %0 is unsuitable for tuple conformance; the associated type requirement must be fulfilled by a type alias with underlying type %1";
"protocol_witness_circularity" = "candidate references itself";
"protocol_conformance_here" = "%select{|class }0%1 declares conformance to protocol %2 here";
"declared_protocol_conformance_here" = "%select{%0 inherits conformance to protocol %2 from superclass|%0 declares conformance to protocol %2|%0 implicitly conforms to protocol %2 (via conformance to %3)|%0 implicitly conforms to protocol %2 |conformance to %2 generated by macro }1 here";
"witness_unavailable" = "unavailable %kind0 was used to satisfy a requirement of protocol %1%select{|: %2}2";
"witness_deprecated" = "deprecated default implementation is used to satisfy %kind0 required by protocol %1%select{|: %2}2";
"redundant_conformance" = "redundant conformance of %0 to protocol %1";
"redundant_conformance_conditional" = "conflicting conformance of %0 to protocol %1; there cannot be more than one conformance, even with different conditional bounds";
"redundant_conformance_adhoc" = "conformance of %0 to protocol %1 was already stated in %select{the protocol's|the type's}2 module %3";
"redundant_conformance_adhoc_conditional" = "conformance of %0 to protocol %1 conflicts with that stated in %select{the protocol's|the type's}2 module %3 and will be ignored; there cannot be more than one conformance, even with different conditional bounds";
"redundant_conformance_witness_ignored" = "%kind0 will not be used to satisfy the conformance to %1";
"req_near_match" = "%kind0 nearly matches %select{defaulted|optional}1 requirement %2 of protocol %3";
"optional_req_nonobjc_near_match_add_objc" = "add '@objc' to provide an Objective-C entrypoint";
"req_near_match_move" = "move %0 to %select{an|another}1 extension to silence this warning";
"req_near_match_nonobjc" = "add '@nonobjc' to silence this %select{warning|error}0";
"req_near_match_access" = "make %0 %select{ERROR|private|private|non-public|non-public}1 to silence this warning";
"missing_append_interpolation" = "type conforming to 'StringInterpolationProtocol' does not implement a valid 'appendInterpolation' method";
"append_interpolation_static" = "'appendInterpolation' method will never be used because it is static";
"append_interpolation_void_or_discardable" = "'appendInterpolation' method does not return 'Void' or have a discardable result";
"append_interpolation_access_control" = "'appendInterpolation' method is %select{private|fileprivate|internal|package|public|open}0, but %1 is %select{private|fileprivate|internal|package|public|open}2";
"assoc_type_outside_of_protocol" = "cannot access associated type %0 from %1; use a concrete type or generic parameter base instead";
"typealias_outside_of_protocol" = "cannot access type alias %0 from %1; use a concrete type or generic parameter base instead";
"objc_protocol_inherits_non_objc_protocol" = "@objc protocol %0 cannot refine non-@objc protocol %1";
"protocol_where_clause_self_requirement" = "constraint with subject type of 'Self' is not supported; consider adding requirement to protocol inheritance clause instead";
"invalid_protocol_composition_member" = "non-protocol, non-class type %0 cannot be used within a protocol-constrained type";
"protocol_composition_one_class" = "protocol-constrained type cannot contain class %0 because it already contains class %1";
"requires_conformance_nonprotocol" = "type %0 constrained to non-protocol, non-class type %1";
"requires_conformance_nonprotocol_fixit" = "use '%0 == %1' to require '%0' to be '%1'";
"requires_not_suitable_archetype" = "type %0 in conformance requirement does not refer to a generic parameter or associated type";
"requires_not_suitable_inverse_subject" = "cannot suppress '~%1' on type %0";
"requires_not_suitable_inverse_outer_subject" = "cannot suppress '~%1' on generic parameter '%0' defined in outer scope";
"invalid_shape_requirement" = "invalid same-shape requirement between %0 and %1";
"unsupported_same_element" = "same-element requirements are not yet supported";
"requires_generic_params_made_equal" = "same-type requirement makes generic parameters %0 and %1 equivalent";
"requires_generic_param_made_equal_to_concrete" = "same-type requirement makes generic parameter %0 non-generic";
"shadowed_generic_param" = "generic parameter %0 shadows generic parameter from outer scope with the same name";
"recursive_decl_reference" = "%kind0 references itself";
"recursive_generic_signature" = "%kind0 has self-referential generic requirements";
"recursive_generic_signature_extension" = "extension of %kind0 has self-referential generic requirements";
"recursive_same_type_constraint" = "same-type constraint %0 == %1 is recursive";
"recursive_superclass_constraint" = "superclass constraint %0 : %1 is recursive";
"requires_same_concrete_type" = "generic signature requires types %0 and %1 to be the same";
"missing_protocol_refinement" = "protocol %0 should be declared to refine %1 due to a same-type constraint on 'Self'";
"requirement_conflict" = "no type for %0 can satisfy both %1";
"conflicting_superclass_constraints" = "type %0 cannot be a subclass of both %1 and %2";
"redundant_same_type_constraint" = "redundant same-type constraint %0 == %1";
"inherited_associated_type_redecl" = "redeclaration of associated type %0 from protocol %1 is better expressed as a 'where' clause on the protocol";
"typealias_override_associated_type" = "typealias overriding associated type %0 from protocol %1 is better expressed as same-type constraint on the protocol";
"associated_type_override_typealias" = "associated type %0 is redundant with type %0 declared in inherited %1 %2";
"requirement_machine_completion_failed" = "cannot build rewrite system for %select{generic signature|protocol}0; %select{%error|rule count|rule length|concrete nesting}1 limit exceeded";
"requirement_machine_completion_rule" = "failed rewrite rule is %0";
"associated_type_objc" = "associated type %0 cannot be declared inside '@objc' protocol %1";
"generic_param_access" = "%0 %select{must be declared %select{%select{private|fileprivate|internal|package|%error|%error}3|private or fileprivate}4|cannot be declared %select{in this context|fileprivate|internal|package|public|open}2}1 because its generic %select{parameter|requirement}5 uses %select{a private|a fileprivate|an internal|a package|an '@_spi'|an '@_spi'}3 type";
"generic_param_access_warn" = "%0 %select{should be declared %select{private|fileprivate|internal|package|%error|%error}3|should not be declared %select{in this context|fileprivate|internal|package|public|open}2}1 because its generic %select{parameter|requirement}5 uses %select{a private|a fileprivate|an internal|a package|an '@_spi'|an '@_spi'}3 type";
"generic_param_usable_from_inline" = "type referenced from a generic %select{parameter|requirement}1 of a '@usableFromInline' %0 must be '@usableFromInline' or public";
"generic_param_usable_from_inline_warn" = "type referenced from a generic %select{parameter|requirement}1 of a '@usableFromInline' %0 should be '@usableFromInline' or public";
"override_multiple_decls_base" = "declaration %0 cannot override more than one superclass declaration";
"override_sendability_mismatch" = "declaration %0 has a type with different sendability from any potential overrides";
"override_multiple_decls_arg_mismatch" = "declaration %0 has different argument labels from any potential overrides";
"overridden_near_match_here" = "potential overridden %kind0 here";
"override_decl_extension" = "%select{|non-@objc}0 %kind2 %select{is declared in extension of %3 and cannot be overridden|declared in %3 cannot be overridden from extension}1";
"overridden_here" = "overridden declaration is here";
"overridden_here_can_be_objc" = "add '@objc' to make this declaration overridable";
"missing_override" = "overriding declaration requires an 'override' keyword";
"missing_override_warn" = "implicit override should be marked with 'override' or suppressed with '@_nonoverride'";
"multiple_override" = "%0 has already been overridden";
"multiple_override_prev" = "%0 previously overridden here";
"override_unavailable" = "cannot override %0 which has been marked unavailable%select{|: %1}1";
"suggest_removing_override" = "remove 'override' modifier to declare a new %0";
"override_less_available" = "overriding %base0 must be as available as declaration it overrides";
"override_let_property" = "cannot override immutable 'let' property %0 with the getter of a 'var'";
"override_not_accessible" = "%select{|setter of }0overriding %1 must be as accessible as %select{its enclosing type|the declaration it overrides}2";
"override_of_non_open" = "overriding non-open %0 outside of its defining module";
"method_does_not_override" = "method does not override any method from its %select{parent protocol|superclass}0";
"property_does_not_override" = "property does not override any property from its %select{parent protocol|superclass}0";
"subscript_does_not_override" = "subscript does not override any subscript from its %select{parent protocol|superclass}0";
"initializer_does_not_override" = "initializer does not override a designated initializer from its %select{parent protocol|superclass}0";
"failable_initializer_override" = "failable initializer %0 cannot override a non-failable initializer";
"nonfailable_initializer_override_here" = "non-failable initializer %0 overridden here";
"property_override_here" = "attempt to override property here";
"subscript_override_here" = "attempt to override subscript here";
"convenience_init_override_here" = "attempt to override convenience initializer here";
"override_type_mismatch_with_fixits" = "type does not match superclass %0 with type %1";
"override_type_mismatch_with_fixits_init" = "type does not match superclass initializer with %select{no arguments|argument %1|arguments %1}0";
"override_nonclass_decl" = "'override' can only be specified on class members";
"nonoverride_wrong_decl_context" = "'@_nonoverride' can only be specified on class or protocol members";
"nonoverride_and_override_attr" = "'override' cannot be combined with '@_nonoverride'";
"override_property_type_mismatch" = "property %0 with type %1 cannot override a property with type %2";
"override_with_stored_property" = "cannot override with a stored property %0";
"override_with_stored_property_warn" = "cannot override with a stored property %0";
"observing_readonly_property" = "cannot observe read-only property %0; it can't change";
"override_mutable_with_readonly_property" = "cannot override mutable property with read-only property %0";
"override_argument_name_mismatch" = "argument labels for %select{method|initializer}0 %1 do not match those of overridden %select{method|initializer}0 %2";
"override_ownership_mismatch" = "cannot override %0 property with %1 property";
"override_dynamic_self_mismatch" = "cannot override a Self return type with a non-Self return type";
"override_class_declaration_in_extension" = "cannot override a non-dynamic class declaration from an extension";
"override_with_more_effects" = "cannot override non-%1 %0 with %1 %0";
"override_typed_throws" = "%0 that throws %1 cannot override one that throws %2";
"override_throws_objc" = "overriding a throwing @objc %select{method|initializer}0 with a non-throwing %select{method|initializer}0 is not supported";
"satisfy_throws_objc" = "satisfying a throwing @objc %select{method|initializer}0 with a non-throwing %select{method|initializer}0 is not supported";
"override_optional_mismatch" = "cannot override %0 %select{parameter|index}1 of type %2 with non-optional type %3";
"override_optional_result_mismatch" = "cannot override %0 %select{result|element}1 type %2 with optional type %3";
"override_unnecessary_IUO" = "overriding %0 parameter of type %1 with implicitly unwrapped optional type %2";
"override_unnecessary_result_IUO" = "overriding %0 optional result type %1 with implicitly unwrapped optional type %2";
"override_unnecessary_IUO_remove" = "remove '!' to make the parameter required";
"override_unnecessary_IUO_use_strict" = "use '?' to make the result optional";
"override_unnecessary_IUO_silence" = "add parentheses to silence this warning";
"override_mutable_covariant_property" = "cannot override mutable property %0 of type %1 with covariant type %2";
"override_mutable_covariant_subscript" = "cannot override mutable subscript of type %0 with covariant type %1";
"static_decl_already_final" = "static declarations are already final";
"open_decl_cannot_be_final" = "%0 cannot be declared both 'final' and 'open'";
"implicitly_final_cannot_be_open" = "%select{'let' properties|members of 'final' classes|static declarations}0 are implicitly 'final'; use 'public' instead of 'open'";
"implicitly_final_cannot_be_open_swift4" = "%select{'let' properties|members of 'final' classes|static declarations}0 are implicitly 'final'; use 'public' instead of 'open'";
"duplicate_inheritance" = "duplicate inheritance from %0";
"duplicate_anyobject_class_inheritance" = "redundant inheritance from 'AnyObject' and Swift 3 'class' keyword";
"inheritance_from_protocol_with_superclass" = "inheritance from class-constrained protocol composition type %0";
"anyobject_class_inheritance_deprecated" = "using 'class' keyword to define a class-constrained protocol is deprecated; use 'AnyObject' instead";
"multiple_inheritance" = "multiple inheritance from classes %0 and %1";
"inheritance_from_non_protocol_or_class" = "inheritance from non-protocol, non-class type %0";
"inheritance_from_non_protocol" = "inheritance from non-protocol type %0";
"inheritance_from_anyobject" = "only protocols can inherit from 'AnyObject'";
"inheritance_from_parameterized_protocol" = "cannot inherit from protocol type with generic argument %0";
"superclass_not_first" = "superclass %0 must appear first in the inheritance clause";
"superclass_not_open" = "cannot inherit from non-open class %0 outside of its defining module";
"superclass_here" = "superclass is declared here";
"superclass_of_open_not_open" = "superclass %0 of open class must be open";
"inheritance_from_final_class" = "inheritance from a final class %0";
"inheritance_from_unspecialized_objc_generic_class" = "inheritance from a generic Objective-C class %0 must bind type parameters of %0 to specific concrete types";
"inheritance_from_class_with_missing_vtable_entries" = "cannot inherit from class %0 because it has overridable members that could not be loaded";
"inheritance_from_class_with_missing_vtable_entry" = "could not deserialize %0";
"inheritance_from_class_with_missing_vtable_entries_versioned" = "cannot inherit from class %0 (compiled with Swift %1) because it has overridable members that could not be loaded in Swift %2";
"inheritance_from_cf_class" = "cannot inherit from Core Foundation type %0";
"inheritance_from_objc_runtime_visible_class" = "cannot inherit from class %0 because it is only visible via the Objective-C runtime";
"enum_case_access" = "enum case in %select{a private|a fileprivate|an internal|a package|a public|%error}0 enum uses %select{a private|a fileprivate|an internal|a package|%error|%error}1 type";
"enum_case_access_warn" = "enum case in %select{a private|a fileprivate|an internal|a package|a public|%error}0 enum uses %select{a private|a fileprivate|an internal|a package|%error|%error}1 type";
"enum_case_usable_from_inline" = "type of enum case in '@usableFromInline' enum must be '@usableFromInline' or public";
"enum_case_usable_from_inline_warn" = "type of enum case in '@usableFromInline' enum should be '@usableFromInline' or public";
"enum_stored_property" = "enums must not contain stored properties";
"multiple_enum_raw_types" = "multiple enum raw types %0 and %1";
"raw_type_not_first" = "raw type %0 must appear first in the enum inheritance clause";
"raw_type_not_literal_convertible" = "raw type %0 is not expressible by a string, integer, or floating-point literal";
"enum_raw_type_not_equatable" = "RawRepresentable conformance cannot be synthesized because raw type %0 is not Equatable";
"enum_raw_type_nonconforming_and_nonsynthable" = "%0 declares raw type %1, but does not conform to RawRepresentable and conformance could not be synthesized";
"enum_declares_rawrep_with_raw_type" = "%0 declares raw type %1, which implies RawRepresentable";
"enum_raw_type_nonconforming_and_noncopyable" = "%0 declares raw type %1, but cannot yet conform to RawRepresentable because it is noncopyable";
"enum_raw_type_access" = "enum %select{must be declared %select{%select{private|fileprivate|internal|package|%error|%error}1|private or fileprivate}3|cannot be declared %select{in this context|fileprivate|internal|package|public|open}1}0 because its raw type uses %select{a private|a fileprivate|an internal|a package|%error|%error}2 type";
"enum_raw_type_access_warn" = "enum %select{should be declared %select{private|fileprivate|internal|package|%error|%error}1|should not be declared %select{in this context|fileprivate|internal|package|public|open}1}0 because its raw type uses %select{a private|a fileprivate|an internal|a package|%error|%error}2 type";
"enum_raw_type_not_usable_from_inline" = "type referenced from the raw type of a '@usableFromInline' enum must be '@usableFromInline' or public";
"enum_raw_type_not_usable_from_inline_warn" = "type referenced from the raw type of a '@usableFromInline' enum should be '@usableFromInline' or public";
"empty_enum_raw_type" = "an enum with no cases cannot declare a raw type";
"enum_raw_value_without_raw_type" = "enum case cannot have a raw value if the enum does not have a raw type";
"enum_with_raw_type_case_with_argument" = "enum with raw type cannot have cases with arguments";
"enum_raw_type_here" = "declared raw type %0 here";
"objc_enum_no_raw_type" = "'@objc' enum must declare an integer raw type";
"objc_enum_raw_type_not_integer" = "'@objc' enum raw type %0 is not an integer type";
"enum_non_integer_raw_value_auto_increment" = "enum case must declare a raw value when the preceding raw value is not an integer";
"enum_non_integer_convertible_raw_type_no_value" = "enum cases require explicit raw values when the raw type is not expressible by integer or string literal";
"enum_raw_value_not_unique" = "raw value for enum case is not unique";
"enum_raw_value_magic_literal" = "use of '%0' literal as raw value for enum case is not supported";
"enum_raw_value_used_here" = "raw value previously used here";
"enum_raw_value_incrementing_from_here" = "raw value auto-incremented from here";
"enum_raw_value_incrementing_from_zero" = "raw value implicitly auto-incremented from zero";
"construct_raw_representable_from_unwrapped_value" = "construct %0 from unwrapped %1 value";
"decl_from_hidden_module" = "cannot use %kind0 %select{here|as property wrapper here|as result builder here|in an extension with public or '@usableFromInline' members|in an extension with conditional conformances|in a public or '@usableFromInline' conformance}1; %select{%2 has been imported as implementation-only|it is an SPI imported from %2|it is SPI|%2 was imported for SPI only|%2 was not imported by this file|C++ types from imported module %2 do not support library evolution|%2 was not imported publicly}3";
"typealias_desugars_to_type_from_hidden_module" = "%0 aliases '%1.%2' and cannot be used %select{here|as property wrapper here|as result builder here|in an extension with public or '@usableFromInline' members|in an extension with conditional conformance|in a public or '@usableFromInline' conformance}3 because %select{%4 has been imported as implementation-only|it is an SPI imported from %4|<<ERROR>>|%4 was imported for SPI only|%4 was not imported by this file|C++ types from imported module %4 do not support library evolution|%4 was not imported publicly}5";
"conformance_from_implementation_only_module" = "cannot use conformance of %0 to %1 %select{here|as property wrapper here|as result builder here|in an extension with public or '@usableFromInline' members|in an extension with conditional conformances|<<ERROR>>}2; %select{%3 has been imported as implementation-only|the conformance is declared as SPI in %3|the conformance is declared as SPI|%3 was imported for SPI only|%3 was not imported by this file|C++ types from imported module %3 do not support library evolution|%3 was not imported publicly}4";
"assoc_conformance_from_implementation_only_module" = "in associated type %0 (inferred as %1)";
"unexportable_clang_function_type" = "cannot export the underlying C type of the function type %0; it may use anonymous types or types defined outside of a module";
"cxx_class_instantiation_failed" = "couldn't instantiate a C++ class template";
"warn_implementation_only_conflict" = "%0 inconsistently imported as implementation-only";
"implementation_only_conflict_here" = "imported as implementation-only here";
"spi_only_import_conflict" = "%0 inconsistently imported for SPI only";
"spi_only_import_conflict_here" = "imported for SPI only here";
"error_public_import_of_private_module" = "private module %0 is imported publicly from the public module %1";
"inconsistent_implicit_access_level_on_import" = "ambiguous implicit access level for import of %0; it is imported as '%select{private|fileprivate|internal|package|public|%error}1' elsewhere";
"inconsistent_implicit_access_level_on_import_silence" = "silence these warnings by adopting the upcoming feature 'InternalImportsByDefault'";
"inconsistent_implicit_access_level_on_import_here" = "imported '%select{private|fileprivate|internal|package|public|%error}0' here";
"inconsistent_import_access_levels" = "module %0 is imported as '%select{private|fileprivate|internal|package|public|%error}1' from the same file; this '%select{private|fileprivate|internal|package|public|%error}2' access level will be ignored";
"implementation_only_decl_non_override" = "'@_implementationOnly' can only be used on overrides";
"implementation_only_override_changed_type" = "'@_implementationOnly' override must have the same type as the declaration it overrides (%0)";
"implementation_only_override_without_attr" = "override of '@_implementationOnly' %0 should also be declared '@_implementationOnly'";
"implementation_only_override_import_without_attr" = "override of %0 imported as implementation-only must be declared '@_implementationOnly'";
"import_attr_conflict" = "%0 inconsistently imported with %1";
"import_attr_conflict_here" = "imported with %0 here";
"cannot_synthesize_init_in_extension_of_nonfinal" = "implementation of %0 for non-final class cannot be automatically synthesized in extension because initializer requirement %1 can only be satisfied by a 'required' initializer in the class definition";
"cannot_synthesize_in_crossfile_extension" = "extension outside of file declaring %kind0 prevents automatic synthesis of %1 for protocol %2";
"broken_additive_arithmetic_requirement" = "AdditiveArithmetic protocol is broken: unexpected requirement";
"broken_case_iterable_requirement" = "CaseIterable protocol is broken: unexpected requirement";
"broken_raw_representable_requirement" = "RawRepresentable protocol is broken: unexpected requirement";
"broken_comparable_requirement" = "Comparable protocol is broken: unexpected requirement";
"broken_equatable_requirement" = "Equatable protocol is broken: unexpected requirement";
"broken_hashable_requirement" = "Hashable protocol is broken: unexpected requirement";
"broken_hashable_no_hasher" = "Hashable protocol is broken: Hasher type not found";
"broken_errortype_requirement" = "Error protocol is broken: unexpected requirement";
"broken_int_hashable_conformance" = "Int type is broken: does not conform to Hashable";
"broken_int_integer_literal_convertible_conformance" = "Int type is broken: does not conform to ExpressibleByIntegerLiteral";
"no_less_than_overload_for_int" = "no overload of '<' for Int";
"no_equal_overload_for_int" = "no overload of '==' for Int";
"broken_coding_key_requirement" = "CodingKey protocol is broken: unexpected requirement";
"broken_encodable_requirement" = "Encodable protocol is broken: unexpected requirement";
"broken_decodable_requirement" = "Decodable protocol is broken: unexpected requirement";
"codable_synthesis_empty_enum_not_supported" = "cannot automatically synthesize %0 conformance for empty enum %1";
"broken_differentiable_requirement" = "Differentiable protocol is broken: unexpected requirement";
"differentiable_nondiff_type_implicit_noderivative_fixit" = "stored property %0 has no derivative because %1 does not conform to 'Differentiable'; add an explicit '@noDerivative' attribute%select{|, or conform %2 to 'AdditiveArithmetic'}3";
"differentiable_immutable_wrapper_implicit_noderivative_fixit" = "synthesis of the 'Differentiable.move(by:)' requirement for %1 requires 'wrappedValue' in property wrapper %0 to be mutable or have a non-mutating 'move(by:)'; add an explicit '@noDerivative' attribute%select{|, or conform %1 to 'AdditiveArithmetic'}2";
"differentiable_let_property_implicit_noderivative_fixit" = "synthesis of the 'Differentiable.move(by:)' requirement for %0 requires all stored properties not marked with '@noDerivative' to be mutable or have a non-mutating 'move(by:)'; use 'var' instead, or add an explicit '@noDerivative' attribute %select{|, or conform %0 to 'AdditiveArithmetic'}1";
"codable_extraneous_codingkey_case_here" = "CodingKey case %0 does not match any stored properties";
"codable_non_conforming_property_here" = "cannot automatically synthesize %0 because %1 does not conform to %0";
"codable_non_decoded_property_here" = "cannot automatically synthesize %0 because %1 does not have a matching CodingKey and does not have a default value";
"codable_codingkeys_type_is_not_an_enum_here" = "cannot automatically synthesize %0 because 'CodingKeys' is not an enum";
"codable_codingkeys_type_does_not_conform_here" = "cannot automatically synthesize %0 because 'CodingKeys' does not conform to CodingKey";
"decodable_no_super_init_here" = "cannot automatically synthesize %0 because superclass does not have a callable %1";
"decodable_super_init_not_designated_here" = "cannot automatically synthesize %0 because implementation would need to call %1, which is not designated";
"decodable_inaccessible_super_init_here" = "cannot automatically synthesize %0 because implementation would need to call %1, which is inaccessible due to '%select{private|fileprivate|internal|package|%error|%error}2' protection level";
"decodable_super_init_is_failable_here" = "cannot automatically synthesize %0 because implementation would need to call %1, which is failable";
"decodable_suggest_overriding_init_here" = "did you mean to override 'init(from:)'?";
"codable_suggest_overriding_init_here" = "did you mean to override 'init(from:)' and 'encode(to:)'?";
"codable_enum_duplicate_case_name_here" = "cannot automatically synthesize %0 because %1 has duplicate case name %2";
"codable_enum_duplicate_parameter_name_here" = "cannot automatically synthesize %0 for %1 because user defined parameter name %2 in %3 conflicts with automatically generated parameter name";
"decodable_property_will_not_be_decoded" = "immutable property will not be decoded because it is declared with an initial value which cannot be overwritten";
"decodable_property_init_or_codingkeys_implicit" = "set the initial value via the initializer or explicitly define a CodingKeys enum %select{including|without}0 a %1 case to silence this warning";
"decodable_property_init_or_codingkeys_explicit" = "set the initial value via the initializer or remove the %0 case from the CodingKeys enum to silence this warning";
"decodable_make_property_mutable" = "make the property mutable instead";
"missing_member_type_conformance_prevents_synthesis" = "%select{associated value|stored property}0 type %1 does not conform to protocol %2, preventing synthesized conformance of %3 to %2";
"automatic_protocol_synthesis_unsupported" = "automatic synthesis of '%0' is not supported for %1 declarations";
"comparable_synthesis_raw_value_not_allowed" = "enum declares raw type %0, preventing synthesized conformance of %1 to %2";
"dynamic_self_non_method" = "%select{global|local}0 function cannot return 'Self'";
"dynamic_self_invalid" = "covariant 'Self' or 'Self?' can only appear as the type of a property, subscript or method result; did you mean '%0'?";
"dynamic_self_in_mutable_property" = "mutable property cannot have covariant 'Self' type";
"dynamic_self_in_stored_property" = "stored property cannot have covariant 'Self' type";
"dynamic_self_in_mutable_subscript" = "mutable subscript cannot have covariant 'Self' type";
"dynamic_self_invalid_property" = "covariant 'Self' or 'Self?' can only appear at the top level of property type";
"dynamic_self_invalid_subscript" = "covariant 'Self' or 'Self?' can only appear at the top level of subscript element type";
"dynamic_self_invalid_method" = "covariant 'Self' or 'Self?' can only appear at the top level of method result type";
"dynamic_self_stored_property_init" = "covariant 'Self' type cannot be referenced from a stored property initializer";
"dynamic_self_default_arg" = "covariant 'Self' type cannot be referenced from a default argument expression";
"attr_only_one_decl_kind" = "%0 may only be used on '%1' declarations";
"attr_only_valid_on_func_or_init_params" = "'%0' may only be used on function or initializer parameters";
"attr_not_on_variadic_parameters" = "'%0' must not be used on variadic parameters";
"attr_not_on_stored_properties" = "'%0' must not be used on stored properties";
"attr_not_on_computed_properties" = "'%0' must not be used on computed properties";
"attr_has_no_effect_on_decl_with_access_level" = "'%0' does not have any effect on %select{private|fileprivate|internal|package|%error|%error}1 declarations";
"attr_not_on_decl_with_invalid_access_level" = "'%0' may not be used on %select{private|fileprivate|internal|package|%error|%error}1 declarations";
"attr_has_no_effect_decl_not_available_before" = "'%0' has no effect because %1 is not available before %2 %3";
"attr_has_no_effect_on_unavailable_decl" = "'%0' has no effect because %1 is unavailable on %2";
"attr_ambiguous_reference_to_decl" = "ambiguous reference to %0 in '@%1' attribute";
"attr_contains_multiple_versions_for_platform" = "'%0' contains multiple versions for %1";
"override_final" = "%0 overrides a 'final' %1";
"override_static" = "cannot override %0";
"member_cannot_be_final" = "only classes and class members may be marked with 'final'";
"final_not_allowed_here" = "'final' may only be applied to classes, properties, methods, and subscripts";
"attr_incompatible_with_non_final" = "'%0' cannot be applied to a non-final %1";
"attr_incompatible_with_override" = "'%0' cannot be combined with 'override'";
"attr_incompatible_with_objc" = "'%0' must not be used on an '@objc' %1";
"final_not_on_accessors" = "'final' cannot be applied to accessors, it must be put on the %select{var|let|subscript}0";
"override_rethrows_with_non_rethrows" = "override of 'rethrows' %select{method|initializer}0 should also be 'rethrows'";
"rethrows_without_throwing_parameter" = "'rethrows' function must take a throwing function argument";
"override_reasync_with_non_reasync" = "override of 'reasync' %select{method|initializer}0 should also be 'reasync'";
"reasync_without_async_parameter" = "'reasync' function must take an 'async' function argument";
"inherits_executor_without_async" = "non-async functions cannot inherit an executor";
"isolation_in_inherits_executor" = "#isolation%select{| (introduced by a default argument)}0 cannot be used within an '@_unsafeInheritExecutor' function";
"unsafe_inherits_executor_deprecated" = "@_unsafeInheritExecutor attribute is deprecated; consider an 'isolated' parameter defaulted to '#isolation' instead";
"lifetime_invalid_global_scope" = "%0 is only valid on methods";
"eagermove_and_lexical_combined" = "@_eagerMove and @_noEagerMove attributes are alternate styles of lifetimes and can't be combined";
"eagermove_and_noncopyable_combined" = "@_eagerMove cannot be applied to NonCopyable types";
"autoclosure_function_type" = "@autoclosure attribute only applies to function types";
"invalid_autoclosure_and_convention_attributes" = "'@convention(%0)' attribute is not allowed on '@autoclosure' types";
"autoclosure_function_input_nonunit" = "argument type of @autoclosure parameter must be '()'";
"escaping_non_function_parameter" = "@escaping attribute may only be used in function parameter position";
"escaping_optional_type_argument" = "closure is already escaping in optional type argument";
"incompatible_compilerinitialized_var" = "'@_compilerInitialized' attribute only applies to let-bound stored properties without a default value";
"protocol_compilerinitialized" = "'@_compilerInitialized' is not currently supported in protocols";
"optional_compilerinitialized" = "'@_compilerInitialized' cannot be applied to an Optional let";
"instancemember_compilerinitialized" = "'@_compilerInitialized' can only be applied to a non-static class or actor member";
"non_ephemeral_non_pointer_type" = "@_nonEphemeral attribute only applies to pointer types";
"attr_NSManaged_not_instance_member" = "@NSManaged only allowed on an instance property or method";
"attr_NSManaged_not_stored" = "@NSManaged not allowed on %select{computed|observing|addressed}0 properties";
"attr_NSManaged_let_property" = "@NSManaged not allowed on a 'let' property";
"attr_NSManaged_initial_value" = "@NSManaged property cannot have an initial value";
"attr_NSManaged_NSCopying" = "@NSManaged property cannot also be marked @NSCopying";
"attr_NSManaged_method_body" = "@NSManaged method cannot have a body; it must be provided at runtime";
"nscopying_only_on_class_properties" = "@NSCopying may only be used on properties in classes";
"nscopying_only_mutable" = "@NSCopying requires property to be mutable";
"nscopying_only_stored_property" = "@NSCopying is only valid on stored properties";
"nscopying_doesnt_conform" = "@NSCopying is only valid with types that conform to the NSCopying protocol";
"attr_ApplicationMain_not_ApplicationDelegate" = "%select{'UIApplicationMain'|'NSApplicationMain'|'main'}0 class must conform to the %select{'UIApplicationDelegate'|'NSApplicationDelegate'}0 protocol";
"attr_generic_ApplicationMain_not_supported" = "generic %select{'UIApplicationMain'|'NSApplicationMain'|'main'}0 %select{classes|classes|types}0 are not supported";
"attr_ApplicationMain_multiple" = "%select{'UIApplicationMain'|'NSApplicationMain'|'main'}0 attribute can only apply to one %select{class|class|type}0 in a module";
"attr_ApplicationMain_with_script" = "%select{'UIApplicationMain'|'NSApplicationMain'|'main'}0 attribute cannot be used in a module that contains top-level code";
"attr_ApplicationMain_deprecated" = "%select{'UIApplicationMain'|'NSApplicationMain'|'main'}0 is deprecated";
"attr_ApplicationMain_deprecated_use_attr_main" = "use @main instead";
"attr_ApplicationMain_parse_as_library" = "pass '-parse-as-library' to compiler invocation if this is intentional";
"attr_ApplicationMain_script_here" = "top-level code defined in this source file";
"attr_MainType_without_main" = "%0 is annotated with @main and must provide a main static function of type %select{() -> Void or () throws -> Void|() -> Void, () throws -> Void, () async -> Void, or () async throws -> Void}1";
"attr_rawlayout_experimental" = "the @_rawLayout attribute is experimental";
"attr_rawlayout_cannot_be_copyable" = "type with @_rawLayout cannot be copied and must be declared ~Copyable";
"attr_rawlayout_cannot_have_stored_properties" = "type with @_rawLayout cannot have stored properties";
"attr_rawlayout_cannot_have_alignment_attr" = "type with @_rawLayout cannot also have an @_alignment attribute";
"lazy_not_on_let" = "'lazy' cannot be used on a let";
"lazy_not_on_computed" = "'lazy' cannot be used on a computed property";
"lazy_on_already_lazy_global" = "'lazy' cannot be used on an already-lazy global";
"lazy_not_in_protocol" = "'lazy' cannot be used on a protocol requirement";
"lazy_requires_initializer" = "lazy properties must have an initializer";
"lazy_requires_single_var" = "'lazy' cannot destructure an initializer";
"lazy_not_strong" = "lazy properties cannot be %0";
"lazy_var_storage_access" = "access to the underlying storage of a lazy property is not allowed";
"attr_for_debugger_support_only" = "@LLDBDebuggerSupport may only be used when debugger support is on";
"implements_attr_protocol_lacks_member" = "protocol %0 has no member %1";
"implements_attr_non_protocol_type" = "non-protocol type in @_implements attribute";
"implements_attr_protocol_not_conformed_to" = "containing type %0 does not conform to protocol %1";
"differentiable_attr_overload_not_found" = "%0 does not have expected type %1";
"differentiable_attr_duplicate" = "duplicate '@differentiable' attribute with same parameters";
"differentiable_attr_duplicate_note" = "other attribute declared here";
"differentiable_attr_protocol_req_where_clause" = "'@differentiable' attribute on protocol requirement cannot specify 'where' clause";
"differentiable_attr_class_member_dynamic_self_result_unsupported" = "'@differentiable' attribute cannot be declared on class members returning 'Self'";
"differentiable_attr_nonfinal_class_init_unsupported" = "'@differentiable' attribute cannot be declared on 'init' in a non-final class; consider making %0 final";
"differentiable_attr_empty_where_clause" = "empty 'where' clause in '@differentiable' attribute";
"differentiable_attr_where_clause_for_nongeneric_original" = "'where' clause is valid only when original function is generic %0";
"differentiable_attr_layout_req_unsupported" = "'@differentiable' attribute does not yet support layout requirements";
"overriding_decl_missing_differentiable_attr" = "overriding declaration is missing attribute '%0'";
"protocol_witness_missing_differentiable_attr_invalid_context" = "candidate is missing explicit '%0' attribute to satisfy requirement %1 (in protocol %3); explicit attribute is necessary because candidate is declared in a different type context or file than the conformance of %2 to %3";
"derivative_attr_expected_result_tuple" = "'@derivative(of:)' attribute requires function to return a two-element tuple; first element must have label 'value:' and second element must have label 'pullback:' or 'differential:'";
"derivative_attr_invalid_result_tuple_value_label" = "'@derivative(of:)' attribute requires function to return a two-element tuple; first element must have label 'value:'";
"derivative_attr_invalid_result_tuple_func_label" = "'@derivative(of:)' attribute requires function to return a two-element tuple; second element must have label 'pullback:' or 'differential:'";
"derivative_attr_result_value_not_differentiable" = "'@derivative(of:)' attribute requires function to return a two-element tuple; first element type %0 must conform to 'Differentiable'";
"derivative_attr_result_func_type_mismatch" = "function result's %0 type does not match %1";
"derivative_attr_result_func_type_mismatch_note" = "%0 does not have expected type %1";
"derivative_attr_result_func_original_note" = "%0 defined here";
"derivative_attr_not_in_same_file_as_original" = "derivative not in the same file as the original function";
"derivative_attr_original_stored_property_unsupported" = "cannot register derivative for stored property %0";
"derivative_attr_class_member_dynamic_self_result_unsupported" = "cannot register derivative for class member %0 returning 'Self'";
"derivative_attr_nonfinal_class_init_unsupported" = "cannot register derivative for 'init' in a non-final class; consider making %0 final";
"derivative_attr_unsupported_accessor_kind" = "cannot register derivative for %0";
"derivative_attr_class_setter_unsupported" = "cannot yet register derivative for class property or subscript setters";
"derivative_attr_protocol_requirement_unsupported" = "cannot yet register derivative default implementation for protocol requirements";
"derivative_attr_original_already_has_derivative" = "a derivative already exists for %0";
"derivative_attr_duplicate_note" = "other attribute declared here";
"derivative_attr_access_level_mismatch" = "derivative function must have same access level as original function; derivative function %2 is %select{private|fileprivate|internal|package|public|open}3, but original function %0 is %select{private|fileprivate|internal|package|public|open}1";
"derivative_attr_fix_access" = "mark the derivative function as '%select{private|fileprivate|internal|package|@usableFromInline|@usableFromInline}0' to match the original function";
"derivative_attr_static_method_mismatch_original" = "unexpected derivative function declaration; %0 requires the derivative function %1 to be %select{an instance|a 'static'}2 method";
"derivative_attr_static_method_mismatch_original_note" = "original function %0 is %select{an instance|a 'static'}1 method";
"derivative_attr_static_method_mismatch_fix" = "make derivative function %0 %select{an instance|a 'static'}1 method";
"transpose_attr_invalid_linearity_parameter_or_result" = "cannot transpose with respect to original %select{result|parameter}1 '%0' that does not conform to 'Differentiable' and satisfy '%0 == %0.TangentVector'";
"transpose_attr_cannot_use_named_wrt_params" = "cannot use named 'wrt' parameters in '@transpose(of:)' attribute, found %0";
"transpose_attr_wrt_self_must_be_static" = "the transpose of an instance method must be a 'static' method in the same type when 'self' is a linearity parameter";
"transpose_attr_wrt_self_self_type_mismatch_note" = "the transpose is declared in %0 but the original function is declared in %1";
"transpose_attr_static_method_mismatch_original" = "unexpected transpose function declaration; %0 requires the transpose function %1 to be %select{an instance|a 'static'}2 method";
"transpose_attr_static_method_mismatch_original_note" = "original function %0 is %select{an instance|a 'static'}1 method";
"transpose_attr_static_method_mismatch_fix" = "make transpose function %0 %select{an instance|a 'static'}1 method";
"autodiff_attr_original_decl_ambiguous" = "referenced declaration %0 is ambiguous";
"autodiff_attr_original_decl_ambiguous_candidate" = "candidate %0 found here";
"autodiff_attr_original_decl_none_valid" = "referenced declaration %0 could not be resolved";
"autodiff_attr_original_decl_invalid_kind" = "candidate %0 is not a 'func', 'init', 'subscript', or 'var' computed property declaration";
"autodiff_attr_original_decl_missing_accessor" = "candidate %0 does not have a %1";
"autodiff_attr_original_decl_type_mismatch" = "candidate %0 does not have %select{expected type|type equal to or less constrained than}2 %1";
"autodiff_attr_original_decl_not_same_type_context" = "candidate %0 is not defined in the current type context";
"autodiff_attr_original_void_result" = "cannot differentiate void function %0";
"autodiff_attr_result_not_differentiable" = "can only differentiate functions with results that conform to 'Differentiable', but %0 does not conform to 'Differentiable'";
"autodiff_attr_opaque_result_type_unsupported" = "cannot differentiate functions returning opaque result types";
"diff_function_no_parameters" = "%0 has no parameters to differentiate with respect to";
"diff_params_clause_param_name_unknown" = "unknown parameter name %0";
"diff_params_clause_self_instance_method_only" = "'self' parameter is only applicable to instance methods";
"diff_params_clause_self_must_be_first" = "'self' parameter must come first in the parameter list";
"diff_params_clause_params_not_original_order" = "parameters must be specified in original order";
"diff_params_clause_param_index_out_of_range" = "parameter index is larger than total number of parameters";
"diff_params_clause_no_inferred_parameters" = "no differentiation parameters could be inferred; must differentiate with respect to at least one parameter conforming to 'Differentiable'";
"diff_params_clause_cannot_diff_wrt_inout_parameter" = "cannot differentiate with respect to 'inout' parameter (%0)";
"diff_params_clause_param_not_differentiable" = "can only differentiate with respect to parameters that conform to 'Differentiable', but %0 does not conform to 'Differentiable'";
"warn_use_async_alternative" = "consider using asynchronous alternative function";
"found_candidate" = "found this candidate";
"found_candidate_in_module" = "found this candidate %select{|in module %1}0";
"found_candidate_type" = "found candidate with type %0";
"no_MaxBuiltinFloatType_found" = "standard library error: _MaxBuiltinFloatType is not properly defined";
"no_member_of_module" = "module %0 has no member named %1";
"super_with_no_base_class" = "'super' members cannot be referenced in a root class";
"unqualified_init" = "initializer expression requires explicit access%select{|; did you mean to prepend it with|; did you mean to prepend it with}0%select{| 'self.'?| 'super.'?}0";
"bad_init_ref_base" = "'init' can only refer to the initializers of 'self'%select{| or 'super'}0";
"init_delegation_outside_initializer" = "initializer delegation can only occur within an initializer";
"init_delegates_and_chains" = "initializer cannot both delegate ('self.init') and chain to a superclass initializer ('super.init')";
"init_delegation_or_chain" = "previous %select{delegation|chaining}0 call is here";
"delegating_convenience_super_init" = "convenience initializer for %0 must delegate (with 'self.init') rather than chaining to a superclass initializer (with 'super.init')";
"delegating_designated_init" = "designated initializer for %0 cannot delegate (with 'self.init'); did you mean this to be a convenience initializer?";
"delegating_designated_init_in_extension" = "designated initializer for %0 cannot delegate (with 'self.init')";
"delegation_here" = "delegation occurs here";
"chain_convenience_init" = "must call a designated initializer of the superclass %0";
"delegate_chain_nonoptional_to_optional" = "a non-failable initializer cannot %select{delegate|chain}0 to failable initializer %1 written with 'init?'";
"init_force_unwrap" = "force potentially-failing result with '!'";
"init_propagate_failure" = "propagate the failure with 'init?'";
"delegate_chain_nonoptional_to_optional_try" = "a non-failable initializer cannot use 'try?' to %select{delegate|chain}0 to another initializer";
"init_delegate_force_try" = "force potentially-failing result with 'try!'";
"init_delegation_nested" = "%select{initializer delegation ('self.init')|initializer chaining ('super.init')}0 cannot be nested in another %select{expression|statement}1";
"convenience_init_here" = "convenience initializer is declared here";
"designated_init_in_extension" = "designated initializer cannot be declared in an extension of %0; did you mean this to be a convenience initializer?";
"designated_init_in_extension_no_convenience_tip" = "designated initializer cannot be declared in an extension of %0";
"no_convenience_keyword_init" = "initializers in %0 are not marked with 'convenience'";
"cfclass_convenience_init" = "convenience initializers are not supported in extensions of CF types";
"dynamic_construct_class" = "constructing an object of class type %0 with a metatype value must use a 'required' initializer";
"note_nonrequired_initializer" = "selected %select{non-required|implicit}0 initializer %1";
"construct_protocol_value" = "value of type %0 is a protocol; it cannot be instantiated";
"construct_protocol_by_name" = "type %0 cannot be instantiated";
"unknown_binop" = "operator is not a known binary operator";
"non_associative_adjacent_operators" = "adjacent operators are in non-associative precedence group %0";
"unordered_adjacent_operators" = "adjacent operators are in unordered precedence groups %0 and %1";
"missing_builtin_precedence_group" = "broken standard library: missing builtin precedence group %0";
"nan_comparison" = "comparison with '.nan' using %0 is always %select{false|true}1, use '%2.isNaN' to check if '%3' %select{is not a number|is a number}1";
"nan_comparison_without_isnan" = "comparison with '.nan' using %0 is always %select{false|true}1";
"nan_comparison_both_nan" = "'.nan' %0 '.nan' is always %select{false|true}1";
"try_rhs" = "'%select{try|try!|try?|await}0' cannot appear to the right of a non-assignment operator";
"try_if_rhs_noncovering" = "'%select{try|try!|try?|await}0' following conditional operator does not cover everything to its right";
"try_assign_rhs_noncovering" = "'%select{try|try!|try?|await}0' following assignment operator does not cover everything to its right";
"broken_bool" = "type 'Bool' is broken";
"inject_forced_downcast" = "treating a forced downcast to %0 as optional will never produce 'nil'";
"forced_to_conditional_downcast" = "use 'as?' to perform a conditional downcast to %0";
"silence_inject_forced_downcast" = "add parentheses around the cast to silence this warning";
"conditional_downcast_foreign" = "conditional downcast to CoreFoundation type %0 will always succeed";
"note_explicitly_compare_cftypeid" = "did you mean to explicitly compare the CFTypeIDs of %0 and %1?";
"optional_used_as_boolean" = "optional type %0 cannot be used as a boolean; test for '%select{!|=}1= nil' instead";
"integer_used_as_boolean" = "type %0 cannot be used as a boolean; test for '%select{!|=}1= 0' instead";
"integer_used_as_boolean_literal" = "integer literal value '%0' cannot be used as a boolean; did you mean '%select{false|true}1'?";
"interpolation_missing_proto" = "string interpolation requires the protocol 'ExpressibleByStringInterpolation' to be defined";
"interpolation_broken_proto" = "protocol 'ExpressibleByStringInterpolation' is broken";
"object_literal_broken_proto" = "object literal protocol is broken";
"discard_expr_outside_of_assignment" = "'_' can only appear in a pattern or on the left side of an assignment";
"discard_expr_void_result_redundant" = "using '_' to ignore the result of a Void-returning function is redundant";
"collection_literal_heterogeneous" = "heterogeneous collection literal could only be inferred to %0; add explicit type annotation if this is intentional";
"collection_literal_empty" = "empty collection literal requires an explicit type";
"unresolved_member_no_inference" = "reference to member %0 cannot be resolved without a contextual type";
"cannot_infer_base_of_unresolved_member" = "cannot infer contextual base in reference to member %0";
"cannot_infer_underlying_for_opaque_result" = "underlying type for opaque result type %0 could not be inferred from return expression";
"unresolved_nil_literal" = "'nil' requires a contextual type";
"cannot_force_unwrap_nil_literal" = "'nil' literal cannot be force unwrapped";
"could_not_infer_placeholder" = "could not infer type for placeholder";
"could_not_infer_pack_element" = "could not infer pack element #%0 from context";
"note_in_opening_pack_element" = "in inferring pack element #%0 of '%1'";
"type_of_expression_is_ambiguous" = "type of expression is ambiguous without a type annotation";
"failed_to_produce_diagnostic" = "failed to produce diagnostic for expression; please submit a bug report (https://swift.org/contributing/#reporting-bugs)";
"missing_protocol" = "missing protocol %0";
"nil_literal_broken_proto" = "protocol 'ExpressibleByNilLiteral' is broken";
"builtin_integer_literal_broken_proto" = "protocol '_ExpressibleByBuiltinIntegerLiteral' is broken";
"integer_literal_broken_proto" = "protocol 'ExpressibleByIntegerLiteral' is broken";
"builtin_float_literal_broken_proto" = "protocol '_ExpressibleByBuiltinFloatLiteral' is broken";
"float_literal_broken_proto" = "protocol 'ExpressibleByFloatLiteral' is broken";
"builtin_boolean_literal_broken_proto" = "protocol '_ExpressibleByBuiltinBooleanLiteral' is broken";
"boolean_literal_broken_proto" = "protocol 'ExpressibleByBooleanLiteral' is broken";
"builtin_unicode_scalar_literal_broken_proto" = "protocol '_ExpressibleByBuiltinUnicodeScalarLiteral' is broken";
"unicode_scalar_literal_broken_proto" = "protocol 'ExpressibleByUnicodeScalarLiteral' is broken";
"builtin_extended_grapheme_cluster_literal_broken_proto" = "protocol '_ExpressibleByBuiltinExtendedGraphemeClusterLiteral' is broken";
"extended_grapheme_cluster_literal_broken_proto" = "protocol 'ExpressibleByExtendedGraphemeClusterLiteral' is broken";
"builtin_string_literal_broken_proto" = "protocol '_ExpressibleByBuiltinStringLiteral' is broken";
"string_literal_broken_proto" = "protocol 'ExpressibleByStringLiteral' is broken";
"should_use_dictionary_literal" = "dictionary of type %0 cannot be %select{used|initialized}1 with array literal";
"meant_dictionary_lit" = "did you mean to use a dictionary literal instead?";
"should_use_empty_dictionary_literal" = "use [:] to get an empty dictionary literal";
"type_is_not_dictionary" = "contextual type %0 cannot be used with dictionary literal";
"duplicated_literal_keys_in_dictionary_literal" = "dictionary literal of type %0 has duplicate entries for %1 literal key%select{ %3|}2";
"duplicated_key_declared_here" = "duplicate key declared here";
"cannot_explicitly_specialize_generic_function" = "cannot explicitly specialize a generic function";
"not_a_generic_definition" = "cannot specialize a non-generic definition";
"not_a_generic_type" = "cannot specialize non-generic type %0";
"protocol_declares_unknown_primary_assoc_type" = "an associated type named %0 must be declared in the protocol %1 or a protocol it inherits";
"protocol_declares_duplicate_primary_assoc_type" = "duplicate primary associated type name %0";
"protocol_does_not_have_primary_assoc_type" = "protocol %0 does not have primary associated types that can be constrained";
"parameterized_protocol_type_argument_count_mismatch" = "protocol type %0 specialized with %select{too many|too few}3 type arguments (got %1, but expected %2)";
"cannot_specialize_self" = "cannot specialize 'Self'";
"specialize_explicit_type_instead" = "did you mean to explicitly reference %0 instead?";
"too_few_generic_arguments" = "generic type %0 specialized with too few type parameters (got %1, but expected %2)";
"too_few_generic_arguments_pack" = "generic type %0 specialized with too few type parameters (got %1, but expected at least %2)";
"too_many_generic_arguments" = "generic type %0 specialized with too many type parameters (got %1, but expected %2)";
"generic_argument_pack_mismatch" = "generic type %0 specialized with mismatched type parameter pack";
"generic_type_requires_arguments" = "reference to generic type %0 requires arguments in <...>";
"descriptive_generic_type_declared_here" = "%0 declared here";
"placeholder_type_not_allowed" = "type placeholder not allowed here";
"placeholder_type_not_allowed_in_return_type" = "type placeholder may not appear in function return type";
"placeholder_type_not_allowed_in_parameter" = "type placeholder may not appear in top-level parameter";
"placeholder_type_not_allowed_in_pattern" = "placeholder type may not appear as type of a variable";
"replace_placeholder_with_inferred_type" = "replace the placeholder with the inferred type %0";
"use_of_void_pointer" = "Unsafe%0Pointer<Void> has been replaced by Unsafe%0RawPointer";
"ambiguous_decl_ref" = "ambiguous use of %0";
"ambiguous_operator_ref" = "ambiguous use of operator %0";
"ambiguous_because_of_trailing_closure" = "%select{use an explicit argument label instead of a trailing closure|avoid using a trailing closure}0 to call %1";
"partial_application_of_function_invalid" = "cannot reference %select{'mutating' method|'super.init' initializer chain|'self.init' initializer delegation|'super' instance method with metatype base}0 as function value";
"partial_application_of_function_invalid_swift4" = "cannot reference %select{'mutating' method|'super.init' initializer chain|'self.init' initializer delegation|'super' instance method with metatype base}0 as function value; calling the function has undefined behavior and will be an error in future Swift versions";
"capture_async_let_not_supported" = "capturing 'async let' variables is not supported";
"self_assignment_var" = "assigning a variable to itself";
"self_assignment_prop" = "assigning a property to itself";
"property_use_in_closure_without_explicit_self" = "reference to property %0 in closure requires explicit use of 'self' to make capture semantics explicit";
"method_call_in_closure_without_explicit_self" = "call to method %0 in closure requires explicit use of 'self' to make capture semantics explicit";
"note_capture_self_explicitly" = "capture 'self' explicitly to enable implicit 'self' in this closure";
"note_reference_self_explicitly" = "reference 'self.' explicitly";
"note_other_self_capture" = "variable other than 'self' captured here under the name 'self' does not enable implicit 'self'";
"implicit_use_of_self_in_closure" = "implicit use of 'self' in closure; use 'self.' to make capture semantics explicit";
"recursive_accessor_reference" = "attempting to %select{access|modify}1 %0 within its own %select{getter|setter}1";
"recursive_accessor_reference_silence" = "access 'self' explicitly to silence this warning";
"store_in_willset" = "attempting to store to property %0 within its own willSet, which is about to be overwritten by the new value";
"value_of_module_type" = "expected module member name after module name";
"value_of_metatype_type" = "expected member name or constructor call after type name%select{|; this will be an error in Swift 6}0";
"add_parens_to_type" = "add arguments after the type to construct a value of the type";
"add_self_to_type" = "use '.self' to reference the type object";
"warn_unqualified_access" = "use of %0 treated as a reference to %1 in %kind2";
"self_refers_to_method" = "'self' refers to the method '%0.self', which may be unexpected";
"fix_unqualified_access_member" = "use 'self.' to silence this warning";
"fix_unqualified_access_member_named_self" = "use '%0.self' to silence this warning";
"fix_unqualified_access_top_level" = "use '%0' to reference the %1";
"fix_unqualified_access_top_level_multi" = "use '%0' to reference the %1 in module %2";
"warn_deprecated_conditional_conformance_outer_access" = "use of %0 as reference to %1 in %kind2 will change in future versions of Swift to reference %3 in %kind4 which comes via a conditional conformance";
"fix_deprecated_conditional_conformance_outer_access" = "use '%0' to continue to reference the %1";
"unsupported_special_decl_ref" = "referencing %0 as a function value is not implemented";
"bitcasting_away_noescape" = "'unsafeBitCast' from non-escaping function type %0 to escaping function type %1 is undefined; use 'withoutActuallyEscaping' to temporarily escape a function";
"bitcasting_to_change_function_rep" = "'unsafeBitCast' from function type %0 to %1 changes @convention and is undefined; use an implicit conversion to change conventions";
"bitcasting_to_downcast" = "'unsafeBitCast' from %0 to %1 can be replaced with 'unsafeDowncast'";
"bitcasting_is_no_op" = "'unsafeBitCast' from %0 to %1 is unnecessary and can be removed";
"bitcasting_to_change_pointer_kind" = "'unsafeBitCast' from %0 to %1 can be replaced with %2 initializer";
"bitcasting_to_change_pointee_type" = "'unsafeBitCast' from %0 to %1 changes pointee type and may lead to undefined behavior; use the 'withMemoryRebound' method on %0 to rebind the type of memory";
"bitcasting_to_give_type_to_raw_pointer" = "'unsafeBitCast' from %0 to %1 gives a type to a raw pointer and may lead to undefined behavior";
"bitcast_assume_memory_rebound" = "use the 'assumingMemoryBound' method if the pointer is known to point to an existing value or array of type %0 in memory";
"bitcast_bind_memory" = "use the 'bindMemory' method to assign type %0 to uninitialized raw memory";
"bitcasting_for_number_bit_pattern_init" = "'unsafeBitCast' from %0 to %1 can be replaced with 'bitPattern:' initializer on %1";
"bitcasting_for_number_bit_pattern_property" = "'unsafeBitCast' from %0 to %1 can be replaced with 'bitPattern' property on %0";
"bitcasting_to_change_from_unsized_to_sized_int" = "'unsafeBitCast' from %0 to %1 can be replaced with %1 initializer";
"use_of_qq_on_non_optional_value" = "left side of nil coalescing operator '??' has non-optional type %0, so the right side is never used";
"nonoptional_compare_to_nil" = "comparing non-optional value of type %0 to '%select{Optional.none|nil}1' always returns %select{false|true}2";
"optional_check_nonoptional" = "non-optional expression of type %0 used in a check for optionals";
"optional_check_promotion" = "explicitly specified type %0 adds an additional level of optional to the initializer, making the optional check always succeed";
"optional_pattern_match_promotion" = "pattern match introduces an implicit promotion from %0 to %1";
"optional_to_any_coercion" = "expression implicitly coerced from %0 to %1";
"iuo_to_any_coercion" = "coercion of implicitly unwrappable value of type %0 to %1 does not unwrap optional";
"iuo_to_any_coercion_note" = "implicitly unwrapped %kind0 declared here";
"iuo_to_any_coercion_note_func_result" = "%kind0 with implicitly unwrapped result type is declared here";
"default_optional_to_any" = "provide a default value to avoid this warning";
"force_optional_to_any" = "force-unwrap the value to avoid this warning";
"silence_optional_to_any" = "explicitly cast to %0 with '%1' to silence this warning";
"debug_description_in_string_interpolation_segment" = "string interpolation produces a debug description for %select{an optional|a function}0 value; did you mean to make this explicit?";
"silence_debug_description_in_interpolation_segment_call" = "use 'String(describing:)' to silence this warning";
"noescape_parameter" = "parameter %1 is implicitly %select{non-escaping|non-sendable}0";
"generic_parameters_always_escaping" = "generic parameters are always considered '@escaping'";
"passing_noattrfunc_to_attrfunc" = "passing %select{non-escaping|non-sendable}0 parameter %1 to function expecting %select{an @escaping|a @Sendable}0 closure";
"converting_noescape_param_to_generic_type" = "converting non-escaping parameter %0 to generic parameter %1 may allow it to escape";
"assigning_noattrfunc_to_attrfunc" = "assigning %select{non-escaping|non-sendable}0 parameter %1 to %select{an @escaping|a @Sendable}0 closure";
"general_noattrfunc_to_attr" = "using %select{non-escaping|non-sendable}0 parameter %1 in a context expecting %select{an @escaping|a @Sendable}0 closure";
"converting_noattrfunc_to_type" = "converting %select{non-escaping|non-sendable function}0 value to %1 may %select{allow it to escape|introduce data races}0";
"escape_expected_at_parameter_position" = "parameter #%0 expects escaping value of type %1";
"add_explicit_escaping" = "add explicit @escaping to function parameter #%0";
"converting_func_loses_global_actor" = "converting function value of type %0 to %1 loses global actor %2";
"capture_across_type_decl" = "%0 declaration cannot close over value %1 defined in outer scope";
"reference_to_invalid_decl" = "cannot reference invalid declaration %0";
"jump_out_of_defer" = "'%0' cannot transfer control out of a defer statement";
"defer_stmt_at_block_end" = "'defer' statement at end of scope always executes immediately; replace with 'do' statement to silence this warning";
"return_invalid_outside_func" = "return invalid outside of a func";
"return_expr_missing" = "non-void function should return a value";
"return_non_failable_init" = "only a failable initializer can return 'nil'";
"make_init_failable" = "use 'init?' to make the initializer %0 failable";
"return_init_non_nil" = "'nil' is the only return value permitted in an initializer";
"implicit_throws_super_init" = "missing call to superclass's initializer; 'super.init' is a throwing initializer and requires either an explicit call or that this initializer is also marked as 'throws'";
"implicit_async_super_init" = "missing call to superclass's initializer; 'super.init' is 'async' and requires an explicit call";
"if_always_true" = "'if' condition is always true";
"while_always_true" = "'while' condition is always true";
"guard_always_succeeds" = "'guard' condition is always true, body is unreachable";
"expression_unused_closure" = "closure expression is unused";
"expression_unused_function" = "function is unused";
"expression_unused_lvalue" = "%select{variable|property is accessed but result|subscript is accessed but result}0 is unused";
"expression_unused_result_call" = "result of call to %0 is unused";
"expression_unused_result_operator" = "result of operator %0 is unused";
"expression_unused_result_operator_name" = "result of operator %0 is unused";
"expression_unused_result_unknown" = "result of call to %select{function|closure}0 returning %1 is unused";
"expression_unused_result" = "expression of type %0 is unused";
"expression_unused_init_result" = "result of %0 initializer is unused";
"expression_unused_optional_try" = "result of 'try?' is unused";
"expression_unused_selector_result" = "result of '#selector' is unused";
"expression_unused_literal" = "%0 literal is unused";
"assignment_lhs_not_lvalue" = "cannot assign to immutable expression of type %0";
"assignment_lhs_is_apply_expression" = "expression is not assignable: %0";
"assignment_lhs_is_immutable_variable" = "cannot assign to value: %0";
"assignment_lhs_is_immutable_property" = "cannot assign to property: %0";
"assignment_subscript_has_immutable_base" = "cannot assign through subscript: %0";
"assignment_dynamic_property_has_immutable_base" = "cannot assign through dynamic lookup property: %0";
"assignment_bang_has_immutable_subcomponent" = "cannot assign through '!': %0";
"candidate_is_not_assignable" = "candidate is not assignable: %kind0";
"change_to_mutating" = "mark %select{method|accessor}0 'mutating' to make 'self' mutable";
"masked_mutable_property" = "add explicit '%0' to refer to mutable %1 of %2";
"assignment_let_property_delegating_init" = "'let' property %0 may not be initialized directly; use \"self.init(...)\" or \"self = ...\" instead";
"label_shadowed" = "label %0 cannot be reused on an inner statement";
"break_outside_loop" = "'break' is only allowed inside a loop, if, do, or switch";
"unlabeled_break_outside_loop" = "unlabeled 'break' is only allowed inside a loop or switch, a labeled break is required to exit an if or do";
"continue_outside_loop" = "'continue' is only allowed inside a loop";
"continue_not_in_this_stmt" = "'continue' cannot be used with %0 statements";
"unresolved_label" = "cannot find label %0 in scope";
"unresolved_label_corrected" = "cannot find label %0 in scope; did you mean %1?";
"foreach_sequence_does_not_conform_to_expected_protocol" = "for-in loop requires %0 to conform to %1%select{|; did you mean to unwrap optional?}2";
"no_match_operator" = "no binary '~=' operator available for 'switch' statement";
"fallthrough_outside_switch" = "'fallthrough' is only allowed inside a switch";
"fallthrough_from_last_case" = "'fallthrough' without a following 'case' or 'default' block";
"fallthrough_into_case_with_var_binding" = "'fallthrough' from a case which doesn't bind variable %0";
"unnecessary_cast_over_optionset" = "unnecessary cast over raw value of %0";
"mutability_mismatch_multiple_pattern_list" = "'%select{var|let}0' pattern binding must match previous '%select{var|let}1' pattern binding";
"type_mismatch_multiple_pattern_list" = "pattern variable bound to type %0, expected type %1";
"type_mismatch_fallthrough_pattern_list" = "pattern variable bound to type %0, fallthrough case bound to type %1";
"unknown_case_must_be_catchall" = "'@unknown' is only supported for catch-all cases (\"case _\")";
"unknown_case_where_clause" = "'where' cannot be used with '@unknown'";
"unknown_case_multiple_patterns" = "'@unknown' cannot be applied to multiple patterns";
"unknown_case_must_be_last" = "'@unknown' can only be applied to the last case in a switch";
"move_only_pattern_match_not_consumed" = "noncopyable binding being pattern-matched must have the 'consume' operator applied";
"where_on_one_item" = "'where' only applies to the second pattern match in this case";
"add_where_newline" = "disambiguate by adding a line break between them if this is desired";
"duplicate_where" = "duplicate the 'where' on both patterns to check both patterns";
"trailing_closure_requires_parens" = "trailing closure in this context is confusable with the body of the statement; pass as a parenthesized argument to silence this warning";
"opaque_type_no_underlying_type_candidates" = "function declares an opaque return type, but has no return statements in its body from which to infer an underlying type";
"opaque_type_missing_return_last_expr_note" = "did you mean to return the last expression?";
"opaque_type_mismatched_underlying_type_candidates" = "function declares an opaque return type %0, but the return statements in its body do not have matching underlying types";
"opaque_type_mismatched_underlying_type_candidates_named" = "function declares an opaque return type %0, but the return statements in its body do not have matching underlying types";
"opaque_type_underlying_type_candidate_here" = "return statement has underlying type %0";
"opaque_type_self_referential_underlying_type" = "function opaque return type was inferred as %0, which defines the opaque type in terms of itself";
"opaque_type_cannot_contain_dynamic_self" = "function with opaque return type cannot return the covariant 'Self' type of a class";
"opaque_type_var_no_init" = "property declares an opaque return type, but has no initializer expression from which to infer an underlying type";
"opaque_type_var_no_underlying_type" = "property declares an opaque return type, but cannot infer the underlying type from its initializer expression";
"discard_wrong_context_decl" = "'discard' statement cannot appear in %0";
"discard_no_deinit" = "'discard' has no effect for type %0 unless it has a deinitializer";
"discard_wrong_context_closure" = "'discard' statement cannot appear in closure";
"discard_wrong_context_misc" = "'discard' statement cannot appear in this context";
"discard_wrong_context_copyable" = "'discard' statement can only appear in noncopyable type's member";
"discard_wrong_context_nonconsuming" = "'discard' statement can only appear in consuming %0";
"discard_wrong_not_self" = "you can only discard 'self'";
"discard_wrong_module" = "can only 'discard' from the same module defining type %0";
"cannot_infer_type_for_pattern" = "type annotation missing in pattern";
"refutable_pattern_requires_initializer" = "pattern matching requires an initializer value to match against";
"var_pattern_didnt_bind_variables" = "'%0' pattern has no effect; sub-pattern didn't bind any variables";
"iflet_pattern_matching" = "pattern matching in a condition requires the 'case' keyword";
"iflet_implicitly_unwraps" = "pattern matching in a condition implicitly unwraps optionals";
"type_pattern_missing_is" = "'is' keyword required to pattern match against type name";
"pattern_type_mismatch_context" = "type annotation does not match contextual type %0";
"tuple_pattern_in_non_tuple_context" = "tuple pattern cannot match values of the non-tuple type %0";
"found_one_pattern_for_several_associated_values" = "enum case '%0' has %1 associated values; matching them as a tuple is deprecated";
"converting_tuple_into_several_associated_values" = "enum case '%0' has %1 associated values";
"converting_several_associated_values_into_tuple" = "enum case '%0' has one associated value that is a tuple of %1 elements";
"closure_argument_list_tuple" = "contextual closure type %0 expects %1 argument%s1, but %2 %select{were|was}3 used in closure body";
"closure_argument_list_missing" = "contextual type for closure argument list expects %0 argument%s0, which cannot be implicitly ignored";
"closure_tuple_parameter_destructuring" = "closure tuple parameter %0 does not support destructuring";
"closure_tuple_parameter_destructuring_implicit" = "closure tuple parameter %0 does not support destructuring with implicit parameters";
"single_tuple_parameter_mismatch_special" = "%0 expects a single parameter of type %1%2";
"single_tuple_parameter_mismatch_normal" = "%kindbase0 expects a single parameter of type %1%2";
"cannot_convert_single_tuple_into_multiple_arguments" = "%kindonly0 %select{%base0 |}1expects %2 separate arguments%select{|; remove extra parentheses to change tuple into separate arguments}3";
"enum_element_pattern_assoc_values_mismatch" = "pattern with associated values does not match enum case %0";
"enum_element_pattern_assoc_values_remove" = "remove associated values to make the pattern match";
"tuple_pattern_length_mismatch" = "tuple pattern has the wrong length for tuple type %0";
"tuple_pattern_label_mismatch" = "tuple pattern element label %0 must be %1";
"enum_element_pattern_member_not_found" = "enum case %0 not found in type %1";
"optional_element_pattern_not_valid_type" = "'?' pattern cannot match values of type %0";
"condition_optional_element_pattern_not_valid_type" = "initializer for conditional binding must have Optional type, not %0";
"enum_element_pattern_not_member_of_enum" = "enum case %0 is not a member of type %1";
"ambiguous_enum_pattern_type" = "generic enum type %0 is ambiguous without explicit generic parameters when matching value of type %1";
"type_inferred_to_undesirable_type" = "%select{variable|constant}2 %0 inferred to have type %1, which may be unexpected";
"type_inferred_to_uninhabited_type" = "%select{variable|constant}2 %0 inferred to have type %1, which is an enum with no cases";
"type_inferred_to_uninhabited_tuple_type" = "%select{variable|constant}2 %0 inferred to have type %1, which contains an enum with no cases";
"add_explicit_type_annotation_to_silence" = "add an explicit type annotation to silence this warning";
"unowned_assignment_immediate_deallocation" = "instance will be immediately deallocated because %select{variable|property}2 %0 is %1";
"unowned_assignment_requires_strong" = "a strong reference is required to prevent the instance from being deallocated";
"try_unhandled" = "errors thrown from here are not handled";
"throwing_call_unhandled" = "%0 can throw, but the error is not handled";
"tryless_throwing_call_unhandled" = "%0 can throw, but it is not marked with 'try' and the error is not handled";
"throw_in_nonthrowing_function" = "error is not handled because the enclosing function is not declared 'throws'";
"throwing_call_in_rethrows_function" = "%0 can throw, but the error is not handled; a function declared 'rethrows' may only throw if its parameter does";
"tryless_throwing_call_in_rethrows_function" = "%0 can throw, but it is not marked with 'try' and the error is not handled; a function declared 'rethrows' may only throw if its parameter does";
"throw_in_rethrows_function" = "a function declared 'rethrows' may only throw if its parameter does";
"because_rethrows_argument_throws" = "call is to 'rethrows' function, but argument function can throw";
"because_rethrows_default_argument_throws" = "call is to 'rethrows' function, but a defaulted argument function can throw";
"because_rethrows_conformance_throws" = "call is to 'rethrows' function, but a conformance has a throwing witness";
"throwing_call_in_nonthrowing_autoclosure" = "%0 can throw, but it is executed in a non-throwing autoclosure";
"tryless_throwing_call_in_nonthrowing_autoclosure" = "%0 can throw, but it is not marked with 'try' and it is executed in a non-throwing autoclosure";
"throw_in_nonthrowing_autoclosure" = "error is not handled because it is thrown in a non-throwing autoclosure";
"try_unhandled_in_nonexhaustive_catch" = "errors thrown from here are not handled because the enclosing catch is not exhaustive";
"throwing_call_in_nonexhaustive_catch" = "%0 can throw, but the enclosing catch is not exhaustive";
"tryless_throwing_call_in_nonexhaustive_catch" = "%0 can throw, but it is not marked with 'try' and the enclosing catch is not exhaustive";
"throw_in_nonexhaustive_catch" = "error is not handled because the enclosing catch is not exhaustive";
"throwing_op_in_illegal_context" = "%1 can throw, but errors cannot be thrown out of %select{<<ERROR>>|a default argument|a property wrapper initializer|a property initializer|a global variable initializer|a lazy variable initializer|an enum case raw value|a catch pattern|a catch guard expression|a defer body}0";
"throw_in_illegal_context" = "errors cannot be thrown out of %select{<<ERROR>>|a default argument|a property wrapper initializer|a property initializer|a global variable initializer|a lazy variable initializer|an enum case raw value|a catch pattern|a catch guard expression|a defer body}0";
"throwing_operator_without_try" = "operator can throw but expression is not marked with 'try'";
"throwing_interpolation_without_try" = "interpolation can throw but is not marked with 'try'";
"throwing_call_without_try" = "call can throw but is not marked with 'try'";
"throwing_async_let_without_try" = "reading 'async let' can throw but is not marked with 'try'";
"throwing_prop_access_without_try" = "property access can throw but is not marked with 'try'";
"throwing_subscript_access_without_try" = "subscript access can throw but is not marked with 'try'";
"note_forgot_try" = "did you mean to use 'try'?";
"note_error_to_optional" = "did you mean to handle error as optional value?";
"note_disable_error_propagation" = "did you mean to disable error propagation?";
"no_throw_in_try" = "no calls to throwing functions occur within 'try' expression";
"no_throw_in_do_with_catch" = "'catch' block is unreachable because no errors are thrown in 'do' block";
"thrown_type_not_error" = "thrown type %0 does not conform to the 'Error' protocol";
"async_expr_without_await" = "expression is 'async' but is not marked with 'await'";
"async_access_without_await" = "%select{call|property access|subscript access|}0 is 'async'";
"async_call_without_await_in_autoclosure" = "call is 'async' in an autoclosure argument";
"async_call_without_await_in_async_let" = "call is 'async' in an 'async let' initializer";
"no_async_in_await" = "no 'async' operations occur within 'await' expression";
"async_in_nonasync_function" = "%select{'async'|'async' call|'await'|'async let'|'async' property access|'async' subscript access}0 in %select{a function|an autoclosure}1 that does not support concurrency";
"note_add_async_to_function" = "add 'async' to function %0 to make it asynchronous";
"note_add_nonisolated_to_decl" = "add 'nonisolated' to %0 to make this %kindonly0 not isolated to the actor";
"note_add_async_and_throws_to_decl" = "mark the protocol requirement %0 '%select{|async|throws|async throws}1' to allow actor-isolated conformances";
"note_add_distributed_to_decl" = "add 'distributed' to %0 to make this %kindonly0 satisfy the protocol requirement";
"invalid_isolated_calls_in_body" = "calls to '@%0'-isolated' code in %kind1";
"add_globalactor_to_function" = "add '@%0' to make %kind1 part of global actor %2";
"main_function_must_be_mainActor" = "main() must be '@MainActor'";
"not_objc_function_async" = "'async' %0 cannot be represented in Objective-C";
"not_objc_function_type_async" = "'async' function types cannot be represented in Objective-C";
"actor_isolated_objc" = "actor-isolated %kind0 cannot be @objc";
"protocol_witness_async_conflict" = "candidate is %select{not |}0'async', but%select{| @objc}1 protocol requirement is%select{| not}0";
"async_autoclosure_nonasync_function" = "'async' autoclosure parameter in a non-'async' function";
"async_not_let" = "'async' can only be used with 'let' declarations";
"async_let_not_local" = "'async let' can only be used on local declarations";
"async_let_not_initialized" = "'async let' binding requires an initializer expression";
"async_let_no_variables" = "'async let' requires at least one named variable";
"async_let_without_await" = "reference to async let %0 is 'async'";
"async_call_in_illegal_context" = "'async' call cannot occur in %select{<<ERROR>>|a default argument|a property wrapper initializer|a property initializer|a global variable initializer|a lazy variable initializer|an enum case raw value|a catch pattern|a catch guard expression|a defer body}0";
"await_in_illegal_context" = "'await' operation cannot occur in %select{<<ERROR>>|a default argument|a property wrapper initializer|a property initializer|a global variable initializer|a lazy variable initializer|an enum case raw value|a catch pattern|a catch guard expression|a defer body}0";
"async_let_in_illegal_context" = "async let %0 cannot be referenced in %select{<<ERROR>>|a default argument|a property wrapper initializer|a property initializer|a global variable initializer|a lazy variable initializer|an enum case raw value|a catch pattern|a catch guard expression|a defer body}1";
"async_let_binding_illegal_context" = "'async let' cannot be used on declarations in %select{<<ERROR>>|a default argument|a property wrapper initializer|a property initializer|a global variable initializer|a lazy variable initializer|an enum case raw value|a catch pattern|a catch guard expression|a defer body}0";
"objc_ambiguous_async_convention" = "%0 overrides or implements protocol requirements for Objective-C declarations with incompatible async conventions";
"objc_ambiguous_async_convention_candidate" = "%0 provides async here";
"async_objc_dynamic_self" = "asynchronous method returning 'Self' cannot be '@objc'";
"actor_inheritance" = "%select{actor|distributed actor}0 types do not support inheritance";
"actor_protocol_illegal_inheritance" = "non-actor type %0 cannot conform to the %1 protocol";
"distributed_actor_conformance_missing_system_type" = "distributed actor %0 does not declare ActorSystem it can be used with";
"note_distributed_actor_system_can_be_defined_using_defaultdistributedactorsystem" = "you can provide a module-wide default actor system by declaring:
typealias DefaultDistributedActorSystem = <#ConcreteActorSystem#>
";
"distributed_actor_protocol_illegal_inheritance" = "non-distributed actor type %0 cannot conform to the 'DistributedActor' protocol";
"actor_cannot_inherit_distributed_actor_protocol" = "actor type %0 cannot conform to the 'DistributedActor' protocol. Isolation rules of these actor types are not interchangeable.";
"broken_distributed_actor_requirement" = "DistributedActor protocol is broken: unexpected requirement";
"distributed_actor_system_conformance_missing_adhoc_requirement" = "%kind0 is missing witness for protocol requirement %1";
"override_implicit_unowned_executor" = "cannot override an actor's 'unownedExecutor' property that wasn't explicitly defined";
"actor_isolated_non_self_reference" = "%4 %kind0 can not be %select{referenced|mutated|used 'inout'}1 %select{from outside the actor|on a different actor instance|on a nonisolated actor instance|from a Sendable function|from a Sendable closure|from an 'async let' initializer|from global actor %3|from the main actor|from a nonisolated context|from a nonisolated autoclosure}2";
"distributed_actor_isolated_non_self_reference" = "distributed actor-isolated %kind0 can not be accessed from a nonisolated context";
"conflicting_stored_property_isolation" = "%select{default|memberwise}0 initializer for %1 cannot be both %2 and %3";
"property_requires_actor" = "initializer for %0 %1 is %2";
"isolated_default_argument_context" = "%0 default value in a %1 context";
"conflicting_default_argument_isolation" = "default argument cannot be both %0 and %1";
"distributed_decl_needs_explicit_distributed_import" = "%kind0 declared without importing module 'Distributed'";
"distributed_func_cannot_overload_on_async_only" = "%0 previously declared here, cannot overload distributed methods on effect only";
"distributed_func_other_ambiguous_overload_here" = "ambiguous distributed func %0 declared here";
"actor_isolated_inout_state" = "actor-isolated %kind0 cannot be passed 'inout' to%select{| implicitly}1 'async' function call";
"actor_isolated_mutating_func" = "cannot call mutating async function %0 on actor-isolated %kind1";
"actor_isolated_call" = "call to %0 function in a synchronous %1 context";
"actor_isolated_call_decl" = "call to %0 %kind1 in a synchronous %2 context";
"actor_isolated_partial_apply" = "actor-isolated %kind0 can not be partially applied";
"concurrent_access_local" = "use of local %kind0 in concurrently-executing code";
"actor_isolated_keypath_component" = "cannot form key path to %0 %kind1";
"effectful_keypath_component" = "cannot form key path to %0 with 'throws' or 'async'";
"local_function_executed_concurrently" = "concurrently-executed %kind0 must be marked as '@Sendable'";
"sendable_isolated_sync_function" = "%0 synchronous %kind1 cannot be marked as '@Sendable'";
"nonsendable_instance_method" = "instance method of non-Sendable type %0 cannot be marked as '@Sendable'";
"concurrent_access_of_local_capture" = "%select{mutation of|reference to}0 captured %kind1 in concurrently-executing code";
"concurrent_access_of_inout_param" = "mutable capture of 'inout' parameter %0 is not allowed in concurrently-executing code";
"non_sendable_capture" = "capture of %1 with non-sendable type %0 in a `@Sendable` %select{local function|closure}2";
"non_sendable_isolated_capture" = "capture of %1 with non-sendable type %0 in an isolated %select{local function|closure}2";
"implicit_async_let_non_sendable_capture" = "capture of %1 with non-sendable type %0 in 'async let' binding";
"self_capture_deinit_task" = "capture of 'self' in a closure that outlives deinit";
"implicit_non_sendable_capture" = "implicit capture of %1 requires that %0 conforms to `Sendable`";
"actor_isolated_sync_func" = "calls to %kind0 from outside of its actor context are implicitly asynchronous";
"actor_isolated_sync_func_value" = "calls function of type %0 from outside of its actor context are implicitly asynchronous";
"note_distributed_actor_isolated_method" = "distributed actor-isolated %kind0 declared here";
"distributed_actor_isolated_method" = "only 'distributed' instance methods can be called on a potentially remote distributed actor";
"distributed_local_cannot_be_used" = "'local' cannot be used in user-defined code currently";
"distributed_actor_func_param_not_codable" = "parameter '%0' of type %1 in %2 does not conform to serialization requirement '%3'";
"distributed_actor_target_result_not_codable" = "result type %0 of %kindbase1 does not conform to serialization requirement '%2'";
"distributed_actor_system_serialization_req_must_be_protocol" = "'SerializationRequirement' type witness %0 must be a protocol type";
"distributed_actor_remote_func_implemented_manually" = "distributed instance method's %0 remote counterpart %1 cannot not be implemented manually.";
"nonisolated_distributed_actor_storage" = "'nonisolated' can not be applied to distributed actor stored properties";
"distributed_actor_func_nonisolated" = "cannot declare method %0 as both 'nonisolated' and 'distributed'";
"distributed_actor_func_inout" = "cannot declare 'inout' argument %0 in %kind1";
"distributed_actor_func_unsupported_specifier" = "cannot declare '%0' argument %1 in %kind2";
"distributed_actor_func_closure" = "%kind0 cannot declare closure arguments, as they cannot be serialized";
"distributed_actor_func_variadic" = "cannot declare variadic argument %0 in %kind1";
"distributed_actor_remote_func_is_not_static" = "remote function %0 must be static";
"distributed_actor_remote_func_is_not_async_throws" = "remote function %0 must be 'async throws'.";
"distributed_actor_remote_func_must_not_be_distributed" = "remote function %0 must be 'async throws'.";
"actor_mutable_state" = "mutation of this %0 is only permitted within the actor";
"shared_mutable_state_access" = "reference to %kind0 is not concurrency-safe because it involves shared mutable state";
"shared_mutable_state_decl" = "%kind0 is not concurrency-safe because it is nonisolated global shared mutable state";
"shared_immutable_state_decl" = "%kind1 is not concurrency-safe because non-'Sendable' type %0 may have shared mutable state";
"shared_state_make_immutable" = "convert %0 to a 'let' constant to make 'Sendable' shared state immutable";
"shared_state_main_actor_node" = "annotate %0 with '@MainActor' if property should only be accessed from the main actor";
"shared_state_nonisolated_unsafe" = "disable concurrency-safety checks if accesses are protected by an external synchronization mechanism";
"actor_isolated_witness" = "%select{|distributed }0%1 %kind2 cannot be used to satisfy %3 protocol requirement";
"actor_cannot_conform_to_global_actor_protocol" = "actor %0 cannot conform to global actor isolated protocol %1";
"protocol_isolated_to_global_actor_here" = "%0 is isolated to global actor %1 here";
"isolated_parameter_not_actor" = "'isolated' parameter type %0 does not conform to 'Actor' or 'DistributedActor'";
"isolated_parameter_duplicate" = "cannot have more than one 'isolated' parameter";
"isolated_parameter_duplicate_type" = "function type cannot have more than one 'isolated' parameter";
"isolated_parameter_previous_note" = "previous 'isolated' parameter %0";
"isolated_parameter_combined_global_actor_attr" = "%0 with 'isolated' parameter cannot have a global actor";
"isolated_parameter_closure_combined_global_actor_attr" = "closure with 'isolated' parameter %0 cannot have a global actor";
"isolated_parameter_global_actor_type" = "function type cannot have global actor and 'isolated' parameter";
"isolated_parameter_combined_nonisolated" = "%0 with 'isolated' parameter cannot be 'nonisolated'";
"isolated_parameter_isolated_attr_type" = "function with 'isolated' parameter cannot also be '@isolated(%0)'";
"isolated_attr_global_actor_type" = "function type cannot have both a global actor and '@isolated(%0)'";
"isolated_attr_bad_convention" = "'@isolated(%0)' function type cannot have %1 convention";
"in_derived_conformance" = "in derived conformance to %0";
"in_derived_witness" = "in %0 %1 for derived conformance to %2";
"non_sendable_param_type" = "non-sendable type %0 %select{passed in call to %3 %kind2|exiting %3 context in call to nonisolated %kind2|passed in implicitly asynchronous call to %3 %kind2|in parameter of the protocol requirement satisfied by %3 %kind2|in parameter of superclass method overridden by %3 %kind2|in parameter of %3 '@objc' %kind2}1 cannot cross actor boundary";
"non_sendable_call_argument" = "passing argument of non-sendable type %0 %select{into %2 context|outside of %2 context}1 may introduce data races";
"non_sendable_result_type" = "non-sendable type %0 returned by %select{call to %3 %kind2|call from %4 context to nonisolated %kind2|implicitly asynchronous call to %3 %kind2|%3 %kind2 satisfying protocol requirement|%3 overriding %kind2|%3 '@objc' %kind2}1 cannot cross actor boundary";
"non_sendable_call_result_type" = "non-sendable type %0 returned by %select{implicitly asynchronous |}1call to %2 function cannot cross actor boundary";
"non_sendable_property_type" = "non-sendable type %0 in %select{%select{asynchronous access to %4 %kind1|asynchronous access from %4 context to nonisolated %kind1|implicitly asynchronous access to %4 %kind1|conformance of %4 %kind1 to protocol requirement|%4 overriding %kind1|%4 '@objc' %kind1}3|captured local %1}2 cannot cross %select{actor|task}2 boundary";
"non_sendable_keypath_capture" = "cannot form key path that captures non-sendable type %0";
"non_concurrent_type_member" = "%select{stored property %2|associated value %2}1 of 'Sendable'-conforming %kind3 has non-sendable type %0";
"concurrent_value_class_mutable_property" = "stored property %0 of 'Sendable'-conforming %kind1 is mutable";
"concurrent_value_outside_source_file" = "conformance to 'Sendable' must occur in the same source file as %kind0; use '@unchecked Sendable' for retroactive conformance";
"concurrent_value_nonfinal_class" = "non-final class %0 cannot conform to 'Sendable'; use '@unchecked Sendable'";
"concurrent_value_inherit" = "'Sendable' class %1 cannot inherit from another class%select{| other than 'NSObject'}0";
"non_sendable_type" = "type %0 does not conform to the 'Sendable' protocol";
"sendable_raw_storage" = "struct %0 with @_rawLayout does not conform to the 'Sendable' protocol";
"unchecked_conformance_not_special" = "@unchecked conformance to %0 has no meaning";
"restate_unchecked_sendable" = "class %0 must restate inherited '@unchecked Sendable' conformance";
"unchecked_not_inheritance_clause" = "'unchecked' attribute only applies in inheritance clauses";
"unchecked_not_existential" = "'unchecked' attribute cannot apply to non-protocol type %0";
"preconcurrency_conformance_not_used" = "@preconcurrency attribute on conformance to %0 has no effect";
"preconcurrency_not_inheritance_clause" = "'preconcurrency' attribute only applies in inheritance clauses";
"preconcurrency_not_existential" = "'preconcurrency' attribute cannot apply to non-protocol type %0";
"redundant_any_in_existential" = "redundant 'any' in type %0";
"any_not_existential" = "'any' has no effect on %select{concrete type|type parameter}0 %1";
"incorrect_optional_any" = "optional 'any' type must be written %0";
"existential_requires_any" = "use of %select{protocol |}2%0 as a type must be written %1";
"inverse_requires_any" = "constraint that suppresses conformance requires 'any'";
"nonisolated_let" = "'nonisolated' is meaningless on 'let' declarations because they are immutable";
"nonisolated_mutable_storage" = "'nonisolated' cannot be applied to mutable stored properties";
"nonisolated_mutable_storage_note" = "convert %0 to a 'let' constant or consider declaring it 'nonisolated(unsafe)' if manually managing concurrency safety";
"nonisolated_unsafe_sendable_constant" = "'nonisolated(unsafe)' is unnecessary for a constant with 'Sendable' type %0, consider removing it";
"unsafe_sendable_actor_constant" = "'(unsafe)' is unnecessary for a constant public actor property with 'Sendable' type %0, consider removing it";
"nonisolated_unsafe_sendable_actor_constant" = "'nonisolated(unsafe)' is unnecessary for a constant actor-isolated property with 'Sendable' type %0, consider removing it";
"nonisolated_non_sendable" = "'nonisolated' can not be applied to variable with non-'Sendable' type %0";
"nonisolated_local_var" = "'nonisolated' can not be applied to local variables";
"nonisolated_actor_sync_init" = "'nonisolated' on an actor's synchronous initializer is invalid";
"nonisolated_wrapped_property" = "'nonisolated' is not supported on properties with property wrappers";
"non_sendable_from_deinit" = "cannot access %1 %2 with a non-sendable type %0 from nonisolated deinit";
"actor_instance_property_wrapper" = "%0 property in property wrapper type %1 cannot be isolated to the actor instance; consider 'nonisolated'";
"distributed_actor_func_defined_outside_of_distributed_actor" = "distributed instance method %0 is declared outside of an distributed actor";
"distributed_actor_local_var" = "'distributed' can not be applied to local variables";
"distributed_actor_property" = "'distributed' can not be applied to local properties";
"distributed_actor_storage" = "'distributed' can not be applied to actor properties; Only functions can be 'distributed'";
"distributed_actor_not_actor" = "'distributed' can only be applied to 'actor' definitions, and distributed actor-isolated async functions";
"distributed_actor_not_actor_func" = "'distributed' can only be applied to distributed actor async functions";
"distributed_actor_func_static" = "'distributed' method cannot be 'static'";
"distributed_actor_func_not_in_distributed_actor" = "'distributed' method can only be declared within 'distributed actor'";
"distributed_actor_user_defined_special_property" = "property %0 cannot be defined explicitly, as it conflicts with distributed actor synthesized stored property";
"distributed_property_can_only_be_computed_get_only" = "'distributed' computed property %0 cannot have setter";
"distributed_property_cannot_be_static" = "'distributed' property %0 cannot be 'static'";
"distributed_property_can_only_be_computed" = "%kind0 cannot be 'distributed', only computed properties can";
"distributed_property_accessor_only_get_can_be_distributed" = "only 'get' accessors may be 'distributed'";
"distributed_actor_isolated_property" = "access to %kind0 is only permitted within distributed actor %1";
"distributed_actor_synchronous_access_distributed_computed_property" = "access to %kind0 from outside the distributed actor %1 must be asynchronous";
"concurrency_lib_missing" = "missing '%0' declaration, probably because the '_Concurrency' module was not imported";
"async_main_no_concurrency" = "'_Concurrency' module not imported, required for async main";
"multiple_global_actors" = "declaration can not have multiple global actor attributes (%0 and %1)";
"global_actor_disallowed" = "%0 cannot have a global actor";
"global_actor_on_actor_class" = "actor %0 cannot have a global actor";
"global_actor_on_local_variable" = "local variable %0 cannot have a global actor";
"unsafe_global_actor" = "'(unsafe)' global actors are deprecated; use '@preconcurrency' instead";
"global_actor_arg" = "global actor attribute %0 cannot have arguments";
"global_actor_non_final_class" = "non-final class %0 cannot be a global actor";
"global_actor_top_level_var" = "top-level code variables cannot have a global actor";
"global_actor_access" = "%select{private|fileprivate|internal|package|public|open}0 %kind1 cannot have %select{private|fileprivate|internal|package|%error|%error}2 global actor %3";
"global_actor_not_usable_from_inline" = "global actor for %kind0 must be '@usableFromInline' or public";
"move_global_actor_attr_to_storage_decl" = "move global actor attribute to %kind0";
"actor_isolation_multiple_attr" = "%kind0 has multiple actor-isolation attributes ('%1' and '%2')";
"actor_isolation_override_mismatch" = "%0 %kind1 has different actor isolation from %2 overridden declaration";
"actor_isolation_superclass_mismatch" = "%0 class %1 has different actor isolation from %2 superclass %3";
"async_decl_must_be_available_from_async" = "asynchronous %0 must be available from asynchronous contexts";
"async_named_decl_must_be_available_from_async" = "asynchronous %kind0 must be available from asynchronous contexts";
"async_unavailable_decl" = "%kindbase0 is unavailable from asynchronous contexts%select{|; %1}1";
"string_processing_lib_missing" = "missing '%0' declaration, probably because the '_StringProcessing' module was not imported properly";
"regex_capture_types_failed_to_decode" = "failed to decode capture types for regular expression literal; this may be a compiler bug";
"must_import_regex_builder_module" = "regex builder requires the 'RegexBuilder' module be imported'";
"unsupported_recursive_struct" = "value type %0 cannot have a stored property that recursively contains it";
"enum_non_well_founded" = "enum containing only recursive cases is impossible to instantiate";
"recursive_enum_not_indirect" = "recursive enum %0 is not marked 'indirect'";
"unsupported_infinitely_sized_type" = "value type %0 has infinite size";
"note_type_cycle_starts_here" = "cycle beginning here: %0";
"note_recursive_enum_case_here" = "recursive case here";
"sugar_type_not_found" = "broken standard library: cannot find %select{Array|Optional|ImplicitlyUnwrappedOptional|Dictionary|Error}0 type";
"optional_intrinsics_not_found" = "broken standard library: cannot find intrinsic operations on Optional<T>";
"pointer_argument_intrinsics_not_found" = "broken standard library: cannot find intrinsic operations on UnsafeMutablePointer<T>";
"array_literal_intrinsics_not_found" = "broken standard library: cannot find intrinsic operations on Array<T>";
"class_super_access" = "class %select{must be declared %select{%select{private|fileprivate|internal|package|%error|%error}1|private or fileprivate}3|cannot be declared %select{in this context|fileprivate|internal|package|public|open}1}0 because its superclass %select{is %select{private|fileprivate|internal|package|'@_spi'|'@_spi'}2|uses %select{a private|a fileprivate|an internal|a package|an '@_spi'|an '@_spi'}2 type as a generic parameter}4";
"class_super_access_warn" = "class %select{should be declared %select{private|fileprivate|internal|package|%error|%error}1|should not be declared %select{in this context|fileprivate|internal|package|public|open}1}0 because its superclass %select{is %select{private|fileprivate|internal|package|'@_spi'|'@_spi'}2|uses %select{a private|a fileprivate|an internal|a package|an '@_spi'|an '@_spi'}2 type as a generic parameter}4";
"class_super_not_usable_from_inline" = "%select{type referenced from |}0the superclass of a '@usableFromInline' class must be '@usableFromInline' or public";
"class_super_not_usable_from_inline_warn" = "%select{type referenced from |}0the superclass of a '@usableFromInline' class should be '@usableFromInline' or public";
"dot_protocol_on_non_existential" = "cannot use 'Protocol' with non-protocol type %0";
"tuple_single_element" = "cannot create a single-element tuple with an element label";
"tuple_pack_element_label" = "cannot use label with pack expansion tuple element";
"tuple_move_only_not_supported" = "tuple with noncopyable element type %0 is not supported";
"tuple_containing_move_only_not_supported" = "type %0 containing noncopyable element is not supported";
"vararg_not_allowed" = "variadic parameter cannot appear outside of a function parameter list";
"more_than_one_pack_in_type" = "generic type cannot declare more than one type pack";
"enum_with_pack" = "enums cannot declare a type pack";
"superclass_with_pack" = "cannot inherit from a generic class that declares a type pack";
"expansion_not_allowed" = "pack expansion %0 can only appear in a function parameter list, tuple element, or generic argument of a variadic type";
"expansion_expr_not_allowed" = "value pack expansion can only appear inside a function argument list, tuple element, or as the expression of a for-in loop";
"invalid_expansion_argument" = "cannot pass value pack expansion to non-pack parameter of type %0";
"expansion_not_variadic" = "pack expansion %0 must contain at least one pack reference";
"pack_reference_outside_expansion" = "pack reference %0 can only appear in pack expansion ";
"each_non_pack" = "'each' cannot be applied to non-pack type %0";
"pack_reference_must_be_in_expansion" = "pack reference %0 requires expansion using keyword 'repeat'";
"pack_type_requires_keyword_each" = "type pack %0 must be referenced with 'each'";
"value_pack_requires_keyword_each" = "value pack %0 must be referenced with 'each'";
"tuple_duplicate_label" = "cannot create a tuple with a duplicate element label";
"multiple_ellipsis_in_tuple" = "only a single element can be variadic";
"cannot_convert_tuple_into_pack_expansion_parameter" = "value pack expansion at parameter #%0 expects %1 separate arguments%select{|; remove extra parentheses to change tuple into separate arguments}2";
"cannot_convert_tuple_into_pack_expansion_parameter_note" = "value pack expansion at parameter #%0 expects %1 separate arguments";
"value_expansion_not_variadic" = "value pack expansion must contain at least one pack reference";
"expansion_not_same_shape" = "pack expansion %0 requires that %1 and %2 have the same shape";
"expansion_expr_not_same_shape" = "pack expansion requires that %0 and %1 have the same shape";
"enum_element_ellipsis" = "variadic enum cases are not supported";
"unlabeled_parameter_following_variadic_parameter" = "a parameter following a variadic parameter requires a label";
"closure_unlabeled_parameter_following_variadic_parameter" = "no parameters may follow a variadic parameter in a closure";
"parameter_vararg_default" = "variadic parameter cannot have a default value";
"implicitly_unwrapped_optional_in_illegal_position_interpreted_as_optional" = "using '!' is not allowed here; treating this as '?' instead";
"implicitly_unwrapped_optional_deprecated_in_this_position" = "using '!' here is deprecated and will be removed in a future release";
"implicitly_unwrapped_optional_in_illegal_position" = "using '!' is not allowed here; perhaps '?' was intended?";
"invalid_ownership_type" = "%0 may only be applied to class and class-bound protocol types, not %1";
"invalid_ownership_protocol_type" = "%0 must not be applied to non-class-bound %1; consider adding a protocol conformance that has a class bound";
"invalid_ownership_incompatible_class" = "%0 is incompatible with %1 references";
"invalid_ownership_with_optional" = "%0 variable cannot have optional type";
"invalid_ownership_not_optional" = "%0 variable should have optional type %1";
"invalid_ownership_is_let" = "%0 must be a mutable variable, because it may change at runtime";
"ownership_invalid_in_protocols" = "%0 cannot be applied to a property declaration in a protocol";
"required_initializer_nonclass" = "'required' initializer in non-class type %0";
"required_initializer_in_extension" = "'required' initializer must be declared directly in class %0 (not in an extension)";
"required_initializer_missing" = "'required' initializer %0 must be provided by subclass of %1";
"required_initializer_here" = "'required' initializer is declared in superclass here";
"required_initializer_not_accessible" = "'required' initializer must be accessible wherever class %0 can be subclassed";
"required_initializer_missing_keyword" = "'required' modifier must be present on all overrides of a required initializer";
"required_initializer_override_wrong_keyword" = "use the 'required' modifier to override a required initializer";
"required_initializer_override_keyword" = "'override' is implied when overriding a required initializer";
"overridden_required_initializer_here" = "overridden required initializer is here";
"attribute_requires_function_type" = "@%0 attribute only applies to function types";
"generic_function_type" = "function values cannot be generic";
"unsupported_convention" = "convention '%0' not supported";
"invalid_isolated_and_convention_attributes" = "'@convention(%0)' attribute is not allowed on '@isolated' types";
"unreferenced_generic_parameter" = "generic parameter '%0' is not used in function signature";
"unexpected_ctype_for_non_c_convention" = "convention '%0' does not support the 'cType' argument label, did you mean @convention(c, cType: \"%1\") or @convention(block, cType: \"%1\") instead?";
"unable_to_parse_c_function_type" = "unable to parse '%0'; it should be a C function pointer type or a block pointer type";
"unsupported_opaque_type" = "'some' types are only permitted in properties, subscripts, and functions";
"unsupported_opaque_type_in_existential" = "'some' types cannot be used in constraints on existential types";
"opaque_type_unsupported_pattern" = "'some' type can only be declared on a single property declaration";
"opaque_type_in_protocol_requirement" = "'some' type cannot be the return type of a protocol requirement; did you mean to add an associated type?";
"opaque_type_in_parameter" = "'some' cannot appear in parameter position in %select{result|parameter}0 type %1";
"attr_only_on_parameters_of_differentiable" = "'%0' may only be used on parameters of '@differentiable' function types";
"differentiable_function_type_invalid_parameter" = "parameter type '%0' does not conform to 'Differentiable'%select{| and satisfy '%0 == %0.TangentVector'}1, but the enclosing function type is '@differentiable%select{|(_linear)}1'%select{|; did you want to add '@noDerivative' to this parameter?}2";
"differentiable_function_type_invalid_result" = "result type '%0' does not conform to 'Differentiable'%select{| and satisfy '%0 == %0.TangentVector'}1, but the enclosing function type is '@differentiable%select{|(_linear)}1'";
"differentiable_function_type_void_result" = "'@differentiable' function returning Void must have at least one differentiable inout parameter, i.e. a non-'@noDerivative' parameter whose type conforms to 'Differentiable'";
"differentiable_function_type_no_differentiability_parameters" = "'@differentiable' function type requires at least one differentiability parameter, i.e. a non-'@noDerivative' parameter whose type conforms to 'Differentiable'%select{| with its 'TangentVector' equal to itself}0";
"opened_bad_constraint_type" = "@opened constraint type %0 is not a protocol or protocol composition";
"opened_bad_interface_type" = "@opened interface type %0 is not a type parameter";
"sil_function_input_label" = "SIL function types cannot have labeled inputs";
"sil_non_coro_yields" = "non-coroutine SIL function types cannot have @yield results";
"sil_function_invalid_convention" = "convention attribute isn't valid on a %select{parameter|result|callee}0";
"ast_subst_function_type" = "substitutions cannot be provided on a formal function type";
"sil_function_multiple_error_results" = "SIL function types cannot have multiple @error results";
"unsupported_sil_convention" = "convention '%0' not supported in SIL";
"illegal_sil_type" = "type %0 is not a legal SIL value type";
"sil_box_arg_mismatch" = "SIL box type has wrong number of generic arguments for layout";
"sil_pack_element_uuid_not_found" = "open_pack_element instruction not found for @pack_element type UUID; possible forward reference?";
"sil_metatype_without_repr" = "metatypes in SIL must have @thin, @thick, or @objc_metatype attribute";
"sil_metatype_multiple_reprs" = "metatypes in SIL can only be one of @thin, @thick, or @objc_metatype";
"sil_metatype_not_metatype" = "@thin, @thick, or @objc_metatype can only apply to metatype types in SIL";
"objc_interop_disabled" = "Objective-C interoperability is disabled";
"attr_used_without_required_module" = "%0 attribute used without importing module %1";
"invalid_objc_decl_context" = "@objc can only be used with members of classes, @objc protocols, and concrete extensions of classes";
"invalid_objc_decl" = "only classes (and their extensions), non-marker protocols, methods, initializers, properties, and subscript declarations can be declared @objc";
"invalid_objc_swift_rooted_class" = "only classes that inherit from NSObject can be declared @objc";
"invalid_objc_swift_root_class_insert_nsobject" = "inherit from 'NSObject' to silence this error";
"invalid_nonobjc_decl" = "only class members and extensions of classes can be declared @nonobjc";
"invalid_nonobjc_extension" = "only extensions of classes can be declared @nonobjc";
"objc_in_extension_context" = "members of constrained extensions cannot be declared @objc";
"objc_in_generic_extension" = "extensions of %select{classes from generic context|generic classes}0 cannot contain '@objc' members";
"objc_in_resilient_extension" = "'@objc' %0 in extension of subclass of %1 requires %2 %3";
"objc_operator" = "operator methods cannot be declared @objc";
"objc_operator_proto" = "@objc protocols must not have operator requirements";
"objc_for_generic_class" = "generic subclasses of '@objc' classes cannot have an explicit '@objc' because they are not directly visible from Objective-C";
"objc_for_resilient_class" = "explicit '@objc' on subclass of %0 requires %1 %2";
"objc_getter_for_nonobjc_property" = "'@objc' getter for non-'@objc' property";
"objc_getter_for_nonobjc_subscript" = "'@objc' getter for non-'@objc' subscript";
"objc_setter_for_nonobjc_property" = "'@objc' setter for non-'@objc' property";
"objc_setter_for_nonobjc_subscript" = "'@objc' setter for non-'@objc' subscript";
"objc_enum_generic" = "'@objc' enum cannot be generic";
"objc_name_req_nullary" = "'@objc' %0 must have a simple name";
"objc_name_subscript" = "'@objc' subscript cannot have a name; did you mean to put the name on the getter or setter?";
"objc_name_deinit" = "'@objc' deinitializer cannot have a name";
"objc_name_func_mismatch" = "'@objc' %select{initializer|method}0 name provides %select{one argument name|names for %1 arguments}2, but %select{initializer|method}0 has %select{one parameter|%3 parameters}4%select{| (%select{|including }4the error parameter)}5";
"objc_enum_case_req_name" = "attribute has no effect; cases within an '@objc' enum are already exposed to Objective-C";
"objc_enum_case_req_objc_enum" = "'@objc' enum case is not allowed outside of an '@objc' enum";
"objc_enum_case_multi" = "'@objc' enum case declaration defines multiple enum cases with the same Objective-C name";
"objc_extension_not_class" = "'@objc' can only be applied to an extension of a class";
"objc_invalid_on_var" = "property cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}0 because its type cannot be represented in Objective-C";
"objc_invalid_on_subscript" = "subscript cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}0 because its type cannot be represented in Objective-C";
"objc_invalid_on_static_subscript" = "%0 cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}1";
"objc_invalid_with_generic_params" = "%0 cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}1 because it has generic parameters";
"objc_invalid_with_generic_requirements" = "%0 cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}1 because it has a 'where' clause";
"objc_convention_invalid" = "%0 is not representable in Objective-C, so it cannot be used with '@convention(%1)'";
"paren_void_probably_void" = "when calling this function in Swift 4 or later, you must pass a '()' tuple; did you mean for the input type to be '()'?";
"not_objc_empty_protocol_composition" = "'Any' is not considered '@objc'; use 'AnyObject' instead";
"not_objc_protocol" = "protocol-constrained type containing protocol %0 cannot be represented in Objective-C";
"not_objc_class_constraint" = "protocol-constrained type containing class %0 cannot be represented in Objective-C";
"not_objc_error_protocol_composition" = "protocol-constrained type containing 'Error' cannot be represented in Objective-C";
"not_objc_empty_tuple" = "empty tuple type cannot be represented in Objective-C";
"not_objc_non_trivial_cxx_class" = "non-trivial C++ classes cannot be represented in Objective-C";
"not_objc_tuple" = "tuples cannot be represented in Objective-C";
"not_objc_swift_class" = "classes not annotated with @objc cannot be represented in Objective-C";
"not_objc_swift_struct" = "Swift structs cannot be represented in Objective-C";
"not_objc_swift_enum" = "non-'@objc' enums cannot be represented in Objective-C";
"not_objc_generic_type_param" = "generic type parameters cannot be represented in Objective-C";
"not_objc_function_type_param" = "function types cannot be represented in Objective-C unless their parameters and returns can be";
"not_objc_function_type_throwing" = "throwing function types cannot be represented in Objective-C";
"objc_inferring_on_objc_protocol_member" = "inferring '@objc' because the declaration is a member of an '@objc' protocol";
"objc_overriding_objc_decl" = "overriding '@objc' %kind0 here";
"objc_witness_objc_requirement" = "satisfying requirement for %kind0 in protocol %1";
"no_opaque_return_type_of" = "unable to resolve type for _opaqueReturnTypeOf attribute";
"objc_observing_accessor" = "observing accessors are not allowed to be marked @objc";
"objc_init_accessor" = "init accessors cannot be marked @objc";
"objc_addressor" = "addressors are not allowed to be marked @objc";
"objc_coroutine_accessor" = "'read' and 'modify' accessors are not allowed to be marked @objc";
"objc_invalid_on_func_variadic" = "method cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}0 because it has a variadic parameter";
"objc_invalid_on_func_inout" = "method cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}0 because inout parameters cannot be represented in Objective-C";
"objc_invalid_on_func_param_type" = "method cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}1 because the type of the parameter %0 cannot be represented in Objective-C";
"objc_invalid_on_func_single_param_type" = "method cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}0 because the type of the parameter cannot be represented in Objective-C";
"objc_invalid_on_func_result_type" = "method cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}0 because its result type cannot be represented in Objective-C";
"objc_invalid_on_foreign_class" = "method cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}0 because Core Foundation types are not classes in Objective-C";
"objc_invalid_on_throwing_optional_result" = "throwing method cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}0 because it returns a value of optional type %1; 'nil' indicates failure to Objective-C";
"objc_invalid_on_throwing_result" = "throwing method cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}0 because it returns a value of type %1; return 'Void' or a type that bridges to an Objective-C class";
"objc_invalid_on_failing_init" = "a failable and throwing initializer cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}0 because 'nil' indicates failure to Objective-C";
"objc_in_objc_runtime_visible" = "%0 cannot be %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}1 because class %2 is only visible via the Objective-C runtime";
"objc_override_method_selector_mismatch" = "Objective-C method has a different selector from the method it overrides (%0 vs. %1)";
"objc_override_property_name_mismatch" = "Objective-C property has a different name from the property it overrides (%0 vs. %1)";
"objc_ambiguous_inference" = "ambiguous inference of Objective-C name for %kind0 (%1 vs %2)";
"objc_ambiguous_inference_candidate" = "%0 (in protocol %1) provides Objective-C name %2";
"objc_ambiguous_error_convention" = "%0 overrides or implements protocol requirements for Objective-C declarations with incompatible error argument conventions";
"objc_ambiguous_error_convention_candidate" = "%0 provides an error argument here";
"missing_bridging_function" = "missing '%select{_forceBridgeFromObjectiveC|_conditionallyBridgeFromObjectiveC}0'";
"objc_redecl" = "%select{initializer %1|implicit initializer %1|deinitializer|implicit deinitializer|method %1|getter for %1|subscript getter|setter for %1|subscript setter}0 with Objective-C selector %4 conflicts with %select{initializer %3|implicit initializer %3|deinitializer|implicit deinitializer|method %3|getter for %3|subscript getter|setter for %3|subscript setter}2 with the same Objective-C selector";
"objc_declared_here" = "%select{initializer %1|implicit initializer %1|deinitializer|implicit deinitializer|method %1|getter for %1|subscript getter|setter for %1|subscript setter}0 declared here";
"objc_redecl_same" = "%select{initializer %1|implicit initializer %1|deinitializer|implicit deinitializer|method %1|getter for %1|subscript getter|setter for %1|subscript setter}0 with Objective-C selector %4 conflicts with previous declaration with the same Objective-C selector";
"objc_override_other" = "%select{initializer %1|implicit initializer %1|deinitializer|implicit deinitializer|method %1|getter for %1|subscript getter|setter for %1|subscript setter}0 with Objective-C selector %4 conflicts with %select{initializer %3|implicit initializer %3|deinitializer|implicit deinitializer|method %3|getter for %3|subscript getter|setter for %3|subscript setter}2 from superclass %5 with the same Objective-C selector";
"objc_class_method_not_permitted" = "%select{initializer %1|implicit initializer %1|deinitializer|implicit deinitializer|method %1|getter for %1|subscript getter|setter for %1|subscript setter}0 defines Objective-C class method %2, which is not permitted by Swift";
"objc_witness_selector_mismatch" = "Objective-C method %2 provided by %select{initializer %1|implicit initializer %1|deinitializer|implicit deinitializer|method %1|getter for %1|subscript getter|setter for %1|subscript setter}0 does not match the requirement's selector (%3)";
"objc_optional_requirement_conflict" = "Objective-C method %4 provided by %select{initializer %1|implicit initializer %1|deinitializer|implicit deinitializer|method %1|getter for %1|subscript getter|setter for %1|subscript setter}0 conflicts with optional requirement %select{initializer %3|implicit initializer %3|deinitializer|implicit deinitializer|method %3|getter for %3|subscript getter|setter for %3|subscript setter}2 in protocol %5";
"objc_optional_requirement_swift_rename" = "rename %select{method|initializer|property|subscript}0 to match requirement %1";
"witness_non_objc" = "non-'@objc' %select{initializer %1|implicit initializer %1|deinitializer|implicit deinitializer|method %1|getter for %1|subscript getter|setter for %1|subscript setter}0 does not satisfy requirement of '@objc' protocol %2";
"witness_non_objc_optional" = "non-'@objc' %select{initializer %1|implicit initializer %1|deinitializer|implicit deinitializer|method %1|getter for %1|subscript getter|setter for %1|subscript setter}0 does not satisfy optional requirement of '@objc' protocol %2";
"witness_non_objc_storage" = "non-'@objc' %select{property %1|subscript}0 does not satisfy requirement of '@objc' protocol %2";
"witness_non_objc_storage_optional" = "non-'@objc' %select{property %1|subscript}0 does not satisfy optional requirement of '@objc' protocol %2";
"nonobjc_not_allowed" = "declaration is %select{marked @_cdecl|marked dynamic|marked @objc|marked @objcMembers|marked @IBOutlet|marked @IBAction|marked @IBSegueAction|marked @NSManaged|a member of an @objc protocol|implicitly @objc|an @objc override|an implementation of an @objc requirement|marked @IBInspectable|marked @GKInspectable|in an @objc extension of a class (without @nonobjc)|in an @_objcImplementation extension of a class (without final or @nonobjc)|marked @objc by an access note}0, and cannot be marked @nonobjc";
"exclusivity_on_wrong_decl" = "@exclusivity can only be used on class properties, static properties and global variables";
"exclusivity_on_computed_property" = "@exclusivity can only be used on stored properties";
"borrowed_with_objc_dynamic" = "%0 cannot be '@_borrowed' if it is '@objc dynamic'";
"borrowed_on_objc_protocol_requirement" = "%0 cannot be '@_borrowed' if it is an @objc protocol requirement";
"borrowed_with_effect" = "%0 cannot be '@_borrowed' if it is 'async' or 'throws'";
"dynamic_with_transparent" = "a declaration cannot be both '@_transparent' and 'dynamic'";
"dynamic_replacement_accessor_type_mismatch" = "replaced accessor %0's type does not match";
"dynamic_replacement_accessor_not_dynamic" = "replaced accessor for %0 is not marked dynamic";
"dynamic_replacement_accessor_not_explicit" = "replaced accessor %select{get|set|_read|_modify|willSet|didSet|unsafeAddress|addressWithOwner|addressWithNativeOwner|unsafeMutableAddress|mutableAddressWithOwner|}0 for %1 is not explicitly defined";
"dynamic_replacement_function_not_dynamic" = "replaced function %0 is not marked dynamic";
"dynamic_replacement_function_not_found" = "replaced function %0 could not be found";
"dynamic_replacement_accessor_not_found" = "replaced accessor for %0 could not be found";
"dynamic_replacement_accessor_ambiguous" = "replaced accessor for %0 occurs in multiple places";
"dynamic_replacement_accessor_ambiguous_candidate" = "candidate accessor found in module %0";
"dynamic_replacement_function_of_type_not_found" = "replaced function %0 of type %1 could not be found";
"dynamic_replacement_found_function_of_type" = "found function %0 of type %1";
"dynamic_replacement_not_in_extension" = "dynamicReplacement(for:) of %0 is not defined in an extension or at the file level";
"dynamic_replacement_must_not_be_dynamic" = "dynamicReplacement(for:) of %0 must not be dynamic itself";
"dynamic_replacement_replaced_not_objc_dynamic" = "%0 is not marked @objc dynamic";
"dynamic_replacement_replacement_not_objc_dynamic" = "%0 is marked @objc dynamic";
"dynamic_replacement_replaced_constructor_is_convenience" = "replaced constructor %0 is marked as convenience";
"dynamic_replacement_replaced_constructor_is_not_convenience" = "replaced constructor %0 is not marked as convenience";
"non_nominal_type_eraser" = "type eraser must be a class, struct, or enum";
"type_eraser_does_not_conform" = "type eraser %0 must conform to protocol %1";
"type_eraser_not_accessible" = "%select{private|fileprivate|internal|package|public|open}0 type eraser %1 cannot have more restrictive access than protocol %2 (which is %select{private|fileprivate|internal|package|public|open}3)";
"type_eraser_missing_init" = "type eraser %0 must have an initializer of the form 'init<T: %1>(erasing: T)'";
"type_eraser_unviable_init" = "type eraser %0 has no viable initializer of the form 'init<T: %1>(erasing: T)'";
"type_eraser_declared_here" = "type eraser declared here";
"type_eraser_failable_init" = "'init(erasing:)' cannot be failable";
"type_eraser_init_unsatisfied_requirements" = "'init(erasing:)' cannot have unsatisfied requirements when %0 = 'some %1'";
"type_eraser_init_not_accessible" = "%select{private|fileprivate|internal|package|public|open}0 'init(erasing:)' cannot have more restrictive access than protocol %1 (which is %select{private|fileprivate|internal|package|public|open}2)";
"type_eraser_init_spi" = "'init(erasing:)' is SPI, but protocol %0 is not%select{| in the same SPI groups as 'init(erasing:)'}1";
"availability_decl_unavailable" = "%0 is unavailable%select{ in %2|}1%select{|: %3}3";
"availability_decl_unavailable_rename" = "%0 has been %select{renamed to|replaced by}1%select{| instance method| property}2 '%3'%select{|: %4}4";
"availability_marked_unavailable" = "%0 has been explicitly marked unavailable here";
"availability_introduced_in_version" = "%0 was introduced in %1 %2";
"availability_obsoleted" = "%0 was obsoleted in %1 %2";
"availability_deprecated" = "%0 %select{is|%select{is|was}3}1 deprecated%select{| in %2%select{| %4}3}1%select{|: %5}5";
"availability_deprecated_rename" = "%0 %select{is|%select{is|was}3}1 deprecated%select{| in %2%select{| %4}3}1: %select{renamed to|replaced by}5%select{| instance method| property}6 '%7'";
"note_deprecated_rename" = "use '%0' instead";
"availability_decl_more_than_enclosing" = "%0 cannot be more available than enclosing scope";
"availability_implicit_decl_here" = "%0 implicitly declared here with availability of %1 %2 or newer";
"availability_decl_more_than_enclosing_here" = "enclosing scope requires availability of %0 %1 or newer";
"availability_decl_more_than_unavailable_enclosing_here" = "enclosing scope has been explicitly marked unavailable here";
"availability_decl_only_version_newer" = "%0 is only available in %1 %2 or newer";
"availability_decl_only_version_newer_for_clients" = "%0 is only available in %1 %2 or newer; clients of %3 may have a lower deployment target";
"availability_decl_only_version_newer_for_clients_warn" = "%0 is only available in %1 %2 or newer; clients of %3 may have a lower deployment target";
"availability_opaque_types_only_version_newer" = "'some' return types are only available in %0 %1 or newer";
"availability_concurrency_only_version_newer" = "concurrency is only available in %0 %1 or newer";
"availability_parameterized_protocol_only_version_newer" = "runtime support for parameterized protocol types is only available in %0 %1 or newer";
"availability_isolated_any_only_version_newer" = "runtime support for @isolated(any) function types is only available in %0 %1 or newer";
"availability_copyable_generics_casting_only_version_newer" = "runtime support for casting types with noncopyable generic arguments is only available in %0 %1 or newer";
"availability_escapable_generics_casting_only_version_newer" = "runtime support for casting types with nonescapable generic arguments is only available in %0 %1 or newer";
"availability_typed_throws_only_version_newer" = "runtime support for typed throws function types is only available in %0 %1 or newer";
"availability_variadic_type_only_version_newer" = "parameter packs in generic types are only available in %0 %1 or newer";
"availability_guard_with_version_check" = "add 'if #available' version check";
"availability_add_attribute" = "add @available attribute to enclosing %0";
"availability_inout_accessor_only_version_newer" = "cannot pass as inout because %0 is only available in %1 %2 or newer";
"availability_query_required_for_platform" = "condition required for target platform '%0'";
"availability_query_useless_enclosing_scope" = "unnecessary check for '%0'; enclosing scope ensures guard will always be true";
"availability_query_useless_enclosing_scope_here" = "enclosing scope here";
"availability_deinit_no_potential" = "deinitializer cannot be marked potentially unavailable with '@available'";
"availability_deinit_no_unavailable" = "deinitializer cannot be marked unavailable with '@available'";
"availability_global_script_no_potential" = "global variable cannot be marked potentially unavailable with '@available' in script mode";
"availability_global_script_no_unavailable" = "global variable cannot be marked unavailable with '@available' in script mode";
"availability_stored_property_no_potential" = "stored properties cannot be marked potentially unavailable with '@available'";
"availability_stored_property_no_unavailable" = "stored properties cannot be marked unavailable with '@available'";
"availability_enum_element_no_potential" = "enum cases with associated values cannot be marked potentially unavailable with '@available'";
"availability_enum_element_no_potential_warn" = "enum cases with associated values cannot be marked potentially unavailable with '@available'";
"availability_protocol_requires_version" = "protocol %0 requires %1 to be available in %2 %3 and newer";
"availability_protocol_requirement_here" = "protocol requirement here";
"public_decl_needs_availability" = "public declarations should have an availability attribute with an introduction version";
"attr_requires_decl_availability_for_platform" = "'%0' requires that %1 have explicit availability for %2";
"attr_requires_availability_for_platform" = "'%0' requires explicit availability for %1";
"availability_string_subscript_migration" = "subscripts returning String were obsoleted in Swift 4; explicitly construct a String from subscripted result";
"availability_unavailable_implicit_init" = "call to unavailable %kind0 from superclass %1 occurs implicitly at the end of this initializer";
"conformance_availability_unavailable" = "conformance of %0 to %1 is unavailable%select{ in %3|}2%select{|: %4}4";
"conformance_availability_marked_unavailable" = "conformance of %0 to %1 has been explicitly marked unavailable here";
"conformance_availability_introduced_in_version" = "conformance of %0 to %1 was introduced in %2 %3";
"conformance_availability_obsoleted" = "conformance of %0 to %1 was obsoleted in %2 %3";
"conformance_availability_deprecated" = "conformance of %0 to %1 %select{is|%select{is|was}4}2 deprecated%select{| in %3%select{| %5}4}2%select{|: %6}6";
"conformance_availability_only_version_newer" = "conformance of %0 to %1 is only available in %2 %3 or newer";
"discardable_result_on_void_never_function" = "@discardableResult declared on a function returning %select{Never|Void}0 is unnecessary";
"fixed_layout_attr_on_internal_type" = "'@_fixed_layout' attribute can only be applied to '@usableFromInline', package, or public declarations, but %0 is %select{private|fileprivate|internal|%error|%error|%error}1";
"fixed_layout_struct" = "'@frozen' attribute is now used for fixed-layout structs";
"frozen_attr_on_internal_type" = "'@frozen' attribute can only be applied to '@usableFromInline', package, or public declarations, but %0 is %select{private|fileprivate|internal|%error|%error|%error}1";
"usable_from_inline_attr_with_explicit_access" = "'@usableFromInline' attribute can only be applied to internal or package declarations, but %0 is %select{private|fileprivate|%error|package|public|open}1";
"inlinable_implies_usable_from_inline" = "'@usableFromInline' attribute has no effect on '@inlinable' %kind0";
"usable_from_inline_attr_in_protocol" = "'@usableFromInline' attribute cannot be used in protocols";
"local_type_in_inlinable_function" = "type %0 cannot be nested inside %select{a '@_transparent' function|an '@inlinable' function|an '@_alwaysEmitIntoClient' function|a default argument value|a property initializer in a '@frozen' type|a '@backDeployed' function'}1";
"resilience_decl_unavailable" = "%kind0 is %select{private|fileprivate|internal|package|%error|%error}1 and cannot be referenced from %select{a '@_transparent' function|an '@inlinable' function|an '@_alwaysEmitIntoClient' function|a default argument value|a property initializer in a '@frozen' type|a '@backDeployed' function'}2";
"resilience_decl_unavailable_warn" = "%kind0 is %select{private|fileprivate|internal|package|%error|%error}1 and should not be referenced from %select{a '@_transparent' function|an '@inlinable' function|an '@_alwaysEmitIntoClient' function|a default argument value|a property initializer in a '@frozen' type|a '@backDeployed' function'}2";
"inlinable_decl_ref_from_hidden_module" = "%kind0 cannot be used in %select{a '@_transparent' function|an '@inlinable' function|an '@_alwaysEmitIntoClient' function|a default argument value|a property initializer in a '@frozen' type|a '@backDeployed' function'}1 because %select{%2 was imported implementation-only|it is an SPI imported from %2|it is SPI|%2 was imported for SPI only|%2 was not imported by this file|C++ APIs from imported module %2 do not support library evolution|%2 was not imported publicly}3";
"inlinable_decl_ref_from_hidden_module_warn" = "%kind0 cannot be used in %select{a '@_transparent' function|an '@inlinable' function|an '@_alwaysEmitIntoClient' function|a default argument value|a property initializer in a '@frozen' type|a '@backDeployed' function'}1 because %select{<<ERROR>>|<<ERROR>>|<<ERROR>>|<<ERROR>>|%2 was not imported by this file}3; this is an error in the Swift 6 language mode";
"inlinable_typealias_desugars_to_type_from_hidden_module" = "%0 aliases '%1.%2' and cannot be used in %select{a '@_transparent' function|an '@inlinable' function|an '@_alwaysEmitIntoClient' function|a default argument value|a property initializer in a '@frozen' type|a '@backDeployed' function'}3 because %select{%4 has been imported as implementation-only|it is an SPI imported from %4|<<ERROR>>|%4 was imported for SPI only|%4 was not imported by this file|C++ types from imported module %4 do not support library evolution|%4 was not imported publicly}5";
"missing_import_inserted" = "The missing import of module %0 will be added implicitly";
"availability_macro_in_inlinable" = "availability macro cannot be used in %select{a '@_transparent' function|an '@inlinable' function|an '@_alwaysEmitIntoClient' function|a default argument value|a property initializer in a '@frozen' type|a '@backDeployed' function'}0";
"resilience_decl_declared_here" = "%kind0 is not '@usableFromInline' or public";
"class_designated_init_inlinable_resilient" = "initializer for class %0 is '%select{@_transparent|@inlinable|@_alwaysEmitIntoClient|%error}1' and must delegate to another initializer";
"attribute_invalid_on_stored_property" = "'%0' attribute cannot be applied to stored properties";
"inlinable_dynamic_not_supported" = "'@inlinable' attribute cannot be applied to 'dynamic' declarations";
"inlinable_decl_not_public" = "'@inlinable' attribute can only be applied to internal, package, or public declarations, but %0 is %select{private|fileprivate|%error|%error|%error|%error}1";
"inlinable_resilient_deinit" = "deinitializer can only be '@inlinable' if the class is '@_fixed_layout'";
"resilient_associated_type_less_available_requires_default" = "associated type %0 that is less available than its protocol must have a default";
"specialize_attr_nongeneric_trailing_where" = "trailing 'where' clause in '_specialize' attribute of non-generic function %0";
"specialize_missing_where_clause" = "missing 'where' clause in '_specialize' attribute";
"specialize_empty_where_clause" = "empty 'where' clause in '_specialize' attribute";
"specialize_attr_non_concrete_same_type_req" = "only concrete type same-type requirements are supported by '_specialize' attribute";
"specialize_attr_only_generic_param_req" = "only requirements on generic parameters are supported by '_specialize' attribute";
"specialize_attr_type_parameter_count_mismatch" = "too few generic parameters are specified in '_specialize' attribute (got %0, but expected %1)";
"specialize_attr_missing_constraint" = "missing constraint for %0 in '_specialize' attribute";
"specialize_attr_unsupported_kind_of_req" = "only same-type and layout requirements are supported by '_specialize' attribute";
"specialize_target_function_not_found" = "target function %0 could not be found";
"specialize_target_function_of_type_not_found" = "target function %0 of type %1 could not be found";
"specialize_found_function_of_type" = "found function %0 of type %1";
"pbd_never_used_stmtcond" = "value %0 was defined but never used; consider replacing with boolean test";
"unused_setter_parameter" = "setter argument %0 was never used, but the property was accessed";
"fixit_for_unused_setter_parameter" = "did you mean to use %0 instead of accessing the property's current value?";
"pbd_never_used" = "initialization of %select{variable|immutable value}1 %0 was never used; consider replacing with assignment to '_' or removing it";
"capture_never_used" = "capture %0 was never used";
"variable_never_used" = "%select{variable|immutable value}1 %0 was never used; consider replacing with '_' or removing it";
"immutable_value_never_used_but_assigned" = "immutable value %0 was never used; consider removing it";
"variable_never_mutated" = "variable %0 was never mutated; consider %select{removing 'var' to make it|changing to 'let'}1 constant";
"variable_never_read" = "variable %0 was written to, but never read";
"observe_keypath_property_not_objc_dynamic" = "passing reference to non-'@objc dynamic' property %0 to KVO method %1 may lead to unexpected behavior or runtime trap";
"default_magic_identifier_mismatch" = "parameter %0 with default argument '%1' passed to parameter %2, whose default argument is '%3'";
"change_caller_default_to_match_callee" = "did you mean for parameter %0 to default to '%1'?";
"silence_default_magic_identifier_mismatch" = "add parentheses to silence this warning";
"debug_long_function_body" = "%kind0 took %1ms to type-check (limit: %2ms)";
"debug_long_closure_body" = "closure took %0ms to type-check (limit: %1ms)";
"debug_long_expression" = "expression took %0ms to type-check (limit: %1ms)";
"empty_switch_stmt" = "'switch' statement body must have at least one 'case' or 'default' block; add a default case";
"non_exhaustive_switch" = "switch must be exhaustive";
"possibly_non_exhaustive_switch" = "the compiler is unable to check that this switch is exhaustive in reasonable time";
"missing_several_cases" = "add %select{missing cases|a default clause}0";
"missing_unknown_case" = "handle unknown values using \"@unknown default\"";
"non_exhaustive_switch_drop_unknown" = "remove '@unknown' to handle remaining values";
"missing_particular_case" = "add missing case: '%0'";
"redundant_particular_case" = "case is already handled by previous patterns; consider removing it";
"redundant_particular_literal_case" = "literal value is already handled by previous pattern; consider removing it";
"redundant_particular_literal_case_here" = "first occurrence of identical literal pattern is here";
"non_exhaustive_switch_unknown_only" = "switch covers known cases, but %0 may have additional unknown values%select{|, possibly added in future versions}1";
"override_nsobject_hashvalue_error" = "'NSObject.hashValue' is not overridable; did you mean to override 'NSObject.hash'?";
"override_nsobject_hash_error" = "'NSObject.hash(into:)' is not overridable; did you mean to override 'NSObject.hash'?";
"hashvalue_implementation" = "'Hashable.hashValue' is deprecated as a protocol requirement; conform type %0 to 'Hashable' by implementing 'hash(into:)' instead";
"executor_enqueue_deprecated_owned_job_implementation" = "'Executor.enqueue(Job)' is deprecated as a protocol requirement; conform type %0 to 'Executor' by implementing 'func enqueue(ExecutorJob)' instead";
"executor_enqueue_unused_implementation" = "'Executor.enqueue(ExecutorJob)' will never be used, due to the presence of 'enqueue(UnownedJob)'";
"property_wrapper_no_value_property" = "property wrapper type %0 does not contain a non-static property named %1";
"property_wrapper_ambiguous_value_property" = "property wrapper type %0 has multiple non-static properties named %1";
"property_wrapper_wrong_initial_value_init" = "%0 parameter type (%1) must be the same as its 'wrappedValue' property type (%2) or an @autoclosure thereof";
"property_wrapper_failable_init" = "property wrapper initializer %0 cannot be failable";
"property_wrapper_type_requirement_not_accessible" = "%select{private|fileprivate|internal|package|public|open}0 %kind1 cannot have more restrictive access than its enclosing property wrapper type %2 (which is %select{private|fileprivate|internal|package|public|open}3)";
"property_wrapper_ambiguous_enclosing_self_subscript" = "property wrapper type %0 has multiple enclosing-self subscripts %1";
"property_wrapper_dynamic_self_type" = "property wrapper %select{wrapped value|projected value}0 cannot have dynamic Self type";
"property_wrapper_var_must_be_static" = "property %0, must be static because property wrapper %1 can only be applied to static properties";
"property_wrapper_attribute_not_on_property" = "property wrapper attribute %0 can only be applied to a property";
"property_wrapper_param_not_supported" = "property wrapper attribute on parameter not yet supported on %0";
"property_wrapper_declared_here" = "property wrapper type %0 declared here";
"invalid_projection_argument" = "cannot use property wrapper projection %select{argument|parameter}0";
"property_wrapper_param_no_wrapper" = "parameter %0 does not have an attached property wrapper";
"property_wrapper_param_attr_arg" = "property wrapper has arguments in the wrapper attribute";
"property_wrapper_no_init_projected_value" = "property wrapper type %0 does not support initialization from a projected value";
"property_wrapper_param_mutating" = "property wrapper applied to parameter must have a nonmutating 'wrappedValue' getter";
"invalid_implicit_property_wrapper" = "inferred projection type %0 is not a property wrapper";
"property_wrapper_mutating_get_composed_to_get_only" = "property wrapper %0 with a mutating getter cannot be composed inside get-only property wrapper %1";
"property_wrapper_top_level" = "property wrappers are not yet supported in top-level code";
"property_wrapper_let" = "property wrapper can only be applied to a 'var'";
"property_wrapper_computed" = "property wrapper cannot be applied to a computed property";
"property_wrapper_effectful" = "property wrappers currently cannot define an 'async' or 'throws' accessor";
"property_with_wrapper_conflict_attribute" = "property %0 with a wrapper cannot also be %select{lazy|@NSCopying|@NSManaged|weak|unowned|unmanaged}1";
"property_wrapper_not_single_var" = "property wrapper can only apply to a single variable";
"property_with_wrapper_in_bad_context" = "%select{|non-static|non-static}1 %kind0 declared inside %select{a protocol|an extension|an enum}1 cannot have a wrapper";
"property_with_wrapper_overrides" = "property %0 with attached wrapper cannot override another property";
"property_wrapper_direct_init" = "initialize the property wrapper type directly with '(...)' on the attribute";
"property_wrapper_incompatible_property" = "property type %0 does not match that of the 'wrappedValue' property of its wrapper type %1";
"wrapped_value_mismatch" = "property type %0 does not match 'wrappedValue' type %1";
"composed_property_wrapper_mismatch" = "composed wrapper type %0 does not match type of '%1.wrappedValue', which is %2";
"property_wrapper_type_access" = "%select{%select{variable|constant}0|property}1 %select{must be declared %select{%select{private|fileprivate|internal|package|%error|%error}3|private or fileprivate}4|cannot be declared %select{in this context|fileprivate|internal|package|public|open}3}2 because its property wrapper type uses %select{a private|a fileprivate|an internal|a package|%error|%error}5 type";
"property_wrapper_type_not_usable_from_inline" = "property wrapper type referenced from a '@usableFromInline' %select{%select{variable|constant}0|property}1 must be '@usableFromInline' or public";
"property_wrapper_wrapperValue" = "property wrapper's 'wrapperValue' property should be renamed to 'projectedValue'; use of 'wrapperValue' is deprecated";
"property_wrapper_init_initialValue" = "property wrapper's 'init(initialValue:)' should be renamed to 'init(wrappedValue:)'; use of 'init(initialValue:)' is deprecated";
"property_wrapper_projection_value_missing" = "could not find projection value property %0";
"property_wrapper_missing_arg_init" = "missing argument for parameter %0 in property wrapper initializer; add 'wrappedValue' and %0 arguments in '@%1(...)'";
"result_builder_decl" = "closure containing a declaration cannot be used with result builder %0";
"note_result_builder_decl" = "closure containing a declaration cannot be used with result builder %0";
"result_builder_control_flow" = "closure containing control flow statement cannot be used with result builder %0";
"note_result_builder_control_flow" = "closure containing control flow statement cannot be used with result builder %0";
"result_builder_attribute_not_allowed_here" = "result builder attribute %0 can only be applied to a parameter, function, or computed property";
"result_builder_attribute_on_storage_without_getter" = "result builder attribute %0 can only be applied to a %select{subscript|property|constant|variable}1 if it defines a getter";
"result_builder_parameter_not_of_function_type" = "result builder attribute %0 can only be applied to a parameter of function type";
"result_builder_parameter_autoclosure" = "result builder attribute %0 cannot be applied to an autoclosure parameter";
"result_builder_multiple" = "only one result builder attribute can be attached to a %select{declaration|parameter}0";
"previous_result_builder_here" = "previous result builder specified here";
"result_builder_arguments" = "result builder attributes cannot have arguments";
"result_builder_disabled_by_return" = "cannot use explicit 'return' statement in the body of result builder %0";
"result_builder_disabled_by_return_warn" = "application of result builder %0 disabled by explicit 'return' statement";
"result_builder_remove_attr" = "remove the attribute to explicitly disable the result builder";
"result_builder_remove_returns" = "remove 'return' statements to apply the result builder";
"result_builder_infer_ambig" = "ambiguous result builder inferred for %0: %1 or %2";
"result_builder_infer_add_return" = "add an explicit 'return' statement to not use a result builder";
"result_builder_infer_pick_specific" = "apply result builder %0 (inferred from %select{protocol|dynamic replacement of}1 %2)";
"result_builder_missing_limited_availability" = "result builder %0 does not implement 'buildLimitedAvailability'; this code may crash on earlier versions of the OS";
"result_builder_static_buildblock_or_buildpartialblock" = "result builder must provide at least one static 'buildBlock' method, or both 'buildPartialBlock(first:)' and 'buildPartialBlock(accumulated:next:)'";
"result_builder_missing_available_buildpartialblock" = "result builder %0 does not implement any 'buildBlock' or a combination of 'buildPartialBlock(first:)' and 'buildPartialBlock(accumulated:next:)' with sufficient availability for this call site";
"result_builder_non_static_buildblock" = "did you mean to make instance method 'buildBlock' static?";
"result_builder_buildblock_enum_case" = "enum case 'buildBlock' cannot be used to satisfy the result builder requirement";
"result_builder_buildblock_not_static_method" = "potential match 'buildBlock' is not a static method";
"result_builder_missing_build_optional" = "add 'buildOptional(_:)' to the result builder %0 to add support for 'if' statements without an 'else'";
"result_builder_missing_build_either" = "add 'buildEither(first:)' and 'buildEither(second:)' to the result builder %0 to add support for 'if'-'else' and 'switch'";
"result_builder_missing_build_array" = "add 'buildArray(_:)' to the result builder %0 to add support for 'for'..'in' loops";
"result_builder_missing_build_limited_availability" = "add 'buildLimitedAvailability(_:)' to the result builder %0 to erase type information for less-available types";
"result_builder_requires_explicit_var_initialization" = "local variable%select{| '%1'}0 requires explicit initializer to be used with result builder %2";
"cannot_declare_computed_var_in_result_builder" = "cannot declare local %select{lazy|wrapped|computed|observed}0 variable in result builder";
"cannot_convert_result_builder_result_to_return_type" = "cannot convert result builder result type %0 to return type %1";
"result_builder_buildblock_not_accessible" = "result builder must provide at least one static 'buildBlock' as accessible as result builder type %0 (which is %select{private|fileprivate|internal|package|public|open}1)";
"result_builder_buildpartialblock_first_not_accessible" = "result builder must provide at least one static 'buildPartialBlock(first:)' as accessible as result builder type %0 (which is %select{private|fileprivate|internal|package|public|open}1)";
"result_builder_buildpartialblock_accumulated_not_accessible" = "result builder must provide at least one static 'buildPartialBlock(accumulated:next:)' as accessible as result builder type %0 (which is %select{private|fileprivate|internal|package|public|open}1)";
"cannot_use_removed_SwiftUI_Table_initializer" = "SwiftUI.Table initializers that accept '(columns:rows:)' and '(selection:columns:rows:)' have been replaced with versions that accept `of: Value` as a first argument";
"warn_reordering_tuple_shuffle_deprecated" = "expression shuffles the elements of this tuple; this behavior is deprecated";
"cannot_implicitly_convert_in_optional_context" = "cannot implicitly convert value of type %0 to expected type %1";
"marker_protocol_requirement" = "marker protocol %0 cannot have any requirements";
"marker_protocol_inherit_nonmarker" = "marker protocol %0 cannot inherit non-marker protocol %1";
"marker_protocol_inherit_class" = "marker protocol %0 cannot inherit class %1";
"marker_protocol_cast" = "marker protocol %0 cannot be used in a conditional cast";
"marker_protocol_conditional_conformance" = "conditional conformance to non-marker protocol %0 cannot depend on conformance of %1 to marker protocol %2";
"differentiable_programming_attr_used_without_required_module" = "'@%0' attribute used without importing module %1";
"oslog_arg_must_be_bool_literal" = "argument must be a bool literal";
"oslog_arg_must_be_integer_literal" = "argument must be an integer literal";
"oslog_arg_must_be_string_literal" = "argument must be a string literal";
"oslog_arg_must_be_float_literal" = "argument must be a floating-point literal";
"oslog_arg_must_be_metatype_literal" = "argument must be a <Type>.self";
"oslog_arg_must_be_closure" = "argument must be a closure";
"argument_must_be_constant" = "argument must be an expression with only literals";
"oslog_message_must_be_string_interpolation" = "argument must be a string interpolation";
"oslog_arg_must_be_enum_case" = "argument must be a case of enum %0";
"oslog_arg_must_be_type_member_access" = "argument must be a static method or property of %0";
"atomics_ordering_must_be_constant" = "ordering argument must be a static method or property of %0";
"swiftui_arg_must_be_integer_literal" = "non-constant range: argument must be an integer literal";
"swiftui_arg_must_be_integer_range" = "non-constant range: not an integer range";
"attr_added_by_access_note" = "implicitly added '%1' to this %2, as specified by access note for %0";
"fixit_attr_added_by_access_note" = "add '%0' explicitly to silence this warning";
"attr_removed_by_access_note" = "implicitly removed '%1' from this %3, as specified by access note for %0";
"fixit_attr_removed_by_access_note" = "remove '%0' explicitly to silence this warning";
"attr_objc_name_changed_by_access_note" = "implicitly changed Objective-C name of this %1 to %2, as specified by access note for %0";
"fixit_attr_objc_name_changed_by_access_note" = "change Objective-C name explicitly to silence this warning";
"attr_objc_name_conflicts_with_access_note" = "ignored access note: did not change Objective-C name of this %1 from %2 to %3, even though it was specified by access note for %0";
"wrap_invalid_attr_added_by_access_note" = "ignored access note: %0; did not implicitly add '%2' to this %3, even though it was specified by access note for %1";
"cannot_default_generic_parameter_inferrable_from_another_parameter" = "cannot use default expression for inference of %0 because it is inferrable from parameters %1";
"cannot_default_generic_parameter_inferrable_through_same_type" = "cannot use default expression for inference of %0 because it is inferrable through same-type requirement: '%1'";
"cannot_default_generic_parameter_invalid_requirement" = "cannot use default expression for inference of %0 because requirement '%1' refers to other generic parameters";
"cannot_convert_default_value_type_to_argument_type" = "cannot convert default value of type %0 to expected argument type %1 for parameter #%2";
"attr_incompatible_with_back_deploy" = "'%0' cannot be applied to a back deployed %1";
"backdeployed_opaque_result_not_supported" = "'%0' is unsupported on a %1 with a 'some' return type";
"concurrency_task_to_thread_model_custom_executor" = "custom executors are not permitted within %0";
"concurrency_task_to_thread_model_async_main" = "async main functions are not permitted within %0";
"concurrency_task_to_thread_model_main_actor" = "MainActor is not permitted within %0";
"concurrency_task_to_thread_model_global_actor" = "globalActor is not permitted within %0";
"concurrency_task_to_thread_model_global_actor_annotation" = "annotating a type with a global actor %0 is not permitted within %1";
"has_symbol_decl_must_be_weak" = "%kind0 is not a weakly linked declaration";
"has_symbol_invalid_expr" = "'#_hasSymbol' condition must refer to a declaration";
"has_symbol_invalid_decl_use_responds_to_selector" = "'#_hasSymbol' cannot be used with Objective-C %select{method|property}0 '%1'; use respondsToSelector() instead";
"has_symbol_invalid_decl" = "'#_hasSymbol' cannot be used with this declaration";
"no_metadata_on_non_generic_param" = "'@_noMetadata' must appear on a generic parameter";
"experimental_no_metadata_feature_can_only_be_used_when_enabled" = "Can not use feature when experimental layout based pre-specializations are disabled! Pass the frontend flag -enable-experimental-feature LayoutPrespecialization to swift to enable  the usage of this language feature";
"expected_macro_expansion_expr" = "expected macro expansion to produce an expression";
"expected_macro_expansion_decls" = "expected macro expansion to produce a declaration";
"macro_undefined" = "no macro named %0";
"external_macro_not_found" = "external macro implementation type '%0.%1' could not be found for macro %2; %3";
"macro_must_be_defined" = "macro %0 requires a definition";
"external_macro_outside_macro_definition" = "macro 'externalMacro' can only be used to define another macro";
"macro_note" = "%1 (in macro %0)";
"macro_warning" = "%1 (in macro %0)";
"macro_error" = "%1 (in macro %0)";
"macro_type_access" = "macro %select{must be declared %select{private|fileprivate|internal|package|%error|%error}1|cannot be declared %select{in this context|fileprivate|internal|package|public|open}1}0 because its %select{parameter|result type}3 uses %select{a private|a fileprivate|an internal|a package|%error|%error}2 type";
"macro_type_access_warn" = "macro %select{should be declared %select{private|fileprivate|internal|package|%error|%error}1|should not be declared %select{in this context|fileprivate|internal|package|public|open}1}0 because its %select{parameter|result type}3 uses %select{a private|a fileprivate|an internal|a package|%error|%error}2 type";
"macro_in_nested" = "macro %0 can only be declared at file scope";
"macro_without_role" = "macro %0 must declare its applicable roles via '@freestanding' or @attached'";
"macro_result_type_cannot_be_used" = "only a freestanding expression macro can produce a result of type %0";
"macro_remove_result_type" = "remove the result type if the macro does not produce a value";
"macro_make_freestanding_expression" = "make this macro a freestanding expression macro";
"macro_multiple_freestanding_roles" = "macro can only have a single freestanding role";
"macro_expansion_missing_pound" = "expansion of macro %0 requires leading '#'";
"macro_expansion_missing_arguments" = "expansion of macro %0 requires arguments";
"macro_unsupported" = "macros are not supported in this compiler";
"macro_recursive" = "recursive expansion of macro %0";
"macro_definition_unsupported" = "macro definitions other than '#externalMacro(...)' are unsupported";
"external_macro_arg_not_type_name" = "argument to `#externalMacro` must be a string literal naming the external macro's %select{module|type}0";
"invalid_decl_in_macro_expansion" = "macro expansion cannot introduce %0";
"let_accessor_expansion" = "cannot expand accessors on variable declared with 'let'";
"invalid_main_type_in_macro_expansion" = "macro expansion cannot introduce '@main' type";
"literal_type_in_macro_expansion" = "macro expansion cannot introduce default literal type %0";
"invalid_macro_introduced_name" = "declaration name %0 is not covered by macro %1";
"undocumented_conformance_in_expansion" = "conformance to %0 is not covered by macro %1";
"invalid_macro_role_for_macro_syntax" = "invalid macro role for %{a freestanding|an attached}0 macro";
"macro_cannot_introduce_names" = "'%0' macros are not allowed to introduce names";
"macro_nonobserving_accessor_missing_from_expansion" = "expansion of macro %0 did not produce a non-observing accessor (such as 'get') as expected";
"macro_nonobserver_unexpected_in_expansion" = "expansion of macro %0 produced an unexpected %1";
"macro_init_accessor_not_documented" = "expansion of macro %0 produced an unexpected 'init' accessor";
"global_arbitrary_name" = "'%0' macros are not allowed to introduce arbitrary names at global scope";
"local_extension_macro" = "local type cannot have attached extension macro";
"extension_macro_invalid_conformance" = "invalid protocol conformance %0 in extension macro";
"macro_attached_to_invalid_decl" = "'%0' macro cannot be attached to %1 (%base2)";
"conformance_macro" = "conformance macros are replaced by extension macros";
"macro_resolve_circular_reference" = "circular reference resolving %select{freestanding|attached}0 macro %1";
"macro_resolve_circular_reference_through" = "while resolving %select{freestanding|attached}0 macro %1";
"macro_expand_circular_reference" = "circular reference expanding %0 macro %1";
"macro_expand_circular_reference_through" = "circular reference expanding %0 macro %1";
"macro_expand_circular_reference_entity" = "circular reference expanding %0 macros on %1";
"macro_expand_circular_reference_entity_through" = "circular reference expanding %0 macros on %1";
"macro_expand_circular_reference_unnamed" = "circular reference expanding %0 macros";
"macro_expand_circular_reference_unnamed_through" = "circular reference expanding %0 macros";
"accessor_macro_not_single_var" = "accessor macro %0 can only apply to a single variable";
"inverse_but_also_conforms" = "%kind0 required to be '%1' but is marked with '~%1'";
"inverse_generic_but_also_conforms" = "%0 required to be '%1' but is marked with '~%1'";
"inverse_associatedtype_restriction" = "cannot suppress '%0' requirement of an associated type";
"inverse_on_class" = "%select{classes|actors}1 cannot be '~%0'";
"inverse_with_class_constraint" = "composition involving %select{class requirement %2|'AnyObject'}0 cannot contain '~%1'";
"inverse_conflicts_explicit_composition" = "composition cannot contain '~%0' when another member requires '%0'";
"inverse_extension" = "cannot suppress '%0' in extension";
"copyable_illegal_deinit" = "deinitializer cannot be declared in %kind0 that conforms to 'Copyable'";
"inverse_cannot_be_conditional_on_requirement" = "conditional conformance to suppressible %kind0 cannot depend on '%noformat1%select{:|:| ==|:| has same shape as}2 %noformat3'";
"inverse_type_member_in_conforming_type" = "%select{stored property %2|associated value %2}1 of '%4'-conforming %kind3 has non-%4 type %0";
"add_inverse" = "consider adding '~%1' to %kind0";
"note_inverse_preventing_conformance" = "%0 has '~%1' constraint preventing implicit '%1' conformance";
"note_inverse_preventing_conformance_explicit" = "%kind0 has '~%1' constraint preventing '%1' conformance";
"add_explicit_protocol_for_conformance" = "consider making %kind0 explicitly conform to the '%1' protocol";
"escapable_requires_feature_flag" = "type 'Escapable' requires -enable-experimental-feature NonescapableTypes";
"non_bitwise_copyable_type_class" = "class cannot conform to 'BitwiseCopyable'";
"non_bitwise_copyable_type_indirect_enum" = "indirect enum cannot conform to 'BitwiseCopyable'";
"non_bitwise_copyable_type_indirect_enum_element" = "enum with indirect case cannot conform to 'BitwiseCopyable'";
"note_non_bitwise_copyable_type_indirect_enum_element" = "indirect case is here";
"non_bitwise_copyable_type_suppressed" = "cannot both conform to and suppress conformance to 'BitwiseCopyable'";
"non_bitwise_copyable_type_cxx_nontrivial" = "non-trivial C++ type cannot conform to 'BitwiseCopyable'";
"non_bitwise_copyable_c_type_nontrivial" = "type with unrepresentable fields cannot derive conformance to 'BitwiseCopyable'";
"note_non_bitwise_copyable_c_type_add_attr" = "annotate the type __attribute__((__swift_attr__(\"BitwiseCopyable\")))";
"non_bitwise_copyable_type_member" = "%select{stored property %2|associated value %2}1 of 'BitwiseCopyable'-conforming %kind3 has non-bitwise-copyable type %0";
"non_bitwise_copyable_nominal" = "%kind0 does not conform to the 'BitwiseCopyable' protocol";
"non_bitwise_copyable_function_type" = "a function type must be marked '@convention(thin)' or '@convention(c)' to be bitwise copyable";
"add_nominal_bitwise_copyable_conformance" = "consider making %kind0 conform to the 'BitwiseCopyable' protocol";
"add_generic_parameter_non_bitwise_copyable_conformance" = "consider making generic parameter %0 conform to the 'BitwiseCopyable' protocol";
"bitwise_copyable_outside_module" = "conformance to 'BitwiseCopyable' must occur in the same module as %kind0";
"suppress_inferrable_protocol_extension" = "conformance to inferrable protocol %0 cannot be suppressed in an extension";
"suppress_nonsuppressable_protocol" = "conformance to %0 cannot be suppressed";
"suppress_already_suppressed_protocol" = "already suppressed conformance to %0";
"extension_conforms_to_invertible_and_others" = "conformance to '%0' must be declared in a separate extension";
"invertible_conformance_other_source_file" = "conformance to '%0' must occur in the same source file as %kind1";
"noncopyable_parameter_requires_ownership" = "parameter of noncopyable type %0 must specify ownership";
"noncopyable_parameter_subscript_unsupported" = "subscripts cannot have noncopyable parameters yet";
"noncopyable_parameter_ownership_suggestion" = "add '%0' %1";
"ownership_specifier_nonescaping_closure" = "'%0' cannot be applied to nonescaping closure";
"noncopyable_generics_variadic" = "noncopyable type %0 cannot be used within a variadic type yet";
"noncopyable_generics_implicit_conformance_req" = "'where %noformat0: %noformat1' is implicit here";
"noncopyable_generics_implicit_composition" = "'%noformat0 & %noformat1' is implicit here";
"noncopyable_effectful_getter" = "%0 of noncopyable type cannot be 'async' or 'throws'";
"noncopyable_enums_do_not_support_indirect" = "noncopyable enum %0 cannot be marked indirect or have indirect cases yet";
"noncopyable_cast" = "noncopyable types cannot be conditionally cast";
"noncopyable_objc_enum" = "noncopyable enums cannot be marked '@objc'";
"moveOnly_not_allowed_here" = "'@_moveOnly' attribute is only valid on structs or enums";
"consume_expression_needed_for_cast" = "implicit conversion to %0 is consuming";
"add_consume_to_silence" = "add 'consume' to make consumption explicit";
"consume_of_bitwisecopyable_noop" = "'consume' applied to bitwise-copyable type %0 has no effect";
"consume_expression_not_passed_lvalue" = "'consume' can only be applied to a local binding ('let', 'var', or parameter)";
"consume_expression_partial_copyable" = "'consume' can only be used to partially consume storage of a noncopyable type";
"consume_expression_non_storage" = "'consume' can only be used to partially consume storage";
"note_consume_expression_non_storage_call" = "non-storage produced by this call";
"note_consume_expression_non_storage_subscript" = "non-storage produced by this subscript";
"note_consume_expression_non_storage_property" = "non-storage produced by this computed property";
"borrow_expression_not_passed_lvalue" = "'borrow' can only be applied to a local binding ('let', 'var', or parameter)";
"copy_expression_not_passed_lvalue" = "'copy' can only be applied to a local binding ('let', 'var', or parameter)";
"copy_expression_cannot_be_used_with_noncopyable_types" = "'copy' cannot be applied to noncopyable types";
"experimental_moveonly_feature_can_only_be_used_when_enabled" = "Can not use feature when experimental move only is disabled! Pass the frontend flag -enable-experimental-move-only to swift to enable the usage of this language feature";
"noimplicitcopy_attr_valid_only_on_local_let_params" = "'@_noImplicitCopy' attribute can only be applied to local lets and params";
"noimplicitcopy_attr_invalid_in_generic_context" = "'@_noImplicitCopy' attribute cannot be applied to entities in generic contexts";
"noimplicitcopy_attr_not_allowed_on_moveonlytype" = "'@_noImplicitCopy' has no effect when applied to a noncopyable type";
"noncopyable_types_cannot_be_resilient" = "noncopyable %kind0 must be @frozen in library evolution mode; non-@frozen public and @usableFromInline noncopyable types are not supported";
"noncopyable_cannot_have_read_set_accessor" = "noncopyable %select{variable|subscript}0 cannot provide a read and set accessor";
"nonescapable_types_attr_disabled" = "attribute requires '-enable-experimental-feature NonescapableTypes'";
"init_accessor_can_refer_only_to_properties" = "init accessor cannot refer to %0 %1; init accessors can refer only to stored properties";
"storage_restrictions_attribute_not_on_init_accessor" = "@storageRestrictions attribute could only be used with init accessors";
"init_accessor_property_both_init_and_accessed" = "property %0 cannot be both initialized and accessed";
"invalid_use_of_self_in_init_accessor" = "'self' within init accessors can only be used to reference properties listed in 'initializes' and 'accesses'; init accessors are run before 'self' is fully available";
"init_accessor_invalid_member_ref" = "cannot reference instance member %0; init accessors can only refer to instance properties listed in 'initializes' and 'accesses' attributes";
"cannot_synthesize_memberwise_due_to_property_init_order" = "cannot synthesize memberwise initializer";
"out_of_order_access_in_init_accessor" = "init accessor for %0 cannot access stored property %1 because it is called before %1 is initialized";
"referencebindings_binding_must_have_initial_value" = "%0 bindings must have an initial value";
"referencebindings_binding_must_be_to_lvalue" = "%0 bindings must be bound to an lvalue";
"result_depends_on_no_result" = "Incorrect use of %0 with no result";
"pack_iteration_where_clause_not_supported" = "'where' clause in pack iteration is not supported";
"lifetime_dependence_invalid_param_name" = "invalid parameter name specified %0";
"lifetime_dependence_invalid_param_index" = "invalid parameter index specified %0";
"lifetime_dependence_invalid_self_in_static" = "invalid lifetime dependence specifier on non-existent self";
"lifetime_dependence_invalid_self_in_init" = "invalid lifetime dependence on self in an initializer";
"lifetime_dependence_duplicate_param_id" = "duplicate lifetime dependence specifier";
"lifetime_dependence_cannot_use_kind" = "invalid use of %0 lifetime dependence for %1 ownership";
"lifetime_dependence_cannot_use_parsed_scoped_consuming" = "invalid use of scoped lifetime dependence with consuming ownership";
"lifetime_dependence_cannot_use_inferred_scoped_consuming" = "invalid use of lifetime dependence on an Escapable parameter with consuming ownership";
"lifetime_dependence_invalid_self_ownership" = "invalid scoped lifetime dependence on an Escapable self with consuming ownership";
"lifetime_dependence_only_on_function_method_init_result" = "lifetime dependence specifiers may only be used on result of functions, methods, initializers";
"lifetime_dependence_invalid_return_type" = "lifetime dependence can only be specified on ~Escapable results";
"lifetime_dependence_cannot_infer_ambiguous_candidate" = "cannot infer lifetime dependence %0, multiple parameters qualifiy as a candidate";
"lifetime_dependence_cannot_infer_no_candidates" = "cannot infer lifetime dependence %0, no parameters found that are either ~Escapable or Escapable with a borrowing ownership";
"lifetime_dependence_ctor_non_self_or_nil_return" = "expected nil or self as return values in an initializer with lifetime dependent specifiers";
"lifetime_dependence_on_bitwise_copyable" = "invalid lifetime dependence on bitwise copyable type";
"lifetime_dependence_cannot_be_applied_to_tuple_elt" = "lifetime dependence specifiers cannot be applied to tuple elements";
"lifetime_dependence_method_escapable_bitwisecopyable_self" = "cannot infer lifetime dependence on a self which is BitwiseCopyable & Escapable";
"sending_unsupported_param_specifier" = "'%0' cannot be applied to a 'sending' parameter";
"sending_only_on_parameters_and_results" = "'sending' may only be used on parameters and results";
"sending_cannot_be_applied_to_tuple_elt" = "'sending' cannot be applied to tuple elements";
"sending_function_wrong_sending" = "converting a value of type %0 to type %1 risks causing data races";
"sending_function_param_with_sending_param_note" = "converting a function typed value with a sending parameter to one without risks allowing actor-isolated values to escape their isolation domain as an argument to an invocation of value";
"sending_function_result_with_sending_param_note" = "converting a function typed value without a sending result as one with risks allowing actor-isolated values to escape their isolation domain through a result of an invocation of value";
"warning_from_clang" = "%0";
"error_from_clang" = "%0";
"note_from_clang" = "%0";
"remark_from_clang" = "%0";
"clang_cannot_build_module" = "could not build %select{C|Objective-C}0 module '%1'";
"bridging_header_missing" = "bridging header '%0' does not exist";
"bridging_header_error" = "failed to import bridging header '%0'";
"could_not_rewrite_bridging_header" = "failed to serialize bridging header; target may not be debuggable outside of its original project";
"bridging_header_pch_error" = "failed to emit precompiled header '%0' for bridging header '%1'";
"err_rewrite_bridging_header" = "failed to serialize bridging header: '%0'";
"emit_pcm_error" = "failed to emit precompiled module '%0' for module map '%1'";
"dump_pcm_error" = "failed to dump precompiled module '%0'";
"invalid_swift_name_method" = "too %select{few|many}0 parameters in swift_name attribute (expected %1; got %2)";
"note_while_importing" = "while importing '%0'";
"swift_name_protocol_static" = "swift_name cannot be used to define %select{static member|init}0 on protocol";
"swift_name_no_prototype" = "swift_name cannot be used on a non-prototyped function declaration";
"inconsistent_swift_name" = "inconsistent Swift name for Objective-C %select{method|property}0 '%1' in '%2' (%3 in '%4' vs. %5 in '%6')";
"swift_name_circular_context_import" = "cycle detected while resolving '%0' in swift_name attribute for '%1'";
"swift_name_circular_context_import_other" = "while resolving '%0' in swift_name attribute for '%1'";
"unresolvable_clang_decl" = "imported declaration '%0' could not be mapped to '%1'";
"unresolvable_clang_decl_is_a_framework_bug" = "please report this issue to the owners of '%0'";
"clang_swift_attr_unhandled" = "ignoring unknown Swift attribute or modifier '%0'";
"clang_error_code_must_be_sendable" = "cannot make error code type '%0' non-sendable because Swift errors are always sendable";
"clang_ignored_sendable_attr" = "cannot make type %0 sendable because '@Sendable' and '& Sendable' cannot be added to it";
"clang_param_should_be_implicitly_sendable" = "parameter should be implicitly 'Sendable' because it is a completion handler";
"implicit_bridging_header_imported_from_module" = "implicit import of bridging header '%0' via module %1 is deprecated and will be removed in a later version of Swift";
"import_multiple_mainactor_attr" = "this attribute for global actor '%0' is invalid; the declaration already has attribute for global actor '%1'";
"contradicting_mutation_attrs" = "attribute '%0' is ignored when combined with attribute '%1'";
"nonmutating_without_const" = "attribute 'nonmutating' has no effect on non-const method";
"nonmutating_without_mutable_fields" = "attribute 'nonmutating' has no effect without any mutable fields";
"module_map_not_found" = "module map file '%0' not found";
"module_map_ignored" = "module map file '%0' will be ignored";
"libc_not_found" = "libc not found for '%0'; C stdlib may be unavailable";
"libstdcxx_not_found" = "libstdc++ not found for '%0'; C++ stdlib may be unavailable";
"libstdcxx_modulemap_not_found" = "module map for libstdc++ not found for '%0'; C++ stdlib may be unavailable";
"api_pattern_attr_ignored" = "'%0' swift attribute ignored on type '%1': type is not copyable or destructible";
"objc_implementation_two_impls" = "duplicate implementation of Objective-C %select{|category %0 on }0%kind1";
"previous_objc_implementation" = "previously implemented by extension here";
"macro_not_imported_unsupported_operator" = "operator not supported in macro arithmetic";
"macro_not_imported_unsupported_named_operator" = "operator '%0' not supported in macro arithmetic";
"macro_not_imported_invalid_string_literal" = "invalid string literal";
"macro_not_imported_invalid_numeric_literal" = "invalid numeric literal";
"macro_not_imported_unsupported_literal" = "only numeric and string macro literals supported";
"macro_not_imported_nested_cast" = "non-null nested casts not supported";
"macro_not_imported_function_like" = "macro '%0' unavailable: function like macros not supported";
"macro_not_imported_unsupported_structure" = "macro '%0' unavailable: structure not supported";
"macro_not_imported" = "macro '%0' unavailable (cannot import)";
"return_type_not_imported" = "return type unavailable (cannot import)";
"parameter_type_not_imported" = "parameter %0 unavailable (cannot import)";
"rvalue_ref_params_not_imported" = "C++ functions with rvalue reference parameters are unavailable in Swift";
"incomplete_interface" = "interface %0 is incomplete";
"incomplete_protocol" = "protocol %0 is incomplete";
"incomplete_record" = "record '%0' is not defined (incomplete)";
"record_over_aligned" = "record '%0' is over aligned";
"record_non_trivial_copy_destroy" = "record '%0' is not trivial to copy or destroy";
"record_is_dependent" = "record '%0' is dependent";
"record_parent_unimportable" = "record %0's parent is not importable";
"reference_passed_by_value" = "function uses foreign reference type '%0' as a value in %1 types which breaks 'swift_shared_reference' contract";
"record_not_automatically_importable" = "record '%0' is not automatically available: %1; does this type have reference semantics?";
"projection_value_not_imported" = "C++ method '%0' that returns a value of type '%1' is unavailable";
"projection_ptr_not_imported" = "C++ method '%0' that returns a pointer of type '%1' is unavailable";
"projection_reference_not_imported" = "C++ method '%0' that returns a reference of type '%1' is unavailable";
"projection_may_return_interior_ptr" = "C++ method '%0' may return an interior pointer";
"mark_self_contained" = "annotate type '%0' with 'SWIFT_SELF_CONTAINED' in C++ to make methods that return it available in Swift";
"mark_safe_to_import" = "annotate method '%0' with 'SWIFT_RETURNS_INDEPENDENT_VALUE' in C++ to make it available in Swift";
"at_to_subscript" = "do you want to replace it with a call to the subscript operator?";
"use_collection_apis" = "do you want to use a for-in loop instead?";
"replace_with_nil" = "do you want to compare against 'nil' instead?";
"get_first_element" = "do you want to get the first element instead?";
"get_last_element" = "do you want to get the last element instead?";
"iterator_method_unavailable" = "C++ method '%0' that returns an iterator is unavailable";
"iterator_potentially_unsafe" = "C++ methods that return iterators are potentially unsafe; try using Swift collection APIs instead";
"reference_type_must_have_retain_attr" = "reference type '%0' must have 'retain:' swift attribute";
"reference_type_must_have_release_attr" = "reference type '%0' must have 'release:' swift attribute";
"foreign_reference_types_cannot_find_retain" = "cannot find retain function '%0' for reference type '%1'";
"foreign_reference_types_cannot_find_release" = "cannot find release function '%0' for reference type '%1'";
"too_many_reference_type_retain_operations" = "multiple functions '%0' found; there must be exactly one retain function for reference type '%1'";
"too_many_reference_type_release_operations" = "multiple functions '%0' found; there must be exactly one release function for reference type '%1'";
"foreign_reference_types_invalid_retain" = "specified retain function '%0' is invalid; retain function must have exactly one argument of type '%1'";
"foreign_reference_types_invalid_release" = "specified release function '%0' is invalid; release function must have exactly one argument of type '%1'";
"conforms_to_missing_dot" = "expected module name and protocol name separated by '.' in protocol conformance; '%0' is invalid";
"cannot_find_conforms_to_module" = "module '%1' in specified protocol conformance '%0' is not found; did you mean to import it first?";
"cannot_find_conforms_to" = "protocol '%0' in specified protocol conformance is not found in module '%1'";
"conforms_to_ambiguous" = "ambiguous reference to protocol '%0' in specified protocol conformance; module '%1' contains multiple protocols named '%0'";
"conforms_to_not_protocol" = "%0 %1 referenced in protocol conformance '%2' is not a protocol";
"failed_base_method_call_synthesis" = "failed to synthesize call to the base method %0 of type %0";
"unsupported_builtin_type" = "built-in type '%0' not supported";
"record_field_not_imported" = "field %0 unavailable (cannot import)";
"invoked_func_not_imported" = "function %0 unavailable (cannot import)";
"record_method_not_imported" = "method %0 unavailable (cannot import)";
"objc_property_not_imported" = "property %0 unavailable (cannot import)";
"placeholder_for_forward_declared_interface_member_access_failure" = "class '%0' will be imported as an opaque placeholder class and may be missing members; import the definition to access the complete interface";
"placeholder_for_forward_declared_protocol_member_access_failure" = "protocol '%0' will be imported as an opaque placeholder protocol and may be missing members; import the definition to access the complete protocol";
"forward_declared_interface_label" = "interface %0 forward declared here";
"forward_declared_protocol_label" = "protocol %0 forward declared here";
"forward_declared_interface_clashes_with_imported_objc_Swift_interface" = "interface %0 is incomplete and cannot be imported as a stub; its name conflicts with a %1 in module %2";
"forward_declared_protocol_clashes_with_imported_objc_Swift_protocol" = "protocol %0 is incomplete and cannot be imported as a stub; its name conflicts with a %1 in module %2";
"return_borrowing_switch_binding" = "returning the non-'Copyable' value of a pattern binding from a switch that borrows by default; the switch will be performed as a consume for compatibility for now, but this will require an explicit 'switch consume' in the future";
"bridging_module_missing" = "unable to find module '%0' for implicit conversion function '%0.%1'";
"bridging_function_missing" = "unable to find implicit conversion function '%0.%1'";
"bridging_function_overloaded" = "multiple definitions of implicit conversion function '%0.%1'";
"bridging_function_not_function" = "definition of implicit conversion function '%0.%1' is not a function";
"bridging_function_not_correct_type" = "definition of implicit conversion function '%0.%1' is not of the correct type";
"bridging_objcbridgeable_missing" = "cannot find definition of '_ObjectiveCBridgeable' protocol";
"bridging_objcbridgeable_broken" = "broken definition of '_ObjectiveCBridgeable' protocol: missing %0";
"sil_function_redefinition" = "multiple definitions of symbol '%0'";
"sil_function_redefinition_note" = "other definition here";
"invalid_sil_builtin" = "INTERNAL ERROR: invalid use of builtin: %0";
"could_not_find_bridge_type" = "could not find Objective-C bridge type for type %0; did you forget to import Foundation?";
"could_not_find_pointer_pointee_property" = "could not find 'pointee' property of pointer type %0";
"writeback_overlap_property" = "inout writeback to computed property %0 occurs in multiple arguments to call, introducing invalid aliasing";
"writeback_overlap_subscript" = "inout writeback through subscript occurs in multiple arguments to call, introducing invalid aliasing";
"writebackoverlap_note" = "concurrent writeback occurred here";
"inout_argument_alias" = "inout arguments are not allowed to alias each other";
"previous_inout_alias" = "previous aliasing argument";
"unimplemented_generator_witnesses" = "protocol conformance emission for generator coroutines is unimplemented";
"exclusivity_access_required" = "overlapping accesses to %0, but %select{initialization|read|modification|deinitialization}1 requires exclusive access; %select{consider copying to a local variable|consider calling MutableCollection.swapAt(_:_:)}2";
"exclusivity_access_required_unknown_decl" = "overlapping accesses, but %select{initialization|read|modification|deinitialization}0 requires exclusive access; consider copying to a local variable";
"exclusivity_access_required_moveonly" = "overlapping accesses to %0, but %select{initialization|read|modification|deinitialization}1 requires exclusive access";
"exclusivity_access_required_unknown_decl_moveonly" = "overlapping accesses, but %select{initialization|read|modification|deinitialization}0 requires exclusive access";
"exclusivity_conflicting_access" = "conflicting access is here";
"unsupported_c_function_pointer_conversion" = "C function pointer signature %0 is not compatible with expected type %1";
"c_function_pointer_from_function_with_context" = "a C function pointer cannot be formed from a %select{local function|closure}0 that captures %select{context|generic parameters|dynamic Self type}1";
"objc_selector_malformed" = "the type ObjectiveC.Selector is malformed";
"unsupported_variadic_function_abstraction" = "cannot fully abstract a value of variadic function type %0 because different contexts will not be able to reliably agree on a calling convention; try wrapping it in a struct";
"function_type_mismatch" = "function type mismatch, declared as %0 but used as %1";
"function_declared_here" = "function declared here";
"deserialize_function_type_mismatch" = "type mismatch of function '%0', declared as %1 but used in a swift module as %2";
"without_actually_escaping_on_isolated_any" = "withoutActuallyEscaping is currently unimplemented for @isolated(any) function values";
"capture_before_declaration" = "closure captures %0 before it is declared";
"captured_value_declared_here" = "captured value declared here";
"escaping_inout_capture" = "escaping %select{local function|closure|autoclosure}0 captures 'inout' parameter %1";
"inout_param_defined_here" = "parameter %0 is declared 'inout'";
"escaping_mutable_self_capture" = "escaping %select{local function|closure|autoclosure}0 captures mutating 'self' parameter";
"escaping_noescape_param_capture" = "escaping %select{local function|closure|autoclosure}0 captures non-escaping parameter %1";
"noescape_param_defined_here" = "parameter %0 is implicitly non-escaping";
"escaping_noescape_var_capture" = "escaping %select{local function|closure|autoclosure}0 captures non-escaping value";
"value_captured_here" = "captured here";
"copy_inout_captured_by_autoclosure" = "pass a copy of %0";
"copy_self_captured_by_autoclosure" = "pass a copy of 'self'";
"value_captured_transitively" = "captured indirectly by this call";
"err_noescape_param_call" = "passing a %select{|closure which captures a }1non-escaping function parameter %0 to a call to a non-escaping function parameter can allow re-entrant modification of a variable";
"variable_defined_here" = "%select{variable|constant}0 defined here";
"variable_used_before_initialized" = "%select{variable|constant}1 '%0' used before being initialized";
"variable_inout_before_initialized" = "%select{variable|constant}1 '%0' passed by reference before being initialized";
"variable_closure_use_uninit" = "%select{variable|constant}1 '%0' captured by a closure before being initialized";
"variable_defer_use_uninit" = "%select{variable|constant}1 '%0' used in defer before being initialized";
"self_closure_use_uninit" = "'self' captured by a closure before all members were initialized";
"variable_addrtaken_before_initialized" = "address of %select{variable|constant}1 '%0' taken before it is initialized";
"ivar_not_initialized_at_superinit" = "property '%0' not initialized at super.init call";
"ivar_not_initialized_at_implicit_superinit" = "property '%0' not initialized at implicitly generated super.init call";
"ivar_not_initialized_by_init_accessor" = "property %0 not initialized by init accessor";
"noncopyable_dynamic_lifetime_unsupported" = "conditional initialization or destruction of noncopyable types is not supported; this variable must be consistently in an initialized or uninitialized state through every code path";
"self_use_before_fully_init" = "'self' used in %select{method call|property access}1 %0 before %select{all stored properties are initialized|'super.init' call|'self.init' call}2";
"use_of_self_before_fully_init" = "'self' used before all stored properties are initialized";
"stored_property_not_initialized" = "'%0' not initialized";
"selfinit_multiple_times" = "'%select{super|self}0.init' called multiple times in initializer";
"superselfinit_not_called_before_return" = "'%select{super|self}0.init' isn't called on all paths before returning from initializer";
"self_before_superinit" = "'self' used before 'super.init' call";
"self_before_selfinit" = "'self' used before 'self.init' call";
"self_before_selfinit_value_type" = "'self' used before 'self.init' call or assignment to 'self'";
"self_inside_catch_superselfinit" = "'self' used inside 'catch' block reachable from %select{super|self}0.init call";
"return_from_init_without_initing_stored_properties" = "return from initializer without initializing all stored properties";
"explicit_store_of_compilerinitialized" = "illegal assignment to '@_compilerInitialized' storage";
"variable_function_use_uninit" = "%select{variable|constant}1 '%0' used by function definition before being initialized";
"struct_not_fully_initialized" = "struct '%0' must be completely initialized before a member is stored to";
"immutable_property_already_initialized" = "immutable value '%0' may only be initialized once";
"initial_value_provided_in_let_decl" = "initial value already provided in 'let' declaration";
"mutation_of_property_of_immutable_value" = "cannot mutate %select{property %0|subscript}1 of immutable value '%2'";
"using_mutating_accessor_on_immutable_value" = "mutating accessor for %select{property %0|subscript}1 may not be used on immutable value '%2'";
"mutating_method_called_on_immutable_value" = "mutating %select{method|operator}1 %0 may not be used on immutable value '%2'";
"immutable_value_passed_inout" = "immutable value '%0' must not be passed inout";
"assignment_to_immutable_value" = "immutable value '%0' must not be assigned to";
"designated_init_in_cross_module_extension" = "initializer for struct %0 must use \"self.init(...)\" or \"self = ...\"%select{| on all paths}1 because %select{it is not in module %2|the struct was imported from C}3";
"designated_init_c_struct_fix" = "use \"self.init()\" to initialize the struct with zero values";
"missing_return_closure" = "missing return in closure expected to return %0";
"missing_never_call_closure" = "closure with uninhabited return type %0 is missing call to another never-returning function on all paths";
"missing_return_decl" = "missing return in %1 expected to return %0";
"missing_never_call_decl" = "%1 with uninhabited return type %0 is missing call to another never-returning function on all paths";
"missing_return_last_expr_note" = "did you mean to return the last expression?";
"guard_body_must_not_fallthrough" = "'guard' body must not fall through, consider using a 'return' or 'throw' to exit the scope";
"unreachable_code" = "will never be executed";
"unreachable_code_uninhabited_param_note" = "'%0' is of type %1 which cannot be constructed because %select{it contains %3 which is an enum with no cases|it is an enum with no cases}2";
"unreachable_code_branch" = "condition always evaluates to %select{false|true}0";
"call_to_noreturn_note" = "a call to a never-returning function";
"unreachable_code_after_stmt" = "code after '%select{return|break|continue|throw}0' will never be executed";
"unreachable_case" = "%select{case|default}0 will never be executed";
"switch_on_a_constant" = "switch condition evaluates to a constant";
"unreachable_code_note" = "will never be executed";
"warn_infinite_recursive_call" = "function call causes an infinite recursion";
"warn_dead_weak_store" = "weak reference will always be nil because the referenced object is deallocated here";
"performance_dynamic_casting" = "dynamic casting can lock or allocate";
"performance_metadata" = "%0 can cause metadata allocation or locks";
"performance_metadata_type" = "Using type %0 can cause metadata allocation or locks";
"performance_allocating" = "%0 can cause an allocation";
"performance_deallocating" = "%0 can cause an deallocation";
"performance_deallocating_type" = "%0 a value of type %1 can cause a deallocation";
"performance_locking" = "%0 can cause locking";
"performance_arc" = "this code performs reference counting operations which can cause locking";
"performance_objectivec" = "calls of Objective-C methods can have unpredictable performance";
"performance_unknown_callees" = "called function is not known at compile time and can have unpredictable performance";
"performance_callee_unavailable" = "called function is not available in this module and can have unpredictable performance";
"bad_attr_on_non_const_global" = "global variable must be a compile-time constant to use %0 attribute";
"global_must_be_compile_time_const" = "global variable must be a compile-time constant";
"non_final_generic_class_function" = "classes cannot have non-final generic fuctions in embedded Swift";
"cannot_specialize_class" = "cannot specialize %0 because class definition is not available (make sure to build with -wmo)";
"embedded_swift_existential_type" = "cannot use a value of protocol type %0 in embedded Swift";
"embedded_swift_existential" = "cannot use a value of protocol type in embedded Swift";
"perf_diag_existential_type" = "cannot use a value of protocol type %0 in @_noExistential function";
"perf_diag_existential" = "cannot use a value of protocol type in @_noExistential function";
"embedded_swift_value_deinit" = "cannot de-virtualize deinit of type %0";
"embedded_swift_metatype_type" = "cannot use metatype of type %0 in embedded Swift";
"embedded_swift_metatype" = "cannot use metatype in embedded Swift";
"embedded_swift_keypath" = "cannot use key path in embedded Swift";
"embedded_swift_allocating_type" = "cannot use allocating type %0 in -no-allocations mode";
"embedded_swift_allocating" = "cannot use allocating operation in -no-allocations mode";
"performance_called_from" = "called from here";
"circular_transparent" = "inlining 'transparent' functions forms circular loop";
"note_while_inlining" = "while inlining here";
"cannot_prespecialize" = "Cannot pre-specialize %0";
"missing_prespecialization" = "Pre-specialized function %0 missing in SwiftOnoneSupport module";
"integer_conversion_overflow" = "integer overflows when converted from %0 to %1";
"integer_conversion_overflow_builtin_types" = "integer overflows when converted from %select{unsigned|signed}0 %1 to %select{unsigned|signed}2 %3";
"integer_conversion_overflow_warn" = "integer overflows when converted from %0 to %1";
"negative_integer_literal_overflow_unsigned" = "negative integer '%1' overflows when stored into unsigned type %0";
"integer_literal_overflow" = "integer literal '%1' overflows when stored into %0";
"integer_literal_overflow_builtin_types" = "integer literal '%2' overflows when stored into %select{unsigned|signed}0 %1";
"integer_literal_overflow_warn" = "integer literal overflows when stored into %0";
"arithmetic_operation_overflow" = "arithmetic operation '%0 %1 %2' (on type %3) results in an overflow";
"arithmetic_operation_overflow_generic_type" = "arithmetic operation '%0 %1 %2' (on %select{unsigned|signed}3 %4-bit integer type) results in an overflow";
"division_overflow" = "division '%0 %1 %2' results in an overflow";
"division_by_zero" = "division by zero";
"wrong_non_negative_assumption" = "assumed non-negative value '%0' is negative";
"shifting_all_significant_bits" = "shift amount is greater than or equal to type size in bits";
"static_report_error" = "static report error";
"pound_assert_condition_not_constant" = "#assert condition not constant";
"pound_assert_failure" = "%0";
"constexpr_unknown_reason_default" = "cannot evaluate expression as constant here";
"constexpr_unevaluable_operation" = "cannot constant evaluate operation%select{| used by this call}0";
"constexpr_too_many_instructions" = "exceeded instruction limit: %0 when evaluating the expression at compile time";
"constexpr_limit_exceeding_instruction" = "limit exceeded %select{here|during this call}0";
"constexpr_loop_found_note" = "control-flow loop found during evaluation ";
"constexpr_loop_instruction" = "found loop %select{here|inside this call}0";
"constexpr_overflow" = "integer overflow detected";
"constexpr_overflow_operation" = "operation%select{| performed during this call}0 overflows";
"constexpr_trap" = "%0";
"constexpr_trap_operation" = "operation%select{| performed during this call}0 traps";
"constexpr_invalid_operand_seen" = "operation with invalid operands encountered during evaluation";
"constexpr_operand_invalid_here" = "operation with invalid operands encountered %select{here|during this call}0";
"constexpr_value_unknown_at_top_level" = "cannot evaluate top-level value as constant here";
"constexpr_multiple_writers_found_at_top_level" = "top-level value has multiple assignments";
"constexpr_unsupported_instruction_found" = "encountered operation not supported by the evaluator: %0";
"constexpr_unsupported_instruction_found_here" = "operation%select{| used by this call is}0 not supported by the evaluator";
"constexpr_found_callee_with_no_body" = "encountered call to '%0' whose body is not available. Imported functions must be marked '@inlinable' to constant evaluate";
"constexpr_callee_with_no_body" = "%select{|calls a }0function whose body is not available";
"constexpr_found_call_with_unknown_arg" = "encountered call to '%0' where the %1 argument is not a constant";
"constexpr_call_with_unknown_arg" = "%select{|makes a }0function call with non-constant arguments";
"constexpr_untracked_sil_value_use_found" = "encountered use of a variable not tracked by the evaluator";
"constexpr_untracked_sil_value_used_here" = "untracked variable used %select{here|by this call}0";
"constexpr_unevaluable_cast_found" = "encountered an unevaluable cast";
"constexpr_unevaluable_cast_used_here" = "unevaluable cast encountered %select{here|by this call}0";
"constexpr_unresolvable_witness_call" = "encountered unresolvable witness method call: '%0'";
"constexpr_no_witness_table_entry" = "cannot find witness table entry %select{for this call|for a witness-method invoked during this call}0";
"constexpr_witness_call_with_no_conformance" = "cannot find concrete conformance %select{for this call|for a witness-method invoked during this call}0";
"constexpr_unknown_control_flow_due_to_skip" = "branch depends on non-constant value produced by an unevaluated instructions";
"constexpr_returned_by_unevaluated_instruction" = "result of an unevaluated instruction is not a constant";
"constexpr_mutated_by_unevaluated_instruction" = "value mutable by an unevaluated instruction is not a constant";
"not_constant_evaluable" = "not constant evaluable";
"constexpr_imported_func_not_onone" = "imported constant evaluable function '%0' must be annotated '@_optimize(none)'";
"autodiff_internal_swift_not_imported" = "Automatic differentiation internal error: the Swift module is not imported";
"autodiff_differentiation_module_not_imported" = "Automatic differentiation requires the '_Differentiation' module to be imported";
"autodiff_conversion_to_linear_function_not_supported" = "conversion to '@differentiable(_linear)' function type is not yet supported";
"autodiff_function_not_differentiable_error" = "function is not differentiable";
"autodiff_expression_not_differentiable_error" = "expression is not differentiable";
"autodiff_expression_not_differentiable_note" = "expression is not differentiable";
"autodiff_when_differentiating_function_call" = "when differentiating this function call";
"autodiff_when_differentiating_function_definition" = "when differentiating this function definition";
"autodiff_implicitly_inherited_differentiable_attr_here" = "differentiability required by the corresponding protocol requirement here";
"autodiff_jvp_control_flow_not_supported" = "forward-mode differentiation does not yet support control flow";
"autodiff_control_flow_not_supported" = "cannot differentiate unsupported control flow";
"autodiff_missing_return" = "missing return for differentiation";
"autodiff_external_nondifferentiable_function" = "cannot differentiate functions that have not been marked '@differentiable' and that are defined in other files";
"autodiff_opaque_function_not_differentiable" = "opaque non-'@differentiable' function is not differentiable";
"autodiff_private_derivative_from_fragile" = "differentiated functions in %select{'@inlinable' functions|default arguments}0 must be marked '@differentiable' or have a public '@derivative'%select{|; this is not possible with a closure, make a top-level function instead}1";
"autodiff_function_noderivative_parameter_not_differentiable" = "cannot differentiate with respect to a '@noDerivative' parameter";
"autodiff_function_assoc_func_unmet_requirements" = "function call is not differentiable because generic requirements are not met: '%0'";
"autodiff_nondifferentiable_argument" = "cannot differentiate through a non-differentiable argument; do you want to use 'withoutDerivative(at:)'?";
"autodiff_nondifferentiable_result" = "cannot differentiate through a non-differentiable result; do you want to use 'withoutDerivative(at:)'?";
"autodiff_protocol_member_not_differentiable" = "member is not differentiable because the corresponding protocol requirement is not '@differentiable'";
"autodiff_class_member_not_differentiable" = "member is not differentiable because the corresponding class member is not '@differentiable'";
"autodiff_member_subset_indices_not_differentiable" = "member is differentiable only with respect to a smaller subset of arguments";
"autodiff_cannot_param_subset_thunk_partially_applied_orig_fn" = "cannot convert a direct method reference to a '@differentiable' function; use an explicit closure instead";
"autodiff_cannot_differentiate_through_multiple_results" = "cannot differentiate through multiple results";
"autodiff_cannot_differentiate_through_inout_arguments" = "cannot differentiate through 'inout' arguments";
"autodiff_enums_unsupported" = "differentiating enum values is not yet supported";
"autodiff_stored_property_parent_not_differentiable" = "cannot differentiate access to property '%0.%1' because '%0' does not conform to 'Differentiable'";
"autodiff_stored_property_not_differentiable" = "cannot differentiate access to property '%0.%1' because property type %2 does not conform to 'Differentiable'";
"autodiff_stored_property_tangent_not_struct" = "cannot differentiate access to property '%0.%1' because '%0.TangentVector' is not a struct";
"autodiff_stored_property_no_corresponding_tangent" = "cannot differentiate access to property '%0.%1' because '%0.TangentVector' does not have a stored property named '%1'";
"autodiff_tangent_property_wrong_type" = "cannot differentiate access to property '%0.%1' because '%0.TangentVector.%1' does not have expected type %2";
"autodiff_tangent_property_not_stored" = "cannot differentiate access to property '%0.%1' because '%0.TangentVector.%1' is not a stored property";
"autodiff_coroutines_not_supported" = "differentiation of coroutine calls is not yet supported";
"autodiff_cannot_differentiate_writes_to_global_variables" = "cannot differentiate writes to global variables";
"autodiff_cannot_differentiate_writes_to_mutable_captures" = "cannot differentiate writes to mutable captures";
"non_physical_addressof" = "addressof only works with purely physical lvalues; use 'withUnsafePointer' or 'withUnsafeBytes' unless you're implementing 'withUnsafePointer' or 'withUnsafeBytes'";
"non_borrowed_indirect_addressof" = "addressof only works with borrowable in-memory rvalues; use 'withUnsafePointer' or 'withUnsafeBytes' unless you're implementing 'withUnsafePointer' or 'withUnsafeBytes'";
"opt_remark_passed" = "%0";
"opt_remark_missed" = "%0";
"opt_remark_note" = "%0";
"float_to_int_overflow" = "invalid%select{| implicit}2 conversion: '%0' overflows %1";
"negative_fp_literal_overflow_unsigned" = "negative literal '%0' cannot be converted to %select{|unsigned }2%1";
"warning_float_trunc_overflow" = "'%0' overflows to %select{|-}2inf during conversion to %1";
"warning_float_trunc_underflow" = "'%0' underflows and loses precision during conversion to %1";
"warning_float_trunc_hex_inexact" = "'%0' loses precision during conversion to %1";
"warning_float_overflows_maxbuiltin" = "'%0' overflows to %select{|-}1inf because its magnitude exceeds the limits of a float literal";
"warning_int_to_fp_inexact" = "'%1' is not exactly representable as %0; it becomes '%2'";
"isolated_after_nonisolated" = "cannot access %1 %2 here in %select{nonisolated initializer|deinitializer}0";
"nonisolated_blame" = "after %1%2 %3, only nonisolated properties of 'self' can be accessed from %select{this init|a deinit}0";
"isolated_property_mutation_in_nonisolated_context" = "actor-isolated %kind0 can not be %select{referenced|mutated}1 from a nonisolated context";
"warn_isolated_default_argument_context" = "%0 default value in a %1 context";
"return_before_yield" = "accessor must yield before returning";
"multiple_yields" = "accessor must not yield more than once";
"previous_yield" = "previous yield was here";
"possible_return_before_yield" = "accessor must yield on all paths before returning";
"branch_doesnt_yield" = "missing yield when the condition is %select{false|true}0";
"named_case_doesnt_yield" = "missing yield in the %0 case";
"case_doesnt_yield" = "missing yield in %select{this|the nil|the non-nil}0 case";
"switch_value_case_doesnt_yield" = "missing yield in the %0 case";
"try_branch_doesnt_yield" = "missing yield when error is %select{not |}0thrown";
"oslog_constant_eval_trap" = "%0";
"oslog_too_many_instructions" = "interpolated expression and arguments are too complex";
"oslog_invalid_log_message" = "invalid log message; extending types defined in the os module is not supported";
"oslog_const_evaluable_fun_error" = "'%0' failed evaluation";
"oslog_non_constant_message" = "'OSLogMessage' instance passed to the log call is not a constant";
"oslog_non_constant_interpolation" = "'OSLogInterpolation' instance passed to 'OSLogMessage.init' is not a constant";
"oslog_property_not_constant" = "'OSLogInterpolation.%0' is not a constant";
"oslog_message_alive_after_opts" = "string interpolation cannot be used in this context; if you are calling an os_log function, try a different overload";
"oslog_message_explicitly_created" = "'OSLogMessage' must be  created from a string interpolation or string literal";
"oslog_call_in_unreachable_code" = "os log call will never be executed and may have undiagnosed errors";
"global_string_pointer_on_non_constant" = "globalStringTablePointer builtin must be used only on string literals";
"polymorphic_builtin_passed_non_trivial_non_builtin_type" = "Argument of type %0 can not be passed as an argument to a Polymorphic builtin. Polymorphic builtins can only be passed arguments that are trivial builtin typed";
"polymorphic_builtin_passed_type_without_static_overload" = "Static overload %0 does not exist for polymorphic builtin '%1'. Static overload implied by passing argument of type %2";
"builtin_get_function_isolation_bad_argument" = "argument to 'extractFunctionIsolation' must have '@isolated(any)' function type";
"box_to_stack_cannot_promote_box_to_stack_due_to_escape_alloc" = "Can not promote value from heap to stack due to value escaping";
"box_to_stack_cannot_promote_box_to_stack_due_to_escape_location" = "value escapes here";
"semantic_function_improper_nesting" = "'@_semantics' function calls non-'@_semantics' function with nested '@_semantics' calls";
"capturepromotion_concurrentcapture_mutation" = "'%0' mutated after capture by sendable closure";
"capturepromotion_concurrentcapture_closure_here" = "variable captured by sendable closure";
"capturepromotion_concurrentcapture_capturinguse_here" = "capturing use";
"capturepromotion_variable_defined_here" = "variable defined here";
"move_operator_used_on_generic_or_existential_value" = "move() used on a generic or existential value";
"copy_operator_used_on_generic_or_existential_value" = "copy() used on a generic or existential value";
"noimplicitcopy_used_on_generic_or_existential" = "@_noImplicitCopy can not be used on a generic or existential typed binding or a nominal type containing such typed things";
"discard_nontrivial_storage" = "can only 'discard' type %0 if it contains trivially-destroyed stored properties at this time";
"discard_nontrivial_storage_note" = "type %0 cannot be trivially destroyed";
"discard_nontrivial_implicit_storage_note" = "type %0 implicitly contains %1 which cannot be trivially destroyed";
"sil_movechecking_owned_value_consumed_more_than_once" = "'%0' consumed more than once";
"sil_movechecking_owned_value_consumed_and_used_at_same_time" = "'%0' consumed and used at the same time";
"sil_movechecking_value_used_after_consume" = "'%0' used after consume";
"sil_movechecking_guaranteed_value_consumed" = "'%0' is borrowed and cannot be consumed";
"sil_movechecking_borrowed_parameter_captured_by_closure" = "'%0' cannot be captured by an escaping closure since it is a borrowed parameter";
"sil_movechecking_capture_consumed" = "noncopyable '%0' cannot be consumed when captured by an escaping closure";
"sil_movechecking_not_reinitialized_before_end_of_function" = "missing reinitialization of %select{inout parameter|closure capture}1 '%0' after consume";
"sil_movechecking_not_reinitialized_before_end_of_coroutine" = "field '%0' was consumed but not reinitialized; the field must be reinitialized during the access";
"sil_movechecking_not_reinitialized_before_end_of_access" = "missing reinitialization of %select{inout parameter|closure capture}1 '%0' after consume while accessing memory";
"sil_movechecking_value_consumed_in_a_loop" = "'%0' consumed in a loop";
"sil_movechecking_use_after_partial_consume" = "cannot use '%0' after partial consume";
"sil_movechecking_notconsumable_but_assignable_was_consumed" = "cannot consume noncopyable stored property '%0' %select{of a class|that is global}1";
"sil_movechecking_cannot_destructure_has_deinit" = "cannot partially consume '%0' when it has a deinitializer";
"sil_movechecking_cannot_destructure_imported_nonfrozen" = "cannot partially consume '%0' of non-frozen type %1 imported from %2";
"sil_movechecking_cannot_destructure_exported_usableFromInline_alwaysEmitIntoClient" = "cannot partially consume '%0' of non-frozen usableFromInline type %1 within a function annotated @_alwaysEmitIntoClient";
"sil_movechecking_cannot_destructure" = "cannot partially consume '%0'";
"sil_movechecking_cannot_partially_reinit_has_deinit" = "cannot partially reinitialize '%0' when it has a deinitializer; only full reinitialization is allowed";
"sil_movechecking_cannot_partially_reinit_nonfrozen" = "cannot partially reinitialize '%0' of non-frozen type %1 imported from %2; only full reinitialization is allowed";
"sil_movechecking_cannot_partially_reinit_exported_usableFromInline_alwaysEmitIntoClient" = "cannot partially reinitialize '%0' of non-frozen usableFromInline type %1 within a function annotated @_alwaysEmitIntoClient";
"sil_movechecking_cannot_partially_reinit" = "cannot partially reinitialize '%0' after it has been consumed; only full reinitialization is allowed";
"sil_movechecking_discard_missing_consume_self" = "must consume 'self' before exiting method that discards self";
"sil_movechecking_reinit_after_discard" = "cannot reinitialize 'self' after 'discard self'";
"sil_movechecking_consume_during_deinit" = "'self' cannot be consumed during 'deinit'";
"sil_movechecking_discard_self_here" = "discarded self here";
"sil_movechecking_partial_consume_here" = "partially consumed here";
"sil_movechecking_consuming_use_here" = "consumed here";
"sil_movechecking_consumed_again_here" = "consumed again here";
"sil_movechecking_two_consuming_uses_here" = "multiple consumes here";
"sil_movechecking_consuming_and_non_consuming_uses_here" = "consumed and used here";
"sil_movechecking_consuming_closure_use_here" = "closure capturing '%0' here";
"sil_movechecking_nonconsuming_use_here" = "used here";
"sil_movechecking_consumed_in_loop_here" = "consumed in loop here";
"sil_movechecking_deinit_here" = "deinitializer declared here";
"sil_movechecking_not_understand_consumable_and_assignable" = "usage of no-implicit-copy value that the compiler can't verify. This is a compiler bug. Please file a bug with a small example of the bug";
"sil_movechecking_not_understand_moveonly" = "usage of a noncopyable type that compiler can't verify. This is a compiler bug. Please file a bug with a small example of the bug";
"sil_movechecking_bug_missed_copy" = "copy of noncopyable typed value. This is a compiler bug. Please file a bug with a small example of the bug";
"sil_movechecking_bug_exclusivity_violation" = "'%0' has an unexpected exclusivity violation. This is a compiler bug. Please file a bug with a small example of the bug";
"sil_movekillscopyablevalue_move_applied_to_unsupported_move" = "'consume' applied to value that the compiler does not support. This is a compiler bug. Please file a bug with a small example of the bug";
"sil_movekillscopyable_move_applied_to_nonlocal_memory" = "'consume' cannot be applied to %select{globals|escaping captures}0";
"nontrivial_to_rawpointer_conversion" = "forming %1 to a variable of type %0; this is likely incorrect because %2 may contain an object reference.";
"nontrivial_string_to_rawpointer_conversion" = "forming %0 to an inout variable of type String exposes the internal representation rather than the string contents.";
"sil_referencebinding_unknown_pattern" = "reference binding that the compiler does not understand how to check. Please file a bug";
"sil_referencebinding_src_used_within_inout_scope" = "var bound to inout binding cannot be used within the inout binding's scope";
"sil_referencebinding_inout_binding_here" = "inout binding here";
"regionbasedisolation_maybe_race" = "access can happen concurrently";
"regionbasedisolation_inout_sending_must_be_reinitialized" = "'inout sending' parameter must be reinitialized before function exit with a non-actor isolated value";
"regionbasedisolation_unknown_pattern" = "pattern that the region based isolation checker does not understand how to check. Please file a bug";
"regionbasedisolation_transfer_yields_race_no_isolation" = "sending value of non-Sendable type %0 with later accesses risks causing data races";
"regionbasedisolation_transfer_yields_race_with_isolation" = "sending value of non-Sendable type %0 with later accesses from %1 context to %2 context risks causing data races";
"regionbasedisolation_isolated_capture_yields_race" = "%1 closure captures value of non-Sendable type %0 from %2 context; later accesses to value could race";
"regionbasedisolation_transfer_yields_race_stronglytransferred_binding" = "value of non-Sendable type %0 accessed after being transferred; later accesses could race";
"regionbasedisolation_arg_transferred" = "sending %0 value of type %1 with later accesses to %2 context risks causing data races";
"regionbasedisolation_arg_passed_to_strongly_transferred_param" = "%0 value of type %1 passed as a strongly transferred parameter; later accesses could race";
"regionbasedisolation_isolated_since_in_same_region_basename" = "value is %0 since it is in the same region as %1";
"regionbasedisolation_isolated_since_in_same_region_string" = "%0 is %1since it is in the same region as %2";
"regionbasedisolation_named_transfer_yields_race" = "sending %0 risks causing data races";
"regionbasedisolation_type_is_non_sendable" = "%0 is a non-Sendable type";
"regionbasedisolation_inout_sending_cannot_be_actor_isolated" = "'inout sending' parameter %0 cannot be %1at end of function";
"regionbasedisolation_inout_sending_cannot_be_actor_isolated_note" = "%1%0 risks causing races in between %1uses and caller uses since caller assumes value is not actor isolated";
"regionbasedisolation_out_sending_cannot_be_actor_isolated_type" = "returning a %1 %0 value as a 'sending' result risks causing data races";
"regionbasedisolation_out_sending_cannot_be_actor_isolated_note_type" = "returning a %1 %0 value risks causing races since the caller assumes the value can be safely sent to other isolation domains";
"regionbasedisolation_out_sending_cannot_be_actor_isolated_named" = "returning %1 %0 as a 'sending' result risks causing data races";
"regionbasedisolation_out_sending_cannot_be_actor_isolated_note_named" = "returning %1 %0 risks causing data races since the caller assumes that %0 can be safely sent to other isolation domains";
"regionbasedisolation_named_info_transfer_yields_race" = "sending %1%0 to %2 callee risks causing data races between %2 and local %3 uses";
"regionbasedisolation_named_info_transfer_yields_race_callee" = "sending %1%0 to %2 %3 %4 risks causing data races between %2 and local %5 uses";
"regionbasedisolation_named_transfer_non_transferrable" = "sending %1%0 to %2 callee risks causing data races between %2 and %3 uses";
"regionbasedisolation_named_transfer_non_transferrable_callee" = "sending %1%0 to %2 %3 %4 risks causing data races between %2 and %5 uses";
"regionbasedisolation_named_nonisolated_asynclet_name" = "sending %0 into async let risks causing data races between async let uses and local uses";
"regionbasedisolation_named_transfer_into_sending_param" = "%0%1 is passed as a 'sending' parameter; Uses in callee may race with later %0uses";
"regionbasedisolation_named_notransfer_transfer_into_result" = "%0%1 cannot be a 'sending' result. %2 uses may race with caller uses";
"regionbasedisolation_named_value_used_after_explicit_sending" = "%0 used after being passed as a 'sending' parameter; Later uses could race";
"regionbasedisolation_named_isolated_closure_yields_race" = "%0%1 is captured by a %2 closure. %2 uses in closure may race against later %3 uses";
"regionbasedisolation_named_transfer_nt_asynclet_capture" = "sending %1 %0 into async let risks causing data races between nonisolated and %1 uses";
"regionbasedisolation_task_or_actor_isolated_transferred" = "task or actor isolated value cannot be sent";
"deinit_not_visible" = "deinit of non-copyable type not visible in the current module";
"vector_capacity_not_constant" = "vector capacity needs to be constant";
"fixed_arrays_not_available" = "fixed arrays are only available with -enable-experimental-feature FixedArrays";
"lifetime_variable_outside_scope" = "lifetime-dependent variable '%0' escapes its scope";
"lifetime_value_outside_scope" = "lifetime-dependent value escapes its scope";
"lifetime_outside_scope_argument" = "it depends on the lifetime of argument '%0'";
"lifetime_outside_scope_access" = "it depends on this scoped access to variable '%0'";
"lifetime_outside_scope_variable" = "it depends on the lifetime of variable '%0'";
"lifetime_outside_scope_value" = "it depends on the lifetime of this parent value";
"lifetime_outside_scope_use" = "this use of the lifetime-dependent value is out of scope";
"lifetime_outside_scope_escape" = "this use causes the lifetime-dependent value to escape";
"noncopyable_shared_case_block_unimplemented" = "matching a non-'Copyable' value using a case label that has multiple patterns is not implemented";
"no_llvm_target" = "error loading LLVM target for triple '%0': %1";
"error_codegen_init_fail" = "cannot initialize code generation passes for target";
"irgen_unimplemented" = "unimplemented IR generation feature %0";
"irgen_failure" = "IR generation failure: %0";
"type_to_verify_not_found" = "unable to find type '%0' to verify";
"type_to_verify_ambiguous" = "type to verify '%0' is ambiguous";
"type_to_verify_dependent" = "type to verify '%0' has unbound generic parameters";
"too_few_output_filenames" = "too few output file names specified";
"no_input_files_for_mt" = "no swift input files for multi-threaded compilation";
"alignment_dynamic_type_layout_unsupported" = "@_alignment is not supported on types with dynamic layout";
"alignment_less_than_natural" = "@_alignment cannot decrease alignment below natural alignment of %0";
"alignment_more_than_maximum" = "@_alignment cannot increase alignment above maximum alignment of %0";
"raw_layout_dynamic_type_layout_unsupported" = "@_rawLayout is not yet supported for layouts dependent on generic types";
"temporary_allocation_size_negative" = "allocation capacity must be greater than or equal to zero";
"temporary_allocation_size_overflow" = "allocation byte count too large";
"temporary_allocation_alignment_not_positive" = "alignment value must be greater than zero";
"temporary_allocation_alignment_not_power_of_2" = "alignment value must be a power of two";
"explosion_size_oveflow" = "explosion size too large";
"layout_strings_blocked" = "Layout string value witnesses have been disabled for module '%0' through block list entry";
"warning_no_such_sdk" = "no such SDK: '%0'";
"error_no_frontend_args" = "no arguments provided to '-frontend'";
"error_no_such_file_or_directory" = "no such file or directory: '%0'";
"error_unsupported_target_os" = "unsupported target OS: '%0'";
"error_unsupported_target_arch" = "unsupported target architecture: '%0'";
"error_upcoming_feature_on_by_default" = "upcoming feature '%0' is already enabled as of Swift version %1";
"error_unknown_library_level" = "unknown library level '%0', expected one of 'api', 'spi', 'ipi', or 'other'";
"error_old_spi_only_import_unsupported" = "'-experimental-spi-imports' is unsupported in Swift 6, use '@_spiOnly' instead";
"error_unknown_require_explicit_availability" = "unknown argument '%0', passed to -require-explicit-availability, expected 'error', 'warn' or 'ignore'";
"error_unsupported_opt_for_target" = "unsupported option '%0' for target '%1'";
"warning_inferred_simulator_target" = "inferring simulator environment for target '%0'; use '-target %1' instead";
"error_argument_not_allowed_with" = "argument '%0' is not allowed with '%1'";
"warning_argument_not_supported_with_optimization" = "argument '%0' is not supported with optimization";
"error_option_requires_sanitizer" = "option '%0' requires a sanitizer to be enabled. Use -sanitize= to enable a sanitizer";
"warning_option_requires_specific_sanitizer" = "option '%0' has no effect when '%1' sanitizer is disabled. Use -sanitize=%1 to enable the sanitizer";
"error_option_missing_required_argument" = "option '%0' is missing a required argument (%1)";
"cannot_open_file" = "cannot open file '%0' (%1)";
"cannot_open_serialized_file" = "cannot open file '%0' for diagnostics emission (%1)";
"error_open_input_file" = "error opening input file '%0' (%1)";
"error_clang_importer_create_fail" = "clang importer creation failed";
"error_missing_arg_value" = "missing argument value for '%0', expected %1 argument(s)";
"error_unknown_arg" = "unknown argument: '%0'";
"error_invalid_arg_value" = "invalid value '%1' in '%0'";
"error_invalid_arg_combination" = "unsupported argument combination: '%0' and '%1'";
"warning_invalid_locale_code" = "unsupported locale code; supported locale codes are: '%0'";
"warning_locale_path_not_found" = "specified localization directory '%0' does not exist, translation is disabled";
"warning_cannot_find_locale_file" = "cannot find translations for '%0' at '%1': no such file";
"warning_cannot_multithread_batch_mode" = "ignoring -num-threads argument; cannot multithread batch mode";
"error_cannot_explicit_interface_build_in_mode" = "'-explicit-interface-module-build' only supported when building a module from interface ('-compile-module-from-interface' or '-typecheck-module-from-interface')'";
"error_cannot_direct_cc1_pcm_build_in_mode" = "'-direct-clang-cc1-module-build' only supported when building a PCM ('-emit-pcm')'";
"error_unsupported_option_argument" = "unsupported argument '%1' to option '%0'";
"error_swift_module_file_requires_delimeter" = "-swift-module-file= argument requires format <name>=<path>, got: '%0'";
"error_immediate_mode_missing_stdlib" = "could not load the swift standard library";
"error_immediate_mode_missing_library" = "could not load %select{shared library|framework}0 '%1'";
"error_immediate_mode_primary_file" = "immediate mode is incompatible with -primary-file";
"error_missing_frontend_action" = "no frontend action was selected";
"error_unsupported_frontend_action" = "unsupported action: %0";
"error_invalid_source_location_str" = "invalid source location string '%0'";
"error_no_source_location_scope_map" = "-dump-scope-maps argument must be 'expanded' or a list of source locations";
"error_load_plugin_executable" = "invalid value '%0' in '-load-plugin-executable'; make sure to use format '<plugin path>#<module names>'";
"note_valid_swift_versions" = "valid arguments to '-swift-version' are %0";
"error_mode_cannot_emit_dependencies" = "this mode does not support emitting dependency files";
"error_mode_cannot_emit_reference_dependencies" = "this mode does not support emitting reference dependency files";
"error_mode_cannot_emit_header" = "this mode does not support emitting Objective-C or C++ headers";
"error_mode_cannot_emit_loaded_module_trace" = "this mode does not support emitting the loaded module trace";
"error_mode_cannot_emit_module" = "this mode does not support emitting modules";
"error_mode_cannot_emit_module_doc" = "this mode does not support emitting module documentation files";
"error_mode_cannot_emit_module_source_info" = "this mode does not support emitting module source info files";
"error_mode_cannot_emit_interface" = "this mode does not support emitting module interface files";
"error_mode_cannot_emit_module_summary" = "this mode does not support emitting module summary files";
"error_mode_cannot_emit_symbol_graph" = "this mode does not support emitting symbol graph files";
"error_mode_cannot_emit_abi_descriptor" = "this mode does not support emitting ABI descriptor files";
"error_mode_cannot_emit_api_descriptor" = "this mode does not support emitting API descriptor files";
"error_mode_cannot_emit_const_values" = "this mode does not support emitting extracted const values";
"error_mode_cannot_emit_module_semantic_info" = "this mode does not support emitting module semantic info";
"cannot_emit_ir_skipping_function_bodies" = "the -experimental-skip-*-function-bodies* flags do not support emitting IR";
"emit_reference_dependencies_without_primary_file" = "ignoring -emit-reference-dependencies (requires -primary-file)";
"ignoring_option_requires_option" = "ignoring %0 (requires %1)";
"warn_ignore_option_overriden_by" = "ignoring %0 (overriden by %1)";
"warn_implicit_concurrency_import_failed" = "unable to perform implicit import of \"_Concurrency\" module: no such module found";
"warn_implicit_string_processing_import_failed" = "unable to perform implicit import of \"_StringProcessing\" module: no such module found";
"warn_implicit_backtracing_import_failed" = "unable to perform implicit import of \"_Backtracing\" module: no such module found";
"error_module_name_required" = "-module-name is required";
"error_bad_module_name" = "module name \"%0\" is not a valid identifier%select{|; use -module-name flag to specify an alternate name}1";
"error_stdlib_module_name" = "module name \"%0\" is reserved for the standard library%select{|; use -module-name flag to specify an alternate name}1";
"error_bad_export_as_name" = "export-as name \"%0\" is not a valid identifier";
"error_empty_package_name" = "package-name is empty";
"error_stdlib_not_found" = "unable to load standard library for target '%0'";
"error_module_alias_invalid_format" = "invalid module alias format \"%0\"; make sure to use the format '-module-alias alias_name=real_name'";
"error_module_alias_forbidden_name" = "invalid module alias \"%0\"; make sure the alias differs from the module name, module ABI name, module link name, and a standard library name";
"error_module_alias_duplicate" = "duplicate module alias; the name \"%0\" is already used for an alias or a real name";
"error_unable_to_load_supplementary_output_file_map" = "unable to load supplementary output file map '%0': %1";
"error_missing_entry_in_supplementary_output_file_map" = "supplementary output file map '%0' is missing an entry for '%1' (this likely indicates a compiler issue; please submit a bug report (https://swift.org/contributing/#reporting-bugs))";
"error_repl_requires_no_input_files" = "REPL mode requires no input files";
"error_mode_requires_one_input_file" = "this mode requires a single input file";
"error_mode_requires_an_input_file" = "this mode requires at least one input file";
"error_mode_requires_one_sil_multi_sib" = "this mode requires .sil for primary-file and only .sib for other inputs";
"error_clang_validate_once_requires_session_file" = "'-validate-clang-modules-once' also requires a '-clang-build-session-file' argument";
"error_no_output_filename_specified" = "an %0 filename was not specified for a mode which requires an %0 filename";
"error_implicit_output_file_is_directory" = "the implicit output file '%0' is a directory; explicitly specify a filename using %1";
"error_if_any_output_files_are_specified_they_all_must_be" = "if any %0 files are specified, they all must be";
"error_primary_file_not_found" = "primary file '%0' was not found in file list '%1'";
"error_cannot_have_input_files_with_file_list" = "cannot have input files with file list";
"error_cannot_have_primary_files_with_primary_file_list" = "cannot have primary input files with primary file list";
"error_cannot_have_supplementary_outputs" = "cannot have '%0' with '%1'";
"error_duplicate_input_file" = "duplicate input file '%0'";
"repl_must_be_initialized" = "variables currently must have an initial value when entered at the top level of the REPL";
"verify_encountered_fatal" = "fatal error encountered while in -verify mode";
"error_parse_input_file" = "error parsing input file '%0' (%1)";
"error_write_index_unit" = "writing index unit file: %0";
"error_create_index_dir" = "creating index directory: %0";
"error_write_index_record" = "writing index record file: %0";
"error_index_failed_status_check" = "failed file status check: %0";
"error_index_inputs_more_than_outputs" = "index output filenames do not match input source files";
"remark_indexing_system_module" = "indexing system module at %0%select{|; skipping because of a broken swiftinterface}1";
"error_create_symbolic_interfaces_dir" = "creating symbolic interfaces directory: %0";
"error_symbolic_interfaces_failed_status_check" = "failed file status check: %0";
"error_write_symbolic_interface" = "writing symbolic interface file: %0";
"remark_emitting_symbolic_interface_module" = "emitting symbolic interface at %0%select{|; skipping because it's up to date}1";
"error_wrong_number_of_arguments" = "wrong number of '%0' arguments (expected %1, got %2)";
"error_formatting_multiple_file_ranges" = "file ranges don't support multiple input files";
"error_formatting_invalid_range" = "file range is invalid";
"stats_disabled" = "compiler was not built with support for collecting statistics";
"tbd_warn_truncating_version" = "truncating %select{current|compatibility}0 version '%1' in TBD file to fit in 32-bit space used by old mach-o format";
"tbd_err_invalid_version" = "invalid dynamic library %select{current|compatibility}0 version '%1'";
"tbd_only_supported_in_whole_module" = "TBD generation is only supported when the whole module can be seen";
"tbd_not_supported_with_cmo" = "Test-Based InstallAPI (TBD) is not support with cross-module-optimization";
"api_descriptor_only_supported_in_whole_module" = "API descriptor generation is only supported when the whole module can be seen";
"previous_installname_map_missing" = "cannot open previous install name map from %0";
"previous_installname_map_corrupted" = "previous install name map from %0 is malformed";
"explicit_swift_module_map_missing" = "cannot open explicit Swift module map from %0";
"explicit_swift_module_map_corrupted" = "explicit Swift module map from %0 is malformed";
"placeholder_dependency_module_map_missing" = "cannot open Swift placeholder dependency module map from %0";
"placeholder_dependency_module_map_corrupted" = "Swift placeholder dependency module map from %0 is malformed";
"batch_scan_input_file_missing" = "cannot open batch dependencies scan input file from %0";
"const_extract_protocol_list_input_file_missing" = "cannot open constant extraction protocol list input file from %0";
"batch_scan_input_file_corrupted" = "batch dependencies scan input file from %0 is malformed";
"const_extract_protocol_list_input_file_corrupted" = "constant extraction protocol list input file from %0 is malformed";
"unknown_platform_name" = "unknown platform name %0";
"unknown_swift_module_name" = "cannot find Swift module with name %0";
"cannot_find_install_name" = "cannot find previous install name for module %0 in %1";
"symbol_in_tbd_not_in_ir" = "symbol '%0' (%1) is in TBD file, but not in generated IR";
"symbol_in_ir_not_in_tbd" = "symbol '%0' (%1) is in generated IR file, but not in TBD file";
"tbd_validation_failure" = "please submit a bug report (https://swift.org/contributing/#reporting-bugs), and add '-Xfrontend -validate-tbd-against-ir=none' to squash the errors";
"redundant_prefix_compilation_flag" = "invalid argument '-D%0'; did you provide a redundant '-D' in your build settings?";
"invalid_conditional_compilation_flag" = "conditional compilation flags must be valid Swift identifiers (rather than '%0')";
"cannot_assign_value_to_conditional_compilation_flag" = "conditional compilation flags do not have values in Swift; they are either present or absent (rather than '%0')";
"framework_search_path_includes_framework_extension" = "framework search path ends in \".framework\"; add directory containing framework instead: %0";
"error_optimization_remark_pattern" = "%0 in '%1'";
"error_opt_invalid_mapping" = "values for '%0' must be in the format 'original=remapped', but '%1' was provided";
"invalid_vfs_overlay_file" = "invalid virtual overlay file '%0'";
"module_interface_scoped_import_unsupported" = "scoped imports are not yet supported in module interfaces";
"warn_unsupported_module_interface_swift_version" = "module interfaces are only supported with Swift language version 5 or later (currently using -swift-version %0)";
"warn_unsupported_module_interface_library_evolution" = "module interfaces are only supported with -enable-library-evolution";
"error_extracting_version_from_module_interface" = "error extracting version from module interface";
"unsupported_version_of_module_interface" = "unsupported version of module interface '%0': '%1'";
"error_opening_explicit_module_file" = "failed to open explicit Swift module: %0";
"error_extracting_flags_from_module_interface" = "error extracting flags from module interface";
"warning_module_shadowing_may_break_module_interface" = "public %0 %1 shadows module %2, which may cause failures when importing %3 or its clients in some configurations; please rename either the %0 %1 or the module %2, or see https://github.com/apple/swift/issues/56573 for workarounds";
"rebuilding_module_from_interface" = "rebuilding module '%0' from interface '%1'";
"sdk_version_pbm_version" = "SDK build version is '%0'; prebuilt modules were built using SDK build version: '%1'";
"compiled_module_ignored_reason" = "compiled module '%0' was ignored because %select{%error|it belongs to a framework in the SDK|loading from module interfaces is preferred|it's a compiler host module|the module name is blocklisted,|the default is to load from module interfaces}1";
"out_of_date_module_here" = "%select{compiled|cached|forwarding|prebuilt}0 module is out of date: '%1'";
"module_interface_ignored_reason" = "not defaulting to module interface because %select{%error|it is a local module|it was blocklisted|the reader is a debugger}1, preferring binary module at '%0'";
"module_interface_dependency_out_of_date" = "dependency is out of date: '%0'";
"module_interface_dependency_missing" = "dependency is missing: '%0'";
"compiled_module_invalid" = "unable to load compiled module '%0'";
"compiled_module_invalid_reason" = "unable to load compiled module '%0': %1";
"unknown_forced_module_loading_mode" = "unknown value for SWIFT_FORCE_MODULE_LOADING variable: '%0'";
"error_creating_remark_serializer" = "error while creating remark serializer: '%0'";
"invalid_can_import_module_version" = "invalid version passed to -module-can-import-version: '%0'";
"interface_file_lock_failure" = "building module interface without lock file";
"interface_file_lock_timed_out" = "timed out waiting to acquire lock file for module interface '%0'";
"error_option_required" = "option '%0' is required";
"error_nonexistent_output_dir" = "'-output-dir' argument '%0' does not exist or is not a directory";
"interface_file_backup_used" = "building module from '%0' failed; retrying building module from '%1'";
"warn_flag_deprecated" = "flag '%0' is deprecated";
"error_nondeterministic_output" = "output file '%0' is not deterministic: hash value '%1' vs '%2' between two compilations";
"error_output_missing" = "output file '%0' is missing from %select{first|second}1 compilation for deterministic check";
"matching_output_produced" = "produced matching output file '%0' for deterministic check: hash '%1'";
"error_caching_no_cas_fs" = "caching is enabled without -cas-fs option, input is not immutable";
"error_prefix_mapping" = "cannot create scanner prefix mapping: '%0'";
"replay_output" = "replay output file '%0': key '%1'";
"output_cache_miss" = "cache miss for input file '%0': key '%1'";
"error_invalid_cas_id" = "invalid CASID '%0' (%1)";
"error_cas" = "CAS error encountered: %0";
"error_failed_cached_diag" = "failed to serialize cached diagnostics: %0";
"error_replay_cached_diag" = "failed to replay cached diagnostics: %0";
"error_load_input_from_cas" = "failed to load input '%0' from CAS";
"error_wrong_input_num_for_input_file_key" = "-input-file-key only support one input file";
"missing_member_dependency" = "expected %select{%error|provided|member|potential member|dynamic member}0 dependency does not exist: %1";
"unexpected_dependency" = "unexpected %select{%error|%error|member|potential member|dynamic member}0 dependency: %1";
"unexpected_provided_entity" = "unexpected provided entity: %0";
"negative_expectation_violated" = "unexpected dependency exists: %0";
"expectation_missing_opening_braces" = "expected {{ in expectation";
"expectation_missing_closing_braces" = "didn't find '}}' to match '{{' in expectation";
"module_incompatible_with_skip_function_bodies" = "module '%0' cannot be built with any of the -experimental-skip-*-function-bodies* flags; they have been automatically disabled";
"access_notes_file_io_error" = "ignored access notes file at '%0' because it cannot be read: %1";
"error_in_access_notes_file" = "ignored access notes file because it cannot be parsed: %0";
"warning_in_access_notes_file" = "ignored invalid content in access notes file: %0";
"dont_enable_interop_and_compat" = "do not pass both '-enable-experimental-cxx-interop' and '-cxx-interoperability-mode'; remove '-enable-experimental-cxx-interop'";
"valid_cxx_interop_modes" = "valid arguments to '-cxx-interoperability-mode=' are %0";
"swift_will_maintain_compat" = "Swift will maintain source compatibility for imported APIs based on the selected compatibility mode, so updating the Swift compiler will not change how APIs are imported";
"enable_interop_flag_deprecated" = "the '-enable-experimental-cxx-interop' flag is deprecated; please pass '-cxx-interoperability-mode=' instead";
"layout_string_instantiation_without_layout_strings" = "-enable-layout-string-value-witnesses-instantiation can not be enabled without -enable-layout-string-value-witnesses.";
"evolution_with_embedded" = "Library evolution cannot be enabled with embedded Swift.";
"wmo_with_embedded" = "Whole module optimization (wmo) must be enabled with embedded Swift.";
"objc_with_embedded" = "Objective-C interoperability cannot be enabled with embedded Swift.";
"no_allocations_without_embedded" = "-no-allocations is only applicable with embedded Swift.";
"no_swift_sources_with_embedded" = "embedded swift cannot be enabled in a compiler built without Swift sources";
"experimental_not_supported_in_production" = "experimental feature '%0' cannot be enabled in production compiler";
"warning_parallel_execution_not_supported" = "parallel execution not supported; falling back to serial execution";
"error_unable_to_execute_command" = "unable to execute command: %0";
"error_command_signalled_without_signal_number" = "%0 command failed due to signal (use -v to see invocation)";
"error_command_signalled" = "%0 command failed due to signal %1 (use -v to see invocation)";
"error_command_failed" = "%0 command failed with exit code %1 (use -v to see invocation)";
"error_expected_one_frontend_job" = "unable to handle compilation, expected exactly one frontend job";
"error_expected_frontend_command" = "expected a swift frontend command";
"error_cannot_specify__o_for_multiple_outputs" = "cannot specify -o when generating multiple output files";
"error_static_emit_executable_disallowed" = "-static may not be used with -emit-executable";
"error_unable_to_load_output_file_map" = "unable to load output file map '%1': %0";
"error_no_output_file_map_specified" = "no output file map specified";
"error_unable_to_make_temporary_file" = "unable to make temporary file: %0";
"error_no_input_files" = "no input files";
"error_unexpected_input_file" = "unexpected input file: %0";
"error_unknown_target" = "unknown target '%0'";
"error_framework_bridging_header" = "using bridging headers with framework targets is unsupported";
"error_bridging_header_module_interface" = "using bridging headers with module interfaces is unsupported";
"error_i_mode" = "the flag '-i' is no longer required and has been removed; use '%0 input-filename'";
"warning_unnecessary_repl_mode" = "unnecessary option '%0'; this is the default for '%1' with no input files";
"error_unsupported_option" = "option '%0' is not supported by '%1'; did you mean to use '%2'?";
"incremental_requires_output_file_map" = "ignoring -incremental (currently requires an output file map)";
"incremental_requires_build_record_entry" = "ignoring -incremental; output file map has no master dependencies entry (\"%0\" under \"\")";
"unable_to_open_incremental_comparison_log" = "unable to open incremental comparison log file '%0'";
"error_os_minimum_deployment" = "Swift requires a minimum deployment target of %0";
"error_sdk_too_old" = "Swift does not support the SDK '%0'";
"error_ios_maximum_deployment_32" = "iOS %0 does not support 32-bit programs";
"error_unsupported_target_variant" = "unsupported '%select{-target|-target-variant}1' value '%0'; use 'ios-macabi' instead";
"warn_arclite_not_found_when_link_objc_runtime" = "unable to find Objective-C runtime support library 'arclite'; pass '-no-link-objc-runtime' to silence this warning";
"warn_cannot_stat_input" = "unable to determine when '%0' was last modified: %1";
"warn_unable_to_load_dependencies" = "unable to load dependencies file \"%0\", disabling incremental mode";
"error_input_changed_during_build" = "input file '%0' was modified during the build";
"error_conflicting_options" = "conflicting options '%0' and '%1'";
"error_requirement_not_met" = "'%0' requires '%1'";
"warn_ignore_embed_bitcode" = "ignoring -embed-bitcode since no object file is being generated";
"warn_ignore_embed_bitcode_marker" = "ignoring -embed-bitcode-marker since no object file is being generated";
"verify_debug_info_requires_debug_option" = "ignoring '-verify-debug-info'; no debug info is being generated";
"verify_incremental_dependencies_needs_incremental" = "'-verify-incremental-dependencies' requires '-incremental'";
"error_profile_missing" = "no profdata file exists at '%0'";
"warn_opt_remark_disabled" = "Emission of optimization records has been disabled, because it requires a single compiler invocation: consider enabling the -whole-module-optimization flag";
"warn_ignoring_batch_mode" = "ignoring '-enable-batch-mode' because '%0' was also specified";
"warn_ignoring_wmo" = "ignoring '-wmo' because '-dump-ast' was also specified";
"warn_use_filelists_deprecated" = "the option '-driver-use-filelists' is deprecated; use '-driver-filelist-threshold=0' instead";
"warn_unable_to_load_primary" = "unable to load primary swift file \"%0\", %1";
"cannot_find_migration_script" = "missing migration script from path '%0'";
"error_darwin_static_stdlib_not_supported" = "-static-stdlib is no longer supported on Apple platforms";
"warn_darwin_link_objc_deprecated" = "-link-objc-runtime is no longer supported on Apple platforms";
"error_darwin_only_supports_libcxx" = "The only C++ standard library supported on Apple platforms is libc++";
"error_wasm_doesnt_support_global_base" = "The --global-base argument is not supported when targeting WebAssembly";
"error_hermetic_seal_cannot_have_library_evolution" = "Cannot use -experimental-hermetic-seal-at-link with -enable-library-evolution";
"error_hermetic_seal_requires_lto" = "-experimental-hermetic-seal-at-link requires -lto=llvm-full or -lto=llvm-thin";
"warn_drv_darwin_sdk_invalid_settings" = "SDK settings were ignored because 'SDKSettings.json' could not be parsed";
"warning_unsupported_driver_option" = "option '%0' is only supported in swift-driver";
"new_driver_not_found" = "using (deprecated) legacy driver, Swift installation does not contain swift-driver at: '%0'";
"old_driver_deprecated" = "legacy driver is now deprecated; consider avoiding specifying '%0'";
"invalid_name" = "'%0' is not a valid name";
"extract_function_not_supported_swiftsyntax_missing" = "Extract Function is not supported because sourcekitd was built without swift-syntax";
"invalid_location" = "given location is not valid";
"arity_mismatch" = "the given new name '%0' does not match the arity of the old name '%1'";
"name_not_functionlike" = "the 'call' name usage cannot be used with a non-function-like name '%0'";
"unresolved_location" = "cannot rename due to unresolved location";
"location_module_mismatch" = "given location does not belong to module '%0'";
"value_decl_no_loc" = "cannot rename %0 as it has no declaration location";
"decl_is_system_symbol" = "cannot rename system symbol %0";
"decl_has_no_name" = "cannot rename as no declaration name was found";
"decl_no_accessibility" = "cannot rename as accessibility could not be determined";
"decl_from_clang" = "cannot rename a Clang symbol from its Swift reference";
"decl_in_macro" = "cannot rename a symbol defined in a macro";
"value_decl_referenced_out_of_range" = "value decl '%0' is referenced out of range";
"multi_entry_range" = "selected range has more than one entry point";
"orphan_loop_keyword" = "selected range contains %0 but not its target loop";
"invalid_default_location" = "given location is not on a default statement";
"no_parent_switch" = "cannot find enclosing switch statement";
"no_remaining_cases" = "no remaining cases to expand";
"mismatched_rename" = "the name at the given location cannot be renamed to '%0'";
"no_insert_position" = "cannot find inserting position";
"missing_callback_arg" = "cannot refactor as callback closure argument missing";
"mismatched_callback_args" = "cannot refactor as callback arguments do not match declaration";
"unknown_callback_conditions" = "cannot refactor complex if conditions";
"mixed_callback_conditions" = "cannot refactor mixed nil and not-nil conditions";
"callback_with_fallthrough" = "cannot refactor switch with fallthrough";
"callback_with_default" = "cannot refactor switch with default case";
"callback_multiple_case_items" = "cannot refactor switch using a case with multiple items";
"callback_where_case_item" = "cannot refactor switch using a case with where clause";
"unknown_callback_case_item" = "cannot refactor complex case conditions";
"generic_sig_change" = "%0 has generic signature change from %1 to %2";
"raw_type_change" = "%0(%1) is now %2 representable";
"removed_decl" = "%0 has been removed%select{| (deprecated)}1";
"moved_decl" = "%0 has been moved to %1";
"renamed_decl" = "%0 has been renamed to %1";
"decl_type_change" = "%0 has %1 type change from %2 to %3";
"decl_attr_change" = "%0 changes from %1 to %2";
"decl_new_attr" = "%0 is now %1";
"decl_reorder" = "%0 in a non-resilient type changes position from %1 to %2";
"decl_added" = "%0 is added to a non-resilient type";
"var_has_fixed_order_change" = "%0 is %select{now|no longer}1 a stored property";
"func_has_fixed_order_change" = "%0 is %select{now|no longer}1 a non-final instance function";
"default_arg_removed" = "%0 has removed default argument from %1";
"conformance_removed" = "%0 has removed %select{conformance to|inherited protocol}2 %1";
"conformance_added" = "%0 has added inherited protocol %1";
"existing_conformance_added" = "%0 has added a conformance to an existing protocol %1";
"default_associated_type_removed" = "%0 has removed default type %1";
"protocol_req_added" = "%0 has been added as a protocol requirement";
"super_class_removed" = "%0 has removed its super class %1";
"super_class_changed" = "%0 has changed its super class from %1 to %2";
"decl_kind_changed" = "%0 has been changed to a %1";
"optional_req_changed" = "%0 is %select{now|no longer}1 an optional requirement";
"no_longer_open" = "%0 is no longer open for subclassing";
"func_type_escaping_changed" = "%0 has %select{removed|added}2 @escaping in %1";
"func_self_access_change" = "%0 has self access kind changing from %1 to %2";
"param_ownership_change" = "%0 has %1 changing from %2 to %3";
"type_witness_change" = "%0 has type witness type for %1 changing from %2 to %3";
"decl_new_witness_table_entry" = "%0 now requires%select{| no}1 new witness table entry";
"class_member_moved_to_extension" = "Non-final class member %0 is moved to extension";
"new_decl_without_intro" = "%0 is a new API without @available attribute";
"objc_name_change" = "%0 has ObjC name change from %1 to %2";
"desig_init_added" = "%0 has been added as a designated initializer to an open class";
"added_invisible_designated_init" = "%0 has new designated initializers that are not visible to clients";
"not_inheriting_convenience_inits" = "%0 no longer inherits convenience inits from its superclass";
"enum_case_added" = "%0 has been added as a new enum case";
"demangled_name_changed" = "%0 has mangled name changing from '%1' to '%2'";
"cannot_read_allowlist" = "cannot read breakage allowlist at '%0'";
